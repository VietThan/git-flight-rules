# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-06-24 20:08-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: README.md:2
msgid "# Flight rules for Git"
msgstr "# Flight rules cho Git"

#. type: Plain text
#: README.md:5
msgid ""
"üåç *[English](README.md) ‚àô [Espa√±ol](README_es.md)  ‚àô [–†—É—Å—Å–∫–∏–π](README_ru.md) "
"‚àô [ÁÆÄ‰Ωì‰∏≠Êñá](README_zh-CN.md)‚àô [ÌïúÍµ≠Ïñ¥](README_kr.md)  ‚àô [Ti·∫øng Vi·ªát](README_vi.md) "
"‚àô [Fran√ßais](README_fr.md) ‚àô [Êó•Êú¨Ë™û](README_ja.md)*"
msgstr ""
"üåç *[English](README.md) ‚àô [Espa√±ol](README_es.md)  ‚àô [–†—É—Å—Å–∫–∏–π](README_ru.md) "
"‚àô [ÁÆÄ‰Ωì‰∏≠Êñá](README_zh-CN.md)‚àô [ÌïúÍµ≠Ïñ¥](README_kr.md)  ‚àô [Ti·∫øng Vi·ªát](README_vi.md) "
"‚àô [Fran√ßais](README_fr.md) ‚àô [Êó•Êú¨Ë™û](README_ja.md)*"

#. type: Plain text
#: README.md:7
msgid "#### What are \"flight rules\"?"
msgstr "#### \"Flight rules\" l√† g√¨?"

#. type: Plain text
#: README.md:9
msgid ""
"A guide for astronauts (now, programmers using Git) about what to do when "
"things go wrong."
msgstr ""
"L√† t√†i li·ªáu h∆∞·ªõng d·∫´n cho c√°c phi h√†nh gia v≈© tr·ª• (v√† t·∫°i ƒë√¢y, cho c√°c l·∫≠p "
"tr√¨nh vi√™n s·ª≠ d·ª•ng Git) v·ªÅ nh·ªØng vi·ªác c·∫ßn l√†m khi c√≥ sai l·∫ßm x·∫£y ra."

#. type: Plain text
#: README.md:11
msgid ""
"> *Flight Rules* are the hard-earned body of knowledge recorded in manuals "
"that list, step-by-step, what to do if X occurs, and why. Essentially, they "
"are extremely detailed, scenario-specific standard operating "
"procedures. [...]"
msgstr ""
"> *Flight Rules* l√† nh·ªØng ki·∫øn th·ª©c v·∫•t v·∫£ ki·∫øm ƒë∆∞·ª£c trong c√°c h∆∞·ªõng d·∫´n s·ª≠ "
"d·ª•ng ch·ªâ ra, t·ª´ng b∆∞·ªõc, ph·∫£i l√†m g√¨ n·∫øu X x·∫£y ra v√† t·∫°i sao. V·ªÅ c∆° b·∫£n, "
"ch√∫ng l√† c√°c chu·∫©n quy tr√¨nh th·ª±c hi·ªán r·∫•t chi ti·∫øt cho t·ª´ng k·ªãch b·∫£n c·ª• th·ªÉ "
". [...]"

#. type: Plain text
#: README.md:13
msgid ""
"> NASA has been capturing our missteps, disasters and solutions since the "
"early 1960s, when Mercury-era ground teams first started gathering \"lessons "
"learned\" into a compendium that now lists thousands of problematic "
"situations, from engine failure to busted hatch handles to computer "
"glitches, and their solutions."
msgstr ""
"> NASA qua th·ªùi gian ƒë√£ ghi l·∫°i nh·ªØng sai l·∫ßm, th·∫£m ho·∫° v√† gi·∫£i ph√°p c·ªßa "
"ch√∫ng t√¥i k·ªÉ t·ª´ ƒë·∫ßu nh·ªØng nƒÉm 1960, khi c√°c ƒë·ªôi m·∫∑t ƒë·∫•t trong th·ªùi k·ª≥ ch∆∞∆°ng "
"tr√¨nh Mercury b·∫Øt ƒë·∫ßu thu th·∫≠p \"c√°c b√†i h·ªçc kinh nghi·ªám\" th√†nh m·ªôt b·∫£n y·∫øu "
"l∆∞·ª£c li·ªát k√™ h√†ng ngh√¨n t√¨nh hu·ªëng c√≥ v·∫•n ƒë·ªÅ, t·ª´ l·ªói ƒë·ªông c∆° ƒë·∫øn c√°c tay c·∫ßm "
"b·ªã b·∫ª cong ƒë·∫øn tr·ª•c tr·∫∑c m√°y t√≠nh, v√† c√°c gi·∫£i ph√°p c·ªßa h·ªç."

#. type: Plain text
#: README.md:15
msgid "&mdash; Chris Hadfield, *An Astronaut's Guide to Life*."
msgstr "&mdash; Chris Hadfield, *S·ªï Tay Phi H√†nh Gia*."

#. type: Plain text
#: README.md:17
msgid "#### Conventions for this document"
msgstr "#### Quy chu·∫©n cho t√†i li·ªáu n√†y"

#. type: Plain text
#: README.md:19
msgid ""
"For clarity's sake all examples in this document use a customized bash "
"prompt in order to indicate the current branch and whether or not there are "
"staged changes. The branch is enclosed in parentheses, and a `*` next to the "
"branch name indicates staged changes."
msgstr ""
"ƒê·ªÉ chuy·ªÅn t·∫£i r√µ r√†ng, t·∫•t c·∫£ c√°c v√≠ d·ª• trong t√†i li·ªáu n√†y s·ª≠ d·ª•ng bash "
"prompt ƒë∆∞·ª£c tu·ª≥ ch·ªânh ƒë·ªÉ ch·ªâ ra nh√°nh hi·ªán t·∫°i v√† c√≥ hay kh√¥ng thay ƒë·ªïi "
"trong v√πng chuy·ªÉn ti·∫øp (staged changes). Nh√°nh ƒë∆∞·ª£c ƒë·∫∑t trong d·∫•u ngo·∫∑c ƒë∆°n "
"v√† m·ªôt k√Ω t·ª± `*` b√™n c·∫°nh t√™n nh√°nh cho bi·∫øt c√°c thay ƒë·ªïi trong v√πng chuy·ªÉn "
"ti·∫øp."

#. type: Plain text
#: README.md:21
msgid ""
"All commands should work for at least git version 2.13.0. See the [git "
"website](https://www.git-scm.com/) to update your local git version."
msgstr ""
"T·∫•t c·∫£ c√°c l·ªánh (command) ph·∫£i thi h√†nh v·ªõi phi√™n b·∫£n l√¢u ƒë·ªùi nh·∫•t l√† git "
"2.13.0. Xem [git website](https://www.git-scm.com/) ƒë·ªÉ c·∫≠p nh·∫≠t phi√™n b·∫£n "
"git tr√™n local c·ªßa b·∫°n."

#. type: Plain text
#: README.md:26
msgid ""
"[![Join the chat at "
"https://gitter.im/k88hudson/git-flight-rules](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/k88hudson/git-flight-rules?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)  "
"<!-- START doctoc generated TOC please keep comment here to allow auto "
"update --> <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --> "
"**Table of Contents** *generated with "
"[DocToc](https://github.com/thlorenz/doctoc)*"
msgstr ""
"[![Join the chat at "
"https://gitter.im/k88hudson/git-flight-rules](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/k88hudson/git-flight-rules?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)  "
"<!-- START doctoc generated TOC please keep comment here to allow auto "
"update --> <!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --> "
"**Danh m·ª•c n·ªôi dung** *generated with "
"[DocToc](https://github.com/thlorenz/doctoc)*"

#. type: Plain text
#: README.md:146, no-wrap
msgid ""
"  - [Repositories](#repositories)\n"
"    - [I want to start a local "
"repository](#i-want-to-start-a-local-repository)\n"
"    - [I want to clone a remote "
"repository](#i-want-to-clone-a-remote-repository)\n"
"    - [I set the wrong remote "
"repository](#i-set-the-wrong-remote-repository)\n"
"    - [I want to add code to someone else's "
"repository](#i-want-to-add-code-to-someone-elses-repository)\n"
"      - [Suggesting code via pull "
"requests](#suggesting-code-via-pull-requests)\n"
"      - [Suggesting code via patches](#suggesting-code-via-patches)\n"
"      - [I need to update my fork with latest updates from the original "
"repository](#i-need-to-update-my-fork-with-latest-updates-from-the-original-repository)\n"
"  - [Editing Commits](#editing-commits)\n"
"    - [What did I just commit?](#what-did-i-just-commit)\n"
"    - [I wrote the wrong thing in a commit "
"message](#i-wrote-the-wrong-thing-in-a-commit-message)\n"
"    - [I committed with the wrong name and email "
"configured](#i-committed-with-the-wrong-name-and-email-configured)\n"
"    - [I want to remove a file from the previous "
"commit](#i-want-to-remove-a-file-from-the-previous-commit)\n"
"    - [I want to delete or remove my last "
"commit](#i-want-to-delete-or-remove-my-last-commit)\n"
"    - [Delete/remove arbitrary commit](#deleteremove-arbitrary-commit)\n"
"    - [I tried to push my amended commit to a remote, but I got an error "
"message](#i-tried-to-push-my-amended-commit-to-a-remote-but-i-got-an-error-message)\n"
"    - [I accidentally did a hard reset, and I want my changes "
"back](#i-accidentally-did-a-hard-reset-and-i-want-my-changes-back)\n"
"    - [I accidentally committed and pushed a "
"merge](#i-accidentally-committed-and-pushed-a-merge)\n"
"    - [I accidentally committed and pushed files containing sensitive "
"data](#i-accidentally-committed-and-pushed-files-containing-sensitive-data)\n"
"    - [I want to remove a large file from ever existing in repo "
"history](#i-want-to-remove-a-large-file-from-ever-existing-in-repo-history)\n"
"      - [Recommended Technique: Use third-party "
"bfg](#recommended-technique-use-third-party-bfg)\n"
"      - [Built-in Technique: Use "
"git-filter-branch](#built-in-technique-use-git-filter-branch)\n"
"      - [Final Step: Pushing your changed repo "
"history](#final-step-pushing-your-changed-repo-history)\n"
"    - [I need to change the content of a commit which is not my "
"last](#i-need-to-change-the-content-of-a-commit-which-is-not-my-last)\n"
"  - [Staging](#staging)\n"
"    - [I want to stage all tracked files and leave untracked "
"files](#i-want-to-stage-all-tracked-files-and-leave-untracked-files)\n"
"      - [To stage part of tracked files](#to-stage-part-of-tracked-files)\n"
"    - [I need to add staged changes to the previous "
"commit](#i-need-to-add-staged-changes-to-the-previous-commit)\n"
"    - [I want to stage part of a new file, but not the whole "
"file](#i-want-to-stage-part-of-a-new-file-but-not-the-whole-file)\n"
"    - [I want to add changes in one file to two different "
"commits](#i-want-to-add-changes-in-one-file-to-two-different-commits)\n"
"    - [I staged too many edits, and I want to break them out into a separate "
"commit](#i-staged-too-many-edits-and-i-want-to-break-them-out-into-a-separate-commit)\n"
"    - [I want to stage my unstaged edits, and unstage my staged "
"edits](#i-want-to-stage-my-unstaged-edits-and-unstage-my-staged-edits)\n"
"  - [Unstaged Edits](#unstaged-edits)\n"
"    - [I want to move my unstaged edits to a new "
"branch](#i-want-to-move-my-unstaged-edits-to-a-new-branch)\n"
"    - [I want to move my unstaged edits to a different, existing "
"branch](#i-want-to-move-my-unstaged-edits-to-a-different-existing-branch)\n"
"    - [I want to discard my local uncommitted changes (staged and "
"unstaged)](#i-want-to-discard-my-local-uncommitted-changes-staged-and-unstaged)\n"
"    - [I want to discard specific unstaged "
"changes](#i-want-to-discard-specific-unstaged-changes)\n"
"    - [I want to discard specific unstaged "
"files](#i-want-to-discard-specific-unstaged-files)\n"
"    - [I want to discard only my unstaged local "
"changes](#i-want-to-discard-only-my-unstaged-local-changes)\n"
"    - [I want to discard all of my untracked "
"files](#i-want-to-discard-all-of-my-untracked-files)\n"
"    - [I want to unstage a specific staged "
"file](#i-want-to-unstage-a-specific-staged-file)\n"
"  - [Branches](#branches)\n"
"    - [I want to list all branches](#i-want-to-list-all-branches)\n"
"    - [Create a branch from a commit](#create-a-branch-from-a-commit)\n"
"    - [I pulled from/into the wrong "
"branch](#i-pulled-frominto-the-wrong-branch)\n"
"    - [I want to discard local commits so my branch is the same as one on "
"the "
"server](#i-want-to-discard-local-commits-so-my-branch-is-the-same-as-one-on-the-server)\n"
"    - [I committed to main instead of a new "
"branch](#i-committed-to-main-instead-of-a-new-branch)\n"
"    - [I want to keep the whole file from another "
"ref-ish](#i-want-to-keep-the-whole-file-from-another-ref-ish)\n"
"    - [I made several commits on a single branch that should be on different "
"branches](#i-made-several-commits-on-a-single-branch-that-should-be-on-different-branches)\n"
"    - [I want to delete local branches that were deleted "
"upstream](#i-want-to-delete-local-branches-that-were-deleted-upstream)\n"
"    - [I accidentally deleted my "
"branch](#i-accidentally-deleted-my-branch)\n"
"    - [I want to delete a branch](#i-want-to-delete-a-branch)\n"
"    - [I want to delete multiple "
"branches](#i-want-to-delete-multiple-branches)\n"
"    - [I want to rename a branch](#i-want-to-rename-a-branch)\n"
"    - [I want to checkout to a remote branch that someone else is working "
"on](#i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on)\n"
"    - [I want to create a new remote branch from current local "
"one](#i-want-to-create-a-new-remote-branch-from-current-local-one)\n"
"    - [I want to set a remote branch as the upstream for a local "
"branch](#i-want-to-set-a-remote-branch-as-the-upstream-for-a-local-branch)\n"
"    - [I want to set my HEAD to track the default remote "
"branch](#i-want-to-set-my-head-to-track-the-default-remote-branch)\n"
"    - [I made changes on the wrong "
"branch](#i-made-changes-on-the-wrong-branch)\n"
"    - [I want to split a branch into "
"two](#i-want-to-split-a-branch-into-two)\n"
"  - [Rebasing and Merging](#rebasing-and-merging)\n"
"    - [I want to undo rebase/merge](#i-want-to-undo-rebasemerge)\n"
"    - [I rebased, but I don't want to force "
"push](#i-rebased-but-i-dont-want-to-force-push)\n"
"    - [I need to combine commits](#i-need-to-combine-commits)\n"
"      - [Safe merging strategy](#safe-merging-strategy)\n"
"      - [I need to merge a branch into a single "
"commit](#i-need-to-merge-a-branch-into-a-single-commit)\n"
"      - [I want to combine only unpushed "
"commits](#i-want-to-combine-only-unpushed-commits)\n"
"      - [I need to abort the merge](#i-need-to-abort-the-merge)\n"
"    - [I need to update the parent commit of my "
"branch](#i-need-to-update-the-parent-commit-of-my-branch)\n"
"    - [Check if all commits on a branch are "
"merged](#check-if-all-commits-on-a-branch-are-merged)\n"
"    - [Possible issues with interactive "
"rebases](#possible-issues-with-interactive-rebases)\n"
"      - [The rebase editing screen says "
"'noop'](#the-rebase-editing-screen-says-noop)\n"
"      - [There were conflicts](#there-were-conflicts)\n"
"  - [Stash](#stash)\n"
"    - [Stash all edits](#stash-all-edits)\n"
"    - [Stash specific files](#stash-specific-files)\n"
"    - [Stash with message](#stash-with-message)\n"
"    - [Apply a specific stash from "
"list](#apply-a-specific-stash-from-list)\n"
"    - [Stash while keeping unstaged "
"edits](#stash-while-keeping-unstaged-edits)\n"
"  - [Finding](#finding)\n"
"    - [I want to find a string in any "
"commit](#i-want-to-find-a-string-in-any-commit)\n"
"    - [I want to find by "
"author/committer](#i-want-to-find-by-authorcommitter)\n"
"    - [I want to list commits containing specific "
"files](#i-want-to-list-commits-containing-specific-files)\n"
"    - [I want to view the commit history for a specific "
"function](#i-want-to-view-the-commit-history-for-a-specific-function)\n"
"    - [Find a tag where a commit is "
"referenced](#find-a-tag-where-a-commit-is-referenced)\n"
"  - [Submodules](#submodules)\n"
"    - [Clone all submodules](#clone-all-submodules)\n"
"    - [Remove a submodule](#remove-a-submodule)\n"
"  - [Miscellaneous Objects](#miscellaneous-objects)\n"
"    - [Copy a folder or file from one branch to "
"another](#copy-a-folder-or-file-from-one-branch-to-another)\n"
"    - [Restore a deleted file](#restore-a-deleted-file)\n"
"    - [Delete tag](#delete-tag)\n"
"    - [Recover a deleted tag](#recover-a-deleted-tag)\n"
"    - [Deleted Patch](#deleted-patch)\n"
"    - [Exporting a repository as a Zip "
"file](#exporting-a-repository-as-a-zip-file)\n"
"    - [Push a branch and a tag that have the same "
"name](#push-a-branch-and-a-tag-that-have-the-same-name)\n"
"  - [Tracking Files](#tracking-files)\n"
"    - [I want to change a file name's capitalization, without changing the "
"contents of the "
"file](#i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file)\n"
"    - [I want to overwrite local files when doing a git "
"pull](#i-want-to-overwrite-local-files-when-doing-a-git-pull)\n"
"    - [I want to remove a file from Git but keep the "
"file](#i-want-to-remove-a-file-from-git-but-keep-the-file)\n"
"    - [I want to revert a file to a specific "
"revision](#i-want-to-revert-a-file-to-a-specific-revision)\n"
"    - [I want to list changes of a specific file between commits or "
"branches](#i-want-to-list-changes-of-a-specific-file-between-commits-or-branches)\n"
"    - [I want Git to ignore changes to a specific "
"file](#i-want-git-to-ignore-changes-to-a-specific-file)\n"
"  - [Debugging with Git](#debugging-with-git)\n"
"  - [Configuration](#configuration)\n"
"    - [I want to add aliases for some Git "
"commands](#i-want-to-add-aliases-for-some-git-commands)\n"
"    - [I want to add an empty directory to my "
"repository](#i-want-to-add-an-empty-directory-to-my-repository)\n"
"    - [I want to cache a username and password for a "
"repository](#i-want-to-cache-a-username-and-password-for-a-repository)\n"
"    - [I want to make Git ignore permissions and filemode "
"changes](#i-want-to-make-git-ignore-permissions-and-filemode-changes)\n"
"    - [I want to set a global user](#i-want-to-set-a-global-user)\n"
"  - [I've no idea what I did wrong](#ive-no-idea-what-i-did-wrong)\n"
"  - [Git Shortcuts](#git-shortcuts)\n"
"    - [Git Bash](#git-bash)\n"
"    - [PowerShell on Windows](#powershell-on-windows)\n"
"- [Other Resources](#other-resources)\n"
"  - [Books](#books)\n"
"  - [Tutorials](#tutorials)\n"
"  - [Scripts and Tools](#scripts-and-tools)\n"
"  - [GUI Clients](#gui-clients)\n"
msgstr ""
"  - [Repositories (Kho)](#repositories-kho)\n"
"    - [T√¥i mu·ªën t·∫°o m·ªôt repository tr√™n "
"local](#t%C3%B4i-mu%E1%BB%91n-t%E1%BA%A1o-m%E1%BB%99t-repository-tr%C3%AAn-local)\n"
"    - [T√¥i mu·ªën clone m·ªôt remote "
"repository](#t%C3%B4i-mu%E1%BB%91n-clone-m%E1%BB%99t-remote-repository)\n"
"    - [T√¥i ƒë·ªÉ sai remote "
"repository](#t%C3%B4i-%C4%91%E1%BB%83-sai-remote-repository)\n"
"    - [T√¥i mu·ªën th√™m s·ª≠a code cho repository c·ªßa ng∆∞·ªùi "
"kh√°c](#t%C3%B4i-mu%E1%BB%91n-th%C3%AAm-s%E1%BB%ADa-code-cho-repository-c%E1%BB%A7a-ng%C6%B0%E1%BB%9Di-kh%C3%A1c)\n"
"      - [Th√™m s·ª≠a code v·ªõi pull "
"requests](#th%C3%AAm-s%E1%BB%ADa-code-v%E1%BB%9Bi-pull-requests)\n"
"      - [Th√™m s·ª≠a code v·ªõi c√°c patch "
"(v√°)](#th%C3%AAm-s%E1%BB%ADa-code-v%E1%BB%9Bi-c%C3%A1c-patch-v%C3%A1)\n"
"      - [T√¥i c·∫ßn update fork c·ªßa t√¥i v·ªõi nh·ªØng thay ƒë·ªïi m·ªõi nh·∫•t t·ª´ "
"repository nguy√™n "
"b·∫£n](#t%C3%B4i-c%E1%BA%A7n-update-fork-c%E1%BB%A7a-t%C3%B4i-v%E1%BB%9Bi-nh%E1%BB%AFng-thay-%C4%91%E1%BB%95i-m%E1%BB%9Bi-nh%E1%BA%A5t-t%E1%BB%AB-repository-nguy%C3%AAn-b%E1%BA%A3n)\n"
"  - [Ch·ªânh s·ª≠a Commit](#ch%E1%BB%89nh-s%E1%BB%ADa-commit)\n"
"    - [T√¥i v·ª´a commit c√°i "
"g√¨?](#t%C3%B4i-v%E1%BB%ABa-commit-c%C3%A1i-g%C3%AC)\n"
"    - [T√¥i ƒë√£ vi·∫øt sai v√†i th·ª© trong message (th√¥ng ƒëi·ªáp) c·ªßa "
"commit](#t%C3%B4i-%C4%91%C3%A3-vi%E1%BA%BFt-sai-v%C3%A0i-th%E1%BB%A9-trong-message-th%C3%B4ng-%C4%91i%E1%BB%87p-c%E1%BB%A7a-commit)\n"
"    - [T√¥i ƒë√£ commit v·ªõi c·∫•u h√¨nh t√™n v√† email "
"sai](#t%C3%B4i-%C4%91%C3%A3-commit-v%E1%BB%9Bi-c%E1%BA%A5u-h%C3%ACnh-t%C3%AAn-v%C3%A0-email-sai)\n"
"    - [T√¥i mu·ªën xo√° m·ªôt file t·ª´ commit "
"tr∆∞·ªõc](#t%C3%B4i-mu%E1%BB%91n-xo%C3%A1-m%E1%BB%99t-file-t%E1%BB%AB-commit-tr%C6%B0%E1%BB%9Bc)\n"
"    - [T√¥i mu·ªën xo√° ho·∫∑c lo·∫°i b·ªè commit m·ªõi "
"nh·∫•t](#t%C3%B4i-mu%E1%BB%91n-xo%C3%A1-ho%E1%BA%B7c-lo%E1%BA%A1i-b%E1%BB%8F-commit-m%E1%BB%9Bi-nh%E1%BA%A5t)\n"
"    - [Xo√°/lo·∫°i b·ªè b·∫•t k·ª≥ commit "
"n√†o](#xo%C3%A1lo%E1%BA%A1i-b%E1%BB%8F-b%E1%BA%A5t-k%E1%BB%B3-commit-n%C3%A0o)\n"
"    - [T√¥i ƒë√£ c·ªë g·∫Øng push commit ƒë√£ s·ª≠a ƒë·ªïi l√™n remote, nh∆∞ng t√¥i g·∫∑p th√¥ng "
"b√°o "
"l·ªói](#t%C3%B4i-%C4%91%C3%A3-c%E1%BB%91-g%E1%BA%AFng-push-commit-%C4%91%C3%A3-s%E1%BB%ADa-%C4%91%E1%BB%95i-l%C3%AAn-remote-nh%C6%B0ng-t%C3%B4i-g%E1%BA%B7p-th%C3%B4ng-b%C3%A1o-l%E1%BB%97i)\n"
"    - [T√¥i ƒë√£ v√¥ t√¨nh th·ª±c hi·ªán hard reset v√† t√¥i mu·ªën c√°c thay ƒë·ªïi c·ªßa "
"t√¥i.](#t%C3%B4i-%C4%91%C3%A3-v%C3%B4-t%C3%ACnh-th%E1%BB%B1c-hi%E1%BB%87n-hard-reset-v%C3%A0-t%C3%B4i-mu%E1%BB%91n-c%C3%A1c-thay-%C4%91%E1%BB%95i-c%E1%BB%A7a-t%C3%B4i)\n"
"    - [T√¥i v√¥ t√¨nh commit v√† ƒë·∫©y l√™n m·ªôt "
"merge](#t%C3%B4i-v%C3%B4-t%C3%ACnh-commit-v%C3%A0-%C4%91%E1%BA%A9y-l%C3%AAn-m%E1%BB%99t-merge)\n"
"    - [T√¥i v√¥ t√¨nh commit v√† ƒë·∫©y c√°c file ch·ª©a d·ªØ li·ªáu nh·∫£y "
"c·∫£m](#t%C3%B4i-v%C3%B4-t%C3%ACnh-commit-v%C3%A0-%C4%91%E1%BA%A9y-c%C3%A1c-file-ch%E1%BB%A9a-d%E1%BB%AF-li%E1%BB%87u-nh%E1%BA%A3y-c%E1%BA%A3m)\n"
"    - [T√¥i mu·ªën x√≥a file to qu√° ƒë·ªÉ ch∆∞a bao gi·ªù xu·∫•t hi·ªán trong l·ªãch s·ª≠ "
"repository](#t%C3%B4i-mu%E1%BB%91n-x%C3%B3a-file-to-qu%C3%A1-%C4%91%E1%BB%83-ch%C6%B0a-bao-gi%E1%BB%9D-xu%E1%BA%A5t-hi%E1%BB%87n-trong-l%E1%BB%8Bch-s%E1%BB%AD-repository)\n"
"      - [C√°ch khuy·∫øn kh√≠ch: S·ª≠ d·ª•ng d·ªãch v·ª• b√™n th·ª© ba "
"bfg](#c%C3%A1ch-khuy%E1%BA%BFn-kh%C3%ADch-s%E1%BB%AD-d%E1%BB%A5ng-d%E1%BB%8Bch-v%E1%BB%A5-b%C3%AAn-th%E1%BB%A9-ba-bfg)\n"
"      - [C√°ch c√≥ s·∫µn: S·ª≠ d·ª•ng "
"git-filter-branch](#c%C3%A1ch-c%C3%B3-s%E1%BA%B5n-s%E1%BB%AD-d%E1%BB%A5ng-git-filter-branch)\n"
"      - [B∆∞·ªõc cu·ªëi: ƒê·∫©y l·ªãch s·ª≠ ƒë√£ thay ƒë·ªïi c·ªßa "
"repository](#b%C6%B0%E1%BB%9Bc-cu%E1%BB%91i-%C4%91%E1%BA%A9y-l%E1%BB%8Bch-s%E1%BB%AD-%C4%91%C3%A3-thay-%C4%91%E1%BB%95i-c%E1%BB%A7a-repository)\n"
"    - [T√¥i c·∫ßn thay ƒë·ªïi n·ªôi dung c·ªßa m·ªôt commit nh∆∞ng kh√¥ng ph·∫£i l√† c√°i m·ªõi "
"nh·∫•t](#t%C3%B4i-c%E1%BA%A7n-thay-%C4%91%E1%BB%95i-n%E1%BB%99i-dung-c%E1%BB%A7a-m%E1%BB%99t-commit-nh%C6%B0ng-kh%C3%B4ng-ph%E1%BA%A3i-l%C3%A0-c%C3%A1i-m%E1%BB%9Bi-nh%E1%BA%A5t)\n"
"  - [Staging (s√¢n chuy·ªÉn "
"ti·∫øp)](#staging-s%C3%A2n-chuy%E1%BB%83n-ti%E1%BA%BFp)\n"
"    - [T√¥i mu·ªën n√¢ng l√™n stage t·∫•t c·∫£ file ƒëang theo d√µi v√† b·ªè qua file "
"kh√¥ng theo "
"d√µi](#t%C3%B4i-mu%E1%BB%91n-n%C3%A2ng-l%C3%AAn-stage-t%E1%BA%A5t-c%E1%BA%A3-file-%C4%91ang-theo-d%C3%B5i-v%C3%A0-b%E1%BB%8F-qua-file-kh%C3%B4ng-theo-d%C3%B5i)\n"
"      - [Ch·ªâ n√¢ng m·ªôt ph·∫ßn c√°c file ƒëang theo "
"d√µi](#ch%E1%BB%89-n%C3%A2ng-m%E1%BB%99t-ph%E1%BA%A7n-c%C3%A1c-file-%C4%91ang-theo-d%C3%B5i)\n"
"    - [T√¥i c·∫ßn cho th√™m c√°c thay ƒë·ªïi ƒëang trong stage v√†o commit "
"tr∆∞·ªõc](#t%C3%B4i-c%E1%BA%A7n-cho-th%C3%AAm-c%C3%A1c-thay-%C4%91%E1%BB%95i-%C4%91ang-trong-stage-v%C3%A0o-commit-tr%C6%B0%E1%BB%9Bc)\n"
"    - [T√¥i mu·ªën stage m·ªôt ph·∫ßn c·ªßa m·ªôt file m·ªõi, nh∆∞ng kh√¥ng ph·∫£i to√†n b·ªô "
"file](#t%C3%B4i-mu%E1%BB%91n-stage-m%E1%BB%99t-ph%E1%BA%A7n-c%E1%BB%A7a-m%E1%BB%99t-file-m%E1%BB%9Bi-nh%C6%B0ng-kh%C3%B4ng-ph%E1%BA%A3i-to%C3%A0n-b%E1%BB%99-file)\n"
"    - [T√¥i mu·ªën th√™m c√°c thay ƒë·ªïi trong m·ªôt file v√†o 2 commit kh√°c "
"nhau](#t%C3%B4i-mu%E1%BB%91n-th%C3%AAm-c%C3%A1c-thay-%C4%91%E1%BB%95i-trong-m%E1%BB%99t-file-v%C3%A0o-2-commit-kh%C3%A1c-nhau)\n"
"    - [T√¥i cho l√™n stage qu√° nhi·ªÅu thay ƒë·ªïi, v√† t√¥i mu·ªën t√°ch ra th√†nh c√°c "
"commit kh√°c "
"nhau](#t%C3%B4i-cho-l%C3%AAn-stage-qu%C3%A1-nhi%E1%BB%81u-thay-%C4%91%E1%BB%95i-v%C3%A0-t%C3%B4i-mu%E1%BB%91n-t%C3%A1ch-ra-th%C3%A0nh-c%C3%A1c-commit-kh%C3%A1c-nhau)\n"
"    - [T√¥i mu·ªën cho l√™n stage c√°c ch·ªânh s·ª≠a ch∆∞a ƒë∆∞·ª£c stage v√† h√£ kh·ªèi stage "
"c√°c ch·ªânh s·ª≠a ƒë√£ "
"stage](#t%C3%B4i-mu%E1%BB%91n-cho-l%C3%AAn-stage-c%C3%A1c-ch%E1%BB%89nh-s%E1%BB%ADa-ch%C6%B0a-%C4%91%C6%B0%E1%BB%A3c-stage-v%C3%A0-h%C3%A3-kh%E1%BB%8Fi-stage-c%C3%A1c-ch%E1%BB%89nh-s%E1%BB%ADa-%C4%91%C3%A3-stage)\n"
"  - [Thay ƒë·ªïi ch∆∞a l√™n s√¢n (Unstaged "
"Edits)](#thay-%C4%91%E1%BB%95i-ch%C6%B0a-l%C3%AAn-s%C3%A2n-unstaged-edits)\n"
"    - [T√¥i mu·ªën di chuy·ªÉn c√°c ch·ªânh s·ª≠a ch∆∞a l√™n stage sang m·ªôt nh√°nh "
"m·ªõi](#t%C3%B4i-mu%E1%BB%91n-di-chuy%E1%BB%83n-c%C3%A1c-ch%E1%BB%89nh-s%E1%BB%ADa-ch%C6%B0a-l%C3%AAn-stage-sang-m%E1%BB%99t-nh%C3%A1nh-m%E1%BB%9Bi)\n"
"    - [T√¥i mu·ªën di chuy·ªÉn c√°c ch·ªânh s·ª≠a ch∆∞a stage c·ªßa t√¥i ƒë·∫øn m·ªôt nh√°nh "
"kh√°c ƒë√£ t·ªìn "
"t·∫°i](#t%C3%B4i-mu%E1%BB%91n-di-chuy%E1%BB%83n-c%C3%A1c-ch%E1%BB%89nh-s%E1%BB%ADa-ch%C6%B0a-stage-c%E1%BB%A7a-t%C3%B4i-%C4%91%E1%BA%BFn-m%E1%BB%99t-nh%C3%A1nh-kh%C3%A1c-%C4%91%C3%A3-t%E1%BB%93n-t%E1%BA%A1i)\n"
"    - [T√¥i mu·ªën b·ªè c√°c thay ƒë√¥i ch∆∞a trong commit t·∫°i local (ƒë√£ l√™n ho·∫∑c "
"ch∆∞a l√™n "
"stage)](#t%C3%B4i-mu%E1%BB%91n-b%E1%BB%8F-c%C3%A1c-thay-%C4%91%C3%B4i-ch%C6%B0a-trong-commit-t%E1%BA%A1i-local-%C4%91%C3%A3-l%C3%AAn-ho%E1%BA%B7c-ch%C6%B0a-l%C3%AAn-stage)\n"
"    - [T√¥i mu·ªën lo·∫°i b·ªè c√°c thay ƒë·ªïi c·ª• th·ªÉ ch∆∞a l√™n "
"stage](#t%C3%B4i-mu%E1%BB%91n-lo%E1%BA%A1i-b%E1%BB%8F-c%C3%A1c-thay-%C4%91%E1%BB%95i-c%E1%BB%A5-th%E1%BB%83-ch%C6%B0a-l%C3%AAn-stage)\n"
"    - [T√¥i mu·ªën lo·∫°i b·ªè c√°c file c·ª• th·ªÉ ch∆∞a l√™n "
"stage](#t%C3%B4i-mu%E1%BB%91n-lo%E1%BA%A1i-b%E1%BB%8F-c%C3%A1c-file-c%E1%BB%A5-th%E1%BB%83-ch%C6%B0a-l%C3%AAn-stage)\n"
"    - [T√¥i mu·ªën ch·ªâ lo·∫°i b·ªè c√°c thay ƒë·ªïi ch∆∞a l√™n stage t·∫°i "
"local](#t%C3%B4i-mu%E1%BB%91n-ch%E1%BB%89-lo%E1%BA%A1i-b%E1%BB%8F-c%C3%A1c-thay-%C4%91%E1%BB%95i-ch%C6%B0a-l%C3%AAn-stage-t%E1%BA%A1i-local)\n"
"    - [T√¥i mu·ªën lo·∫°i b·ªè t·∫•t c·∫£ c√°c file ch∆∞a ƒë∆∞·ª£c theo d√µi "
"(track)](#t%C3%B4i-mu%E1%BB%91n-lo%E1%BA%A1i-b%E1%BB%8F-t%E1%BA%A5t-c%E1%BA%A3-c%C3%A1c-file-ch%C6%B0a-%C4%91%C6%B0%E1%BB%A3c-theo-d%C3%B5i-track)\n"
"    - [T√¥i mu·ªën h·∫° kh·ªèi stage m·ªôt file c·ª• th·ªÉ ƒë√£ "
"stage](#t%C3%B4i-mu%E1%BB%91n-h%E1%BA%A1-kh%E1%BB%8Fi-stage-m%E1%BB%99t-file-c%E1%BB%A5-th%E1%BB%83-%C4%91%C3%A3-stage)\n"
"  - [Nh√°nh](#nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën li·ªát k√™ t·∫•t c·∫£ c√°c "
"nh√°nh](#t%C3%B4i-mu%E1%BB%91n-li%E1%BB%87t-k%C3%AA-t%E1%BA%A5t-c%E1%BA%A3-c%C3%A1c-nh%C3%A1nh)\n"
"    - [T·∫°o m·ªôt nh√°nh m·ªõi t·ª´ m·ªôt "
"commit](#t%E1%BA%A1o-m%E1%BB%99t-nh%C3%A1nh-m%E1%BB%9Bi-t%E1%BB%AB-m%E1%BB%99t-commit)\n"
"    - [T√¥i ƒë√£ pull (k√©o) t·ª´/v√†o sai "
"nh√°nh](#t%C3%B4i-%C4%91%C3%A3-pull-k%C3%A9o-t%E1%BB%ABv%C3%A0o-sai-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën lo·∫°i b·ªè c√°c commit t·∫°i local ƒë·ªÉ nh√°nh c·ªßa t√¥i gi·ªëng nh∆∞ "
"nh√°nh tr√™n "
"server](#t%C3%B4i-mu%E1%BB%91n-lo%E1%BA%A1i-b%E1%BB%8F-c%C3%A1c-commit-t%E1%BA%A1i-local-%C4%91%E1%BB%83-nh%C3%A1nh-c%E1%BB%A7a-t%C3%B4i-gi%E1%BB%91ng-nh%C6%B0-nh%C3%A1nh-tr%C3%AAn-server)\n"
"    - [T√¥i ƒë√£ t·∫°o commit l√™n main thay v√¨ m·ªôt nh√°nh "
"m·ªõi](#t%C3%B4i-%C4%91%C3%A3-t%E1%BA%A1o-commit-l%C3%AAn-main-thay-v%C3%AC-m%E1%BB%99t-nh%C3%A1nh-m%E1%BB%9Bi)\n"
"    - [T√¥i mu·ªën gi·ªØ to√†n b·ªô file t·ª´ m·ªôt ref-ish "
"kh√°c](#t%C3%B4i-mu%E1%BB%91n-gi%E1%BB%AF-to%C3%A0n-b%E1%BB%99-file-t%E1%BB%AB-m%E1%BB%99t-ref-ish-kh%C3%A1c)\n"
"    - [T√¥i ƒë√£ th·ª±c hi·ªán m·ªôt s·ªë commit tr√™n m·ªôt nh√°nh m·∫∑c d√π ch√∫ng n√™n ·ªü c√°c "
"nh√°nh kh√°c "
"nhau](#t%C3%B4i-%C4%91%C3%A3-th%E1%BB%B1c-hi%E1%BB%87n-m%E1%BB%99t-s%E1%BB%91-commit-tr%C3%AAn-m%E1%BB%99t-nh%C3%A1nh-m%E1%BA%B7c-d%C3%B9-ch%C3%BAng-n%C3%AAn-%E1%BB%9F-c%C3%A1c-nh%C3%A1nh-kh%C3%A1c-nhau)\n"
"    - [T√¥i mu·ªën x√≥a c√°c nh√°nh local ƒë√£ b·ªã x√≥a t·∫°i lu·ªìng tr∆∞·ªõc "
"(upstream)](#t%C3%B4i-mu%E1%BB%91n-x%C3%B3a-c%C3%A1c-nh%C3%A1nh-local-%C4%91%C3%A3-b%E1%BB%8B-x%C3%B3a-t%E1%BA%A1i-lu%E1%BB%93ng-tr%C6%B0%E1%BB%9Bc-upstream)\n"
"    - [T√¥i v√¥ t√¨nh x√≥a nh√°nh c·ªßa "
"t√¥i](#t%C3%B4i-v%C3%B4-t%C3%ACnh-x%C3%B3a-nh%C3%A1nh-c%E1%BB%A7a-t%C3%B4i)\n"
"    - [T√¥i mu·ªën xo√° m·ªôt "
"nh√°nh](#t%C3%B4i-mu%E1%BB%91n-xo%C3%A1-m%E1%BB%99t-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën xo√° nhi·ªÅu "
"nh√°nh](#t%C3%B4i-mu%E1%BB%91n-xo%C3%A1-nhi%E1%BB%81u-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën ƒë·ªïi t√™n m·ªôt "
"nh√°nh](#t%C3%B4i-mu%E1%BB%91n-%C4%91%E1%BB%95i-t%C3%AAn-m%E1%BB%99t-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën checkout ƒë·∫øn m·ªôt nh√°nh remote m√† ng∆∞·ªùi kh√°c ƒëang l√†m vi·ªác "
"tr√™n "
"ƒë√≥](#t%C3%B4i-mu%E1%BB%91n-checkout-%C4%91%E1%BA%BFn-m%E1%BB%99t-nh%C3%A1nh-remote-m%C3%A0-ng%C6%B0%E1%BB%9Di-kh%C3%A1c-%C4%91ang-l%C3%A0m-vi%E1%BB%87c-tr%C3%AAn-%C4%91%C3%B3)\n"
"    - [T√¥i mu·ªën t·∫°o m·ªôt nh√°nh remote m·ªõi t·ª´ m·ªôt nh√°nh local hi·ªán "
"t·∫°i](#t%C3%B4i-mu%E1%BB%91n-t%E1%BA%A1o-m%E1%BB%99t-nh%C3%A1nh-remote-m%E1%BB%9Bi-t%E1%BB%AB-m%E1%BB%99t-nh%C3%A1nh-local-hi%E1%BB%87n-t%E1%BA%A1i)\n"
"    - [T√¥i mu·ªën thi·∫øt l·∫≠p m·ªôt nh√°nh remote l√†m upstream (lu·ªìng tr∆∞·ªõc) cho "
"m·ªôt nh√°nh "
"local](#t%C3%B4i-mu%E1%BB%91n-thi%E1%BA%BFt-l%E1%BA%ADp-m%E1%BB%99t-nh%C3%A1nh-remote-l%C3%A0m-upstream-lu%E1%BB%93ng-tr%C6%B0%E1%BB%9Bc-cho-m%E1%BB%99t-nh%C3%A1nh-local)\n"
"    - [T√¥i mu·ªën ƒë·ªÉ HEAD c·ªßa t√¥i d√µi theo nh√°nh m·∫∑c ƒë·ªãnh c·ªßa "
"remote](#t%C3%B4i-mu%E1%BB%91n-%C4%91%E1%BB%83-head-c%E1%BB%A7a-t%C3%B4i-d%C3%B5i-theo-nh%C3%A1nh-m%E1%BA%B7c-%C4%91%E1%BB%8Bnh-c%E1%BB%A7a-remote)\n"
"    - [T√¥i ƒë√£ th·ª±c hi·ªán thay ƒë·ªïi tr√™n sai "
"nh√°nh](#t%C3%B4i-%C4%91%C3%A3-th%E1%BB%B1c-hi%E1%BB%87n-thay-%C4%91%E1%BB%95i-tr%C3%AAn-sai-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën t√°ch m·ªôt nh√°nh th√†nh "
"hai](#t%C3%B4i-mu%E1%BB%91n-t%C3%A1ch-m%E1%BB%99t-nh%C3%A1nh-th%C3%A0nh-hai)\n"
"  - [Rebasing v√† Merging](#rebasing-v%C3%A0-merging)\n"
"    - [T√¥i mu·ªën ƒë·∫£o ng∆∞·ª£c "
"rebase/merge](#t%C3%B4i-mu%E1%BB%91n-%C4%91%E1%BA%A3o-ng%C6%B0%E1%BB%A3c-rebasemerge)\n"
"    - [T√¥i ƒë√£ rebase, nh∆∞ng t√¥i kh√¥ng mu·ªën push √©p (force "
"push)](#t%C3%B4i-%C4%91%C3%A3-rebase-nh%C6%B0ng-t%C3%B4i-kh%C3%B4ng-mu%E1%BB%91n-push-%C3%A9p-force-push)\n"
"    - [T√¥i c·∫ßn k·∫øt h·ª£p c√°c "
"commit](#t%C3%B4i-c%E1%BA%A7n-k%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-commit)\n"
"      - [Chi·∫øn l∆∞·ª£c merge an "
"to√†n](#chi%E1%BA%BFn-l%C6%B0%E1%BB%A3c-merge-an-to%C3%A0n)\n"
"      - [T√¥i c·∫ßn merge m·ªôt nh√°nh th√†nh m·ªôt commit duy "
"nh·∫•t](#t%C3%B4i-c%E1%BA%A7n-merge-m%E1%BB%99t-nh%C3%A1nh-th%C3%A0nh-m%E1%BB%99t-commit-duy-nh%E1%BA%A5t)\n"
"      - [T√¥i ch·ªâ mu·ªën k·∫øt h·ª£p c√°c commit ch∆∞a "
"push](#t%C3%B4i-ch%E1%BB%89-mu%E1%BB%91n-k%E1%BA%BFt-h%E1%BB%A3p-c%C3%A1c-commit-ch%C6%B0a-push)\n"
"      - [T√¥i c·∫ßn hu·ª∑ b·ªè "
"merge](#t%C3%B4i-c%E1%BA%A7n-hu%E1%BB%B7-b%E1%BB%8F-merge)\n"
"    - [T√¥i c·∫ßn c·∫≠p nh·∫≠t commit g·ªëc (parent commit) cho nh√°nh c·ªßa "
"t√¥i](#t%C3%B4i-c%E1%BA%A7n-c%E1%BA%ADp-nh%E1%BA%ADt-commit-g%E1%BB%91c-parent-commit-cho-nh%C3%A1nh-c%E1%BB%A7a-t%C3%B4i)\n"
"    - [Ki·ªÉm tra xem t·∫•t c·∫£ commit tr√™n m·ªôt nh√°nh ƒë√£ ƒë∆∞·ª£c "
"merge](#ki%E1%BB%83m-tra-xem-t%E1%BA%A5t-c%E1%BA%A3-commit-tr%C3%AAn-m%E1%BB%99t-nh%C3%A1nh-%C4%91%C3%A3-%C4%91%C6%B0%E1%BB%A3c-merge)\n"
"    - [C√°c v·∫•n ƒë·ªÅ c√≥ th·ªÉ x·∫£y ra v·ªõi interactive "
"rebase](#c%C3%A1c-v%E1%BA%A5n-%C4%91%E1%BB%81-c%C3%B3-th%E1%BB%83-x%E1%BA%A3y-ra-v%E1%BB%9Bi-interactive-rebase)\n"
"      - [M√†n h√¨nh ch·ªânh s·ª≠a rebase ghi "
"'noop'](#m%C3%A0n-h%C3%ACnh-ch%E1%BB%89nh-s%E1%BB%ADa-rebase-ghi-noop)\n"
"      - [C√≥ m·ªôt v√†i xung "
"ƒë·ªôt](#c%C3%B3-m%E1%BB%99t-v%C3%A0i-xung-%C4%91%E1%BB%99t)\n"
"  - [Stash (C·∫•t)](#stash-c%E1%BA%A5t)\n"
"    - [Stash t·∫•t c·∫£ ch·ªânh "
"s·ª≠a](#stash-t%E1%BA%A5t-c%E1%BA%A3-ch%E1%BB%89nh-s%E1%BB%ADa)\n"
"    - [Stash c√°c file c·ª• th·ªÉ](#stash-c%C3%A1c-file-c%E1%BB%A5-th%E1%BB%83)\n"
"    - [Stash v·ªõi message (th√¥ng "
"ƒëi·ªáp)](#stash-v%E1%BB%9Bi-message-th%C3%B4ng-%C4%91i%E1%BB%87p)\n"
"    - [Apply m·ªôt stash c·ª• th·ªÉ t·ª´ danh "
"s√°ch](#apply-m%E1%BB%99t-stash-c%E1%BB%A5-th%E1%BB%83-t%E1%BB%AB-danh-s%C3%A1ch)\n"
"    - [Stash trong khi gi·ªØ c√°c thay ƒë·ªïi ch∆∞a "
"stage](#stash-trong-khi-gi%E1%BB%AF-c%C3%A1c-thay-%C4%91%E1%BB%95i-ch%C6%B0a-stage)\n"
"  - [Finding (T√¨m)](#finding-t%C3%ACm)\n"
"    - [T√¥i mu·ªën t√¨m m·ªôt chu·ªói k√Ω t·ª± trong b·∫•t k·ª≥ commit "
"n√†o](#t%C3%B4i-mu%E1%BB%91n-t%C3%ACm-m%E1%BB%99t-chu%E1%BB%97i-k%C3%BD-t%E1%BB%B1-trong-b%E1%BA%A5t-k%E1%BB%B3-commit-n%C3%A0o)\n"
"    - [T√¥i mu·ªën t√¨m t√°c gi·∫£ ho·∫∑c ng∆∞·ªùi "
"commit](#t%C3%B4i-mu%E1%BB%91n-t%C3%ACm-t%C3%A1c-gi%E1%BA%A3-ho%E1%BA%B7c-ng%C6%B0%E1%BB%9Di-commit)\n"
"    - [T√¥i mu·ªën li·ªát k√™ c√°c commit ch·ª©a c√°c file c·ª• "
"th·ªÉ](#t%C3%B4i-mu%E1%BB%91n-li%E1%BB%87t-k%C3%AA-c%C3%A1c-commit-ch%E1%BB%A9a-c%C3%A1c-file-c%E1%BB%A5-th%E1%BB%83)\n"
"    - [T√¥i mu·ªën xem l·ªãch s·ª≠ commit c·ªßa m·ªôt function (ch·ª©c nƒÉng) c·ª• "
"th·ªÉ](#t%C3%B4i-mu%E1%BB%91n-xem-l%E1%BB%8Bch-s%E1%BB%AD-commit-c%E1%BB%A7a-m%E1%BB%99t-function-ch%E1%BB%A9c-n%C4%83ng-c%E1%BB%A5-th%E1%BB%83)\n"
"    - [T√¨m m·ªôt tag m√† m·ªôt commit ƒë√£ tham "
"chi·∫øu](#t%C3%ACm-m%E1%BB%99t-tag-m%C3%A0-m%E1%BB%99t-commit-%C4%91%C3%A3-tham-chi%E1%BA%BFu)\n"
"  - [Submodules](#submodules)\n"
"    - [Clone t·∫•t c·∫£ submodules](#clone-t%E1%BA%A5t-c%E1%BA%A3-submodules)\n"
"    - [Xo√° m·ªôt submodule](#xo%C3%A1-m%E1%BB%99t-submodule)\n"
"  - [Miscellaneous Objects (Nh·ªØng th·ª© "
"kh√°c)](#miscellaneous-objects-nh%E1%BB%AFng-th%E1%BB%A9-kh%C3%A1c)\n"
"    - [Copy th∆∞ m·ª•c ho·∫∑c t·ªáp file t·ª´ m·ªôt nh√°nh sang nh√°nh "
"kh√°c](#copy-th%C6%B0-m%E1%BB%A5c-ho%E1%BA%B7c-t%E1%BB%87p-file-t%E1%BB%AB-m%E1%BB%99t-nh%C3%A1nh-sang-nh%C3%A1nh-kh%C3%A1c)\n"
"    - [Kh√¥i ph·ª•c m·ªôt file ƒë√£ b·ªã "
"xo√°](#kh%C3%B4i-ph%E1%BB%A5c-m%E1%BB%99t-file-%C4%91%C3%A3-b%E1%BB%8B-xo%C3%A1)\n"
"    - [Xo√° tag](#xo%C3%A1-tag)\n"
"    - [Kh√¥i ph·ª•c m·ªôt tag ƒë√£ b·ªã "
"xo√°](#kh%C3%B4i-ph%E1%BB%A5c-m%E1%BB%99t-tag-%C4%91%C3%A3-b%E1%BB%8B-xo%C3%A1)\n"
"    - [Patch (V√°) b·ªã x√≥a](#patch-v%C3%A1-b%E1%BB%8B-x%C3%B3a)\n"
"    - [Xu·∫•t m·ªôt repository ra m·ªôt file "
"Zip](#xu%E1%BA%A5t-m%E1%BB%99t-repository-ra-m%E1%BB%99t-file-zip)\n"
"    - [Push m·ªôt nh√°nh v√† m·ªôt tag c√≥ t√™n gi·ªëng "
"nhau](#push-m%E1%BB%99t-nh%C3%A1nh-v%C3%A0-m%E1%BB%99t-tag-c%C3%B3-t%C3%AAn-gi%E1%BB%91ng-nhau)\n"
"  - [Tracking (Theo d√µi) c√°c file](#tracking-theo-d%C3%B5i-c%C3%A1c-file)\n"
"    - [T√¥i mu·ªën thay ƒë·ªïi c√°ch vi·∫øt hoa c·ªßa t√™n t·ªáp m√† kh√¥ng thay ƒë·ªïi n·ªôi "
"dung c·ªßa "
"t·ªáp](#t%C3%B4i-mu%E1%BB%91n-thay-%C4%91%E1%BB%95i-c%C3%A1ch-vi%E1%BA%BFt-hoa-c%E1%BB%A7a-t%C3%AAn-t%E1%BB%87p-m%C3%A0-kh%C3%B4ng-thay-%C4%91%E1%BB%95i-n%E1%BB%99i-dung-c%E1%BB%A7a-t%E1%BB%87p)\n"
"    - [T√¥i mu·ªën ghi ƒë√® l√™n c√°c t·ªáp local khi th·ª±c hi·ªán l·ªánh git "
"pull](#t%C3%B4i-mu%E1%BB%91n-ghi-%C4%91%C3%A8-l%C3%AAn-c%C3%A1c-t%E1%BB%87p-local-khi-th%E1%BB%B1c-hi%E1%BB%87n-l%E1%BB%87nh-git-pull)\n"
"    - [T√¥i mu·ªën x√≥a m·ªôt t·ªáp kh·ªèi Git nh∆∞ng v·∫´n gi·ªØ "
"t·ªáp](#t%C3%B4i-mu%E1%BB%91n-x%C3%B3a-m%E1%BB%99t-t%E1%BB%87p-kh%E1%BB%8Fi-git-nh%C6%B0ng-v%E1%BA%ABn-gi%E1%BB%AF-t%E1%BB%87p)\n"
"    - [T√¥i mu·ªën ƒë·∫£o ng∆∞·ª£c t·ªáp v·ªÅ b·∫£n s·ª≠a ƒë·ªïi c·ª• "
"th·ªÉ](#t%C3%B4i-mu%E1%BB%91n-%C4%91%E1%BA%A3o-ng%C6%B0%E1%BB%A3c-t%E1%BB%87p-v%E1%BB%81-b%E1%BA%A3n-s%E1%BB%ADa-%C4%91%E1%BB%95i-c%E1%BB%A5-th%E1%BB%83)\n"
"    - [T√¥i mu·ªën li·ªát k√™ c√°c thay ƒë·ªïi c·ªßa m·ªôt t·ªáp c·ª• th·ªÉ gi·ªØa c√°c commit ho·∫∑c "
"c√°c "
"nh√°nh](#t%C3%B4i-mu%E1%BB%91n-li%E1%BB%87t-k%C3%AA-c%C3%A1c-thay-%C4%91%E1%BB%95i-c%E1%BB%A7a-m%E1%BB%99t-t%E1%BB%87p-c%E1%BB%A5-th%E1%BB%83-gi%E1%BB%AFa-c%C3%A1c-commit-ho%E1%BA%B7c-c%C3%A1c-nh%C3%A1nh)\n"
"    - [T√¥i mu·ªën Git b·ªè qua nh·ªØng thay ƒë·ªïi ƒë·ªëi v·ªõi m·ªôt t·ªáp c·ª• "
"th·ªÉ](#t%C3%B4i-mu%E1%BB%91n-git-b%E1%BB%8F-qua-nh%E1%BB%AFng-thay-%C4%91%E1%BB%95i-%C4%91%E1%BB%91i-v%E1%BB%9Bi-m%E1%BB%99t-t%E1%BB%87p-c%E1%BB%A5-th%E1%BB%83)\n"
"  - [Debugging (G·ª° l·ªói) with "
"Git](#debugging-g%E1%BB%A1-l%E1%BB%97i-with-git)\n"
"  - [C·∫•u h√¨nh (Configuration)](#c%E1%BA%A5u-h%C3%ACnh-configuration)\n"
"    - [T√¥i mu·ªën th√™m b√≠ danh (alias) cho m·ªôt s·ªë l·ªánh "
"Git](#t%C3%B4i-mu%E1%BB%91n-th%C3%AAm-b%C3%AD-danh-alias-cho-m%E1%BB%99t-s%E1%BB%91-l%E1%BB%87nh-git)\n"
"    - [T√¥i mu·ªën th√™m m·ªôt th∆∞ m·ª•c tr·ªëng v√†o repository c·ªßa "
"t√¥i](#t%C3%B4i-mu%E1%BB%91n-th%C3%AAm-m%E1%BB%99t-th%C6%B0-m%E1%BB%A5c-tr%E1%BB%91ng-v%C3%A0o-repository-c%E1%BB%A7a-t%C3%B4i)\n"
"    - [T√¥i mu·ªën cache (cho v√†o b·ªô nh·ªõ ƒë·ªám) m·ªôt username v√† password cho m·ªôt "
"repository](#t%C3%B4i-mu%E1%BB%91n-cache-cho-v%C3%A0o-b%E1%BB%99-nh%E1%BB%9B-%C4%91%E1%BB%87m-m%E1%BB%99t-username-v%C3%A0-password-cho-m%E1%BB%99t-repository)\n"
"    - [T√¥i mu·ªën Git b·ªè qua c√°c quy·ªÅn v√† thay ƒë·ªïi v·ªÅ filemode (ch·∫ø ƒë·ªô "
"file)](#t%C3%B4i-mu%E1%BB%91n-git-b%E1%BB%8F-qua-c%C3%A1c-quy%E1%BB%81n-v%C3%A0-thay-%C4%91%E1%BB%95i-v%E1%BB%81-filemode-ch%E1%BA%BF-%C4%91%E1%BB%99-file)\n"
"    - [T√¥i mu·ªën ƒë·∫∑t ng∆∞·ªùi d√πng to√†n c·ª•c (global "
"user)](#t%C3%B4i-mu%E1%BB%91n-%C4%91%E1%BA%B7t-ng%C6%B0%E1%BB%9Di-d%C3%B9ng-to%C3%A0n-c%E1%BB%A5c-global-user)\n"
"  - [T√¥i kh√¥ng bi·∫øt m√¨nh ƒë√£ l√†m g√¨ "
"sai](#t%C3%B4i-kh%C3%B4ng-bi%E1%BA%BFt-m%C3%ACnh-%C4%91%C3%A3-l%C3%A0m-g%C3%AC-sai)\n"
"  - [Git Shortcuts (ph√≠m t·∫Øt)](#git-shortcuts-ph%C3%ADm-t%E1%BA%AFt)\n"
"    - [Git Bash](#git-bash)\n"
"    - [PowerShell tr√™n Windows](#powershell-tr%C3%AAn-windows)\n"
"- [T√†i nguy√™n kh√°c](#t%C3%A0i-nguy%C3%AAn-kh%C3%A1c)\n"
"  - [S√°ch](#s%C3%A1ch)\n"
"  - [H∆∞·ªõng d·∫´n](#h%C6%B0%E1%BB%9Bng-d%E1%BA%ABn)\n"
"  - [Scripts (t·∫≠p l·ªánh) v√† c√°c c√¥ng "
"c·ª•](#scripts-t%E1%BA%ADp-l%E1%BB%87nh-v%C3%A0-c%C3%A1c-c%C3%B4ng-c%E1%BB%A5)\n"
"  - [GUI Clients](#gui-clients)\n"

#. type: Plain text
#: README.md:148
msgid ""
"<!-- END doctoc generated TOC please keep comment here to allow auto update "
"-->"
msgstr ""
"<!-- END doctoc generated TOC please keep comment here to allow auto update "
"-->"

#. type: Plain text
#: README.md:150
msgid "## Repositories"
msgstr "## Repositories (Kho)"

#. type: Plain text
#: README.md:152
msgid "### I want to start a local repository"
msgstr "### T√¥i mu·ªën t·∫°o m·ªôt repository tr√™n local"

#. type: Plain text
#: README.md:154
msgid "To initialize an existing directory as a Git repository:"
msgstr "ƒê·ªÉ t·∫°o m·ªôt Git repository t·∫°i th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i:"

#. type: Plain text
#: README.md:158
msgid "```sh (my-folder) $ git init ```"
msgstr "```sh (th∆∞-m·ª•c-c·ªßa-t√¥i) $ git init ```"

#. type: Plain text
#: README.md:160
msgid "### I want to clone a remote repository"
msgstr "### T√¥i mu·ªën clone m·ªôt remote repository"

#. type: Plain text
#: README.md:162
msgid ""
"To clone (copy) a remote repository, copy the URL for the repository, and "
"run:"
msgstr ""
"ƒê·ªÉ clone (copy) m·ªôt remote repository, copy ƒë∆∞·ªùng d·∫´n url cho repository, v√† "
"ch·∫°y :"

#. type: Plain text
#: README.md:166
msgid "```sh $ git clone [url] ```"
msgstr "```sh $ git clone [url] ```"

#. type: Plain text
#: README.md:168
msgid ""
"This will save it to a folder named the same as the remote "
"repository's. Make sure you have a connection to the remote server you are "
"cloning from (for most purposes this means making sure you are connected to "
"the internet)."
msgstr ""
"L·ªánh n√†y s·∫Ω t·∫£i xu·ªëng m·ªôt th∆∞ m·ª•c c√≥ t√™n gi·ªëng t√™n c·ªßa remote "
"repository. H√£y ch·∫Øc ch·∫Øn r·∫±ng b·∫°n c√≥ k·∫øt n·ªëi ƒë·∫øn remote server khi b·∫°n ƒëang "
"clone v·ªÅ (ph·∫ßn l·ªõn th·ªùi gian nghƒ©a l√† c·∫ßn ƒë·∫£m b·∫£o b·∫°n k·∫øt n·ªëi ƒë∆∞·ª£c v·ªõi "
"internet)."

#. type: Plain text
#: README.md:170
msgid ""
"To clone it into a folder with a different name than the default repository "
"name:"
msgstr "ƒê·ªÉ clone v√†o m·ªôt th∆∞ m·ª•c v·ªõi t√™n kh√°c v·ªõi t√™n m·∫∑c ƒë·ªãnh c·ªßa repository:"

#. type: Plain text
#: README.md:174
msgid "```sh $ git clone [url] name-of-new-folder ```"
msgstr "```sh $ git clone [url] name-of-new-folder ```"

#. type: Plain text
#: README.md:176
msgid "### I set the wrong remote repository"
msgstr "### T√¥i ƒë·ªÉ sai remote repository"

#. type: Plain text
#: README.md:178
msgid "There are a few possible problems here:"
msgstr "C√≥ th·ªÉ c√≥ v√†i v·∫•n ƒë·ªÅ kh√°c nhau:"

#. type: Plain text
#: README.md:180
msgid ""
"If you cloned the wrong repository, simply delete the directory created "
"after running `git clone` and clone the correct repository."
msgstr ""
"N·∫øu b·∫°n clone sai repository, ch·ªâ c·∫ßn x√≥a th∆∞ m·ª•c t·∫°o b·ªüi `git clone` v√† sau "
"ƒë√≥ clone ƒë√∫ng remote repository."

#. type: Plain text
#: README.md:182
msgid ""
"If you set the wrong repository as the origin of an existing local "
"repository, change the URL of your origin by running:"
msgstr ""
"N·∫øu b·∫°n ƒë·ªÉ nh·∫ßm repository l√† origin c·ªßa m·ªôt local repository hi·ªán t·∫°i, thay "
"ƒë·ªïi URL c·ªßa origin v·ªõi l·ªánh:"

#. type: Plain text
#: README.md:186
msgid "```sh $ git remote set-url origin [url of the actual repo] ```"
msgstr "```sh $ git remote set-url origin [url c·ªßa repo ƒë√∫ng] ```"

#. type: Plain text
#: README.md:188
msgid ""
"For more, see [this StackOverflow "
"topic](https://stackoverflow.com/questions/2432764/how-to-change-the-uri-url-for-a-remote-git-repository#2432799)."
msgstr ""
"Xem th√™m t·∫°i "
"[StackOverflow](https://stackoverflow.com/questions/2432764/how-to-change-the-uri-url-for-a-remote-git-repository#2432799)."

#. type: Plain text
#: README.md:191
msgid "### I want to add code to someone else's repository"
msgstr "### T√¥i mu·ªën th√™m s·ª≠a code cho repository c·ªßa ng∆∞·ªùi kh√°c"

#. type: Plain text
#: README.md:193
msgid ""
"Git doesn't allow you to add code to someone else's repository without "
"access rights. Neither does GitHub, which is not the same as Git, but rather "
"a hosted service for Git repositories. However, you can suggest code using "
"patches, or, on GitHub, forks and pull requests."
msgstr ""
"Git kh√¥ng cho b·∫°n th√™m s·ª≠a code v√†o repository c·ªßa ng∆∞·ªùi kh√°c n·∫øu kh√¥ng c√≥ "
"quy·ªÅn truy c·∫≠p. GitHub c≈©ng th·∫ø, GitHub kh√°c v·ªõi Git v√¨ l√† d·ªãch v·ª• hosting "
"cho c√°c Git repository. Nh∆∞ng b·∫°n c√≥ th·ªÉ th√™m s·ª≠a code v·ªõi c√°c patch v√° l·ªói, "
"ho·∫∑c, n·∫øu tr√™n GitHub, v·ªõi forks v√† pull requests."

#. type: Plain text
#: README.md:195
msgid ""
"First, a bit about forking. A fork is a copy of a repository. It is not a "
"git operation, but is a common action on GitHub, Bitbucket, GitLab ‚Äî or "
"anywhere people host Git repositories. You can fork a repository through the "
"hosted UI."
msgstr ""
"Tr∆∞·ªõc h√™t, m·ªôt v√†i ƒëi·ªÅu v·ªÅ fork. M·ªôt fork l√† m·ªôt copy c·ªßa m·ªôt "
"repository. ƒê√¢y kh√¥ng ph·∫£i l√† m·ªôt l·ªánh git, m√† l√† m·ªôt h√†nh ƒë·ªông th∆∞·ªùng th·∫•y "
"tr√™n GitHub, Bitbucket, GitLab ‚Äî ho·∫∑c b·∫Øt c·ª© ƒë√¢u host c√°c Git "
"repository. B·∫°n c√≥ th·ªÉ fork m·ªôt repository qua UI c·ªßa d·ªãch v·ª• host."

#. type: Plain text
#: README.md:197
msgid "#### Suggesting code via pull requests"
msgstr "#### Th√™m s·ª≠a code v·ªõi pull requests"

#. type: Plain text
#: README.md:199
msgid ""
"After you've forked a repository, you normally need to clone the repository "
"to your machine. You can do some small edits on GitHub, for instance, "
"without cloning, but this isn't a github-flight-rules list, so let's go with "
"how to do this locally."
msgstr ""
"Sau khi ƒë√£ fork m·ªôt repository, b·∫°n th∆∞·ªùng ph·∫£i clone repository v·ªÅ m√°y c·ªßa "
"b·∫°n. T·∫•t nhi√™n b·∫°n c√≥ th·ªÉ t·∫°o v√†i ch·ªânh s·ª≠a nh·ªè tr√™n GitHub n·∫øu kh√¥ng clone "
"v·ªÅ m√°y, nh∆∞ng vƒÉn b·∫£n n√†y kh√¥ng ph·∫£i l√† github-flight-rules, th·∫ø n√™n h√£y xem "
"c√°ch tr√™n m√°y local."

#. type: Plain text
#: README.md:203
msgid ""
"```sh # if you are using ssh $ git clone "
"git@github.com:k88hudson/git-flight-rules.git"
msgstr ""
"```sh # n·∫øu b·∫°n d√πng ssh $ git clone "
"git@github.com:k88hudson/git-flight-rules.git"

#. type: Plain text
#: README.md:207
msgid ""
"# if you are using https $ git clone "
"https://github.com/k88hudson/git-flight-rules.git ```"
msgstr ""
"# n·∫øu b·∫°n d√πng https $ git clone "
"https://github.com/k88hudson/git-flight-rules.git ```"

#. type: Plain text
#: README.md:209
msgid ""
"If you `cd` into the resulting directory, and type `git remote`, you'll see "
"a list of the remotes. Normally there will be one remote - `origin` - which "
"will point to `k88hudson/git-flight-rules`. In this case, we also want a "
"remote that will point to your fork."
msgstr ""
"N·∫øu b·∫°n `cd` v√†o th∆∞ m·ª•c ƒë∆∞·ª£c t·∫°o, v√† ch·∫°y l·ªánh `git remote`, b·∫°n s·∫Ω th·∫•y "
"danh s√°ch c√°c remote. Th∆∞·ªùng s·∫Ω c√≥ m·ªôt remote - `origin` - tr·ªè ƒë·∫øn "
"`k88hudson/git-flight-rules`. Trong tr∆∞·ªùng h·ª£p n√†y, b·∫°n c≈©ng mu·ªën m·ªôt remote "
"tr·ªè ƒë·∫øn fork c·ªßa b·∫°n."

#. type: Plain text
#: README.md:211
msgid ""
"First, to follow a Git convention, we normally use the remote name `origin` "
"for your own repository and `upstream` for whatever you've forked. So, "
"rename the `origin` remote to `upstream`"
msgstr ""
"ƒê·∫ßu ti√™n, ƒë·ªÉ theo quy chu·∫©n d√πng Git, ch√∫ng ta s·∫Ω d√πng remote t√™n `origin` "
"cho repository c·ªßa b·∫°n v√† t√™n `upstream` cho repository m√† b·∫°n fork. ƒê·ªÉ ƒë·ªïi "
"t√™n cho remote `origin` sang t√™n `upstream` ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:215
msgid "```sh $ git remote rename origin upstream ```"
msgstr "```sh $ git remote rename origin upstream ```"

#. type: Plain text
#: README.md:217
msgid ""
"You can also do this using `git remote set-url`, but it takes longer and is "
"more steps."
msgstr ""
"B·∫°n c≈©ng c√≥ th·ªÉ ƒë·ªïi t√™n v·ªõi l·ªánh `git remote set-url`, nh∆∞ng s·∫Ω m·∫•t th√™m "
"th·ªùi gian v√† nhi·ªÅu b∆∞·ªõc h∆°n."

#. type: Plain text
#: README.md:219
msgid "Then, set up a new remote that points to your project."
msgstr "Sau ƒë√≥, t·∫°o remote m·ªõi ƒë·ªÉ tr·ªè v·ªÅ repository c·ªßa b·∫°n."

#. type: Plain text
#: README.md:223
msgid ""
"```sh $ git remote add origin git@github.com:YourName/git-flight-rules.git "
"```"
msgstr ""
"```sh $ git remote add origin "
"git@github.com:YourtGitHubUsername/git-flight-rules.git ```"

#. type: Plain text
#: README.md:225
msgid "Note that now you have two remotes."
msgstr "L∆∞u √Ω l√† b√¢y gi·ªù b·∫°n c√≥ hai remote."

#. type: Plain text
#: README.md:228
msgid ""
"- `origin` references your own repository.  - `upstream` references the "
"original one."
msgstr ""
"- `origin` tr·ªè ƒë·∫øn repository c·ªßa b·∫°n.  - `upstream` tr·ªè ƒë·∫øn repository "
"nguy√™n b·∫£n ."

#. type: Plain text
#: README.md:230
msgid "From origin, you can read and write. From upstream, you can only read."
msgstr "V·ªõi `origin`, b·∫°n c√≥ th·ªÉ ƒë·ªçc v√† vi·∫øt. V·ªõi `upstream`, b·∫°n ch·ªâ c√≥ th·ªÉ ƒë·ªçc."

#. type: Plain text
#: README.md:232
msgid ""
"When you've finished making whatever changes you like, push your changes "
"(normally in a branch) to the remote named `origin`. If you're on a branch, "
"you could use `--set-upstream` to avoid specifying the remote tracking "
"branch on every future push using this branch. For instance:"
msgstr ""
"Sau khi ƒë√£ ch·ªânh s·ª≠a theo mong mu·ªën, push (ƒë·∫©y) c√°c thay ƒë·ªïi (th∆∞·ªùng l√† ·ªü "
"trong branch) t·ªõi remote t√™n `origin`. N·∫øu b·∫°n ·ªü tr√™n nh√°nh, b·∫°n c√≥ th·ªÉ d√πng "
"`--set-upstream` ƒë·ªÉ tr√°nh c·∫ßn ph·∫£i ghi r√µ d√πng brach n√†o c·ªßa remote m·ªói l·∫ßn "
"push trong t∆∞∆°ng lai khi d√πng nh√°nh ƒë·∫•y. V√≠ d·ª•:"

#. type: Plain text
#: README.md:236
msgid ""
"```sh $ (feature/my-feature) git push --set-upstream origin "
"feature/my-feature ```"
msgstr ""
"```sh $ (feature/my-feature) git push --set-upstream origin "
"feature/my-feature ```"

#. type: Plain text
#: README.md:238
msgid ""
"There is no way to suggest a pull request using the CLI using Git (although "
"there are tools, like [hub](http://github.com/github/hub), which will do "
"this for you). So, if you're ready to make a pull request, go to your GitHub "
"(or another Git host) and create a new pull request. Note that your host "
"automatically links the original and forked repositories."
msgstr ""
"Kh√¥ng c√≥ c√°ch n√†o ƒë·ªÉ t·∫°o pull request tr√™n giao di·ªán l·ªánh (CLI) v·ªõi Git (m·∫∑c "
"d√π c√≥ v√†i c√¥ng c·ª•, nh∆∞ [hub](http://github.com/github/hub), c√≥ cho b·∫°n l·ª±a "
"ch·ªçn n√†y). N·∫øu b·∫°n s√£n s√†ng t·∫°o Pull Request, tr·ªü l·∫°i GitHub (ho·∫∑c d·ªãch v·ª• "
"host Git) v√† t·∫°o pull request m·ªõi. Nh·ªõ l√† d·ªãch v·ª• host s·∫Ω t·ª± ƒë·ªông link "
"repository nguy√™n b·∫£n v√† repository do fork."

#. type: Plain text
#: README.md:240
msgid "After all of this, do not forget to respond to any code review feedback."
msgstr "Sau c√πng, nh·ªõ ƒë√πng qu√™n tr·∫£ l·ªùi nh·ªØng comment ph√™ duy·ªát code."

#. type: Plain text
#: README.md:242
msgid "#### Suggesting code via patches"
msgstr "#### Th√™m s·ª≠a code v·ªõi c√°c patch (v√°)"

#. type: Plain text
#: README.md:244
msgid ""
"Another approach to suggesting code changes that doesn't rely on third party "
"sites such as Github is to use `git format-patch`."
msgstr ""
"M·ªôt c√°ch kh√°c ƒë·ªÉ th√™m s·ª≠a code m√† kh√¥ng c·∫ßn s·ª≠ d·ª•ng d·ªãch v·ª• b√™n th·ª© ba nh∆∞ "
"GitHub l√† d√πng `git format-patch`."

#. type: Plain text
#: README.md:246
msgid ""
"`format-patch` creates a .patch file for one or more commits. This file is "
"essentially a list of changes that looks similar to the commit diffs you can "
"view on Github."
msgstr ""
"`format-patch` t·∫°o file (t·ªáp) d·∫°ng .patch cho m·ªôt ho·∫∑c nhi·ªÅu commit. File "
"n√†y l√† c∆° b·∫£n l√† danh s√°ch nh∆∞ng thay ƒë·ªïi, gi·ªëng nh∆∞ nh·ªØng commit diffs b·∫°n "
"xem ƒë∆∞·ª£c tr√™n Github."

#. type: Plain text
#: README.md:248
msgid ""
"A patch can be viewed and even edited by the recipient and applied using "
"`git am`."
msgstr ""
"C√°c patch c√≥ th·ªÉ ƒë∆∞·ª£c xem ho·∫∑c th·∫≠m ch√≠ th√™m s·ª≠a b·ªüi ng∆∞·ªùi nh·∫≠n v√† √°p g·∫Øn "
"v·ªõi l·ªánh `git am`."

#. type: Plain text
#: README.md:250
msgid ""
"For example, to create a patch based on the previous commit you would run "
"`git format-patch HEAD^` which would create a .patch file called something "
"like 0001-My-Commit-Message.patch."
msgstr ""
"V√≠ d·ª•, ƒë·ªÉ t·∫°o patch d·ª±a v√†o commit m·ªõi nh√¢t, b·∫°n ch·∫°y l·ªánh `git format-patch "
"HEAD^`, l·ªánh s·∫Ω t·∫°o m·ªôt t·ªáp .patch v·ªõi t√™n nh∆∞: "
"`0001-My-Commit-Message.patch`."

#. type: Plain text
#: README.md:252
msgid ""
"To apply this patch file to your repository you would run `gim am "
"./0001-My-Commit-Message.patch`."
msgstr ""
"ƒê·ªÉ √°p g·∫Øn t·ªáp patch cho repository, b·∫°n s·∫Ω d√πng l·ªánh `gim am "
"./0001-My-Commit-Message.patch`."

#. type: Plain text
#: README.md:254
msgid ""
"Patches can also be sent via email using the `git send-email` command. For "
"information on usage and configuration see: https://git-send-email.io"
msgstr ""
"C√°c patch c√≤n c√≥ th·ªÉ g·ª≠i qua email v·ªõi l·ªánh `git send-email`. ƒê·ªÉ xem th√™m "
"th√¥ng tin v·ªÅ c√°ch d√πng ho·∫∑c c·∫•u h√¨nh, xem: https://git-send-email.io"

#. type: Plain text
#: README.md:256
msgid ""
"#### I need to update my fork with latest updates from the original "
"repository"
msgstr ""
"#### T√¥i c·∫ßn update fork c·ªßa t√¥i v·ªõi nh·ªØng thay ƒë·ªïi m·ªõi nh·∫•t t·ª´ repository "
"nguy√™n b·∫£n"

#. type: Plain text
#: README.md:258
msgid ""
"After a while, the `upstream` repository may have been updated, and these "
"updates need to be pulled into your `origin` repo. Remember that like you, "
"other people are contributing too. Suppose that you are in your own feature "
"branch and you need to update it with the original repository updates."
msgstr ""
"Sau m·ªôt qu√£ng th·ªùi gian, kho `upstream` c√≥ th·ªÉ c√≥ th√™m thay ƒë·ªïi, v√† nh·ªØng "
"thay ƒë·ªïi n√†y c·∫ßn ph·∫£i ƒë∆∞·ª£c t·∫£i v·ªÅ kho `origin`. Nh·ªõ l√† gi·ªëng b·∫°n, nh·ªØng "
"ng∆∞·ªùi kh√°c c≈©ng ƒëang g√≥p s·ª©c c·ªßa h·ªç. Gi·∫£ d·ª• b·∫°n ƒëang ·ªü nh√°nh cho t√≠nh nƒÉng "
"m·ªõi b·∫°n ƒëang thi·∫øt k·∫ø, v√† b·∫°n c·∫ßn update nh√°nh v·ªõi nh·ªØng thay ƒë·ªïi tr√™n "
"repository nguy√™n b·∫£n."

#. type: Plain text
#: README.md:260
msgid ""
"You probably have set up a remote that points to the original project. If "
"not, do this now. Generally we use `upstream` as a remote name:"
msgstr ""
"C√≥ khi b·∫°n ƒë√£ c√≥ remote tr·ªè ƒë·∫øn project nguy√™n b·∫£n. N·∫øu kh√¥ng, h√£y t·∫°o "
"n√≥. Th∆∞·ªùng ch√∫ng ta d√πng t√™n `upstream` cho remote n√†y:"

#. type: Plain text
#: README.md:265
msgid ""
"```sh $ (main) git remote add upstream <link-to-original-repository> # $ "
"(main) git remote add upstream git@github.com:k88hudson/git-flight-rules.git "
"```"
msgstr ""
"```sh $ (main) git remote add upstream <link-t·ªõi-repository-nguy√™n-b·∫£n> # $ "
"(main) git remote add upstream git@github.com:k88hudson/git-flight-rules.git "
"```"

#. type: Plain text
#: README.md:267
msgid "Now you can fetch from upstream and get the latest updates."
msgstr "B√¢y gi·ªù b·∫°n fetch (l·∫•y) t·ª´ `upstream` v√† nh·∫≠n nh·ªØng update m·ªõi nh·∫•t."

#. type: Plain text
#: README.md:271
msgid "```sh $ (main) git fetch upstream $ (main) git merge upstream/main"
msgstr "```sh $ (main) git fetch upstream $ (main) git merge upstream/main"

#. type: Plain text
#: README.md:275
msgid "# or using a single command $ (main) git pull upstream main ```"
msgstr "# ho·∫∑c v·ªõi m·ªôt l·ªánh duy nh·∫•t $ (main) git pull upstream main ```"

#. type: Plain text
#: README.md:277
msgid "## Editing Commits"
msgstr "## Ch·ªânh s·ª≠a Commit"

#. type: Plain text
#: README.md:280
msgid "<a name=\"diff-last\"></a> ### What did I just commit?"
msgstr "<a name=\"diff-last\"></a> ### T√¥i v·ª´a commit c√°i g√¨?"

#. type: Plain text
#: README.md:282
msgid ""
"Let's say that you just blindly committed changes with `git commit -a` and "
"you're not sure what the actual content of the commit you just made was. You "
"can show the latest commit on your current HEAD with:"
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n v·ª´a commit nh·ªØng thay ƒë·ªïi m·ªôt c√°ch m√π qu√°ng v·ªõi l·ªánh `git commit "
"-a` v√† b·∫°n kh√¥ng ch·∫Øc ch·∫Øn n·ªôi dung th·ª±c s·ª± c·ªßa commit v·ª´a th·ª±c hi·ªán l√† "
"g√¨. B·∫°n c√≥ th·ªÉ hi·ªÉn th·ªã ra commit g·∫ßn nh·∫•t tr√™n tr·ªè HEAD hi·ªán t·∫°i c·ªßa b·∫°n "
"v·ªõi l·ªánh:"

#. type: Plain text
#: README.md:286
msgid "```sh (main)$ git show ```"
msgstr "```sh (main)$ git show ```"

#. type: Plain text
#: README.md:288
msgid "Or"
msgstr "Ho·∫∑c"

#. type: Plain text
#: README.md:292
msgid "```sh $ git log -n1 -p ```"
msgstr "```sh $ git log -n1 -p ```"

#. type: Plain text
#: README.md:294
msgid ""
"If you want to see a file at a specific commit, you can also do this (where "
"`<commitid>` is the commit you're interested in):"
msgstr ""
"N·∫øu b·∫°n mu·ªën xem m·ªôt file t·∫°i m·ªôt commit c·ª• th·ªÉ, b·∫°n c≈©ng c√≥ th·ªÉ l√†m ƒë∆∞·ª£c "
"ƒëi·ªÅu n√†y (khi `<commitid>` l√† commit m√† b·∫°n mu·ªën bi·∫øt) v·ªõi l·ªánh:"

#. type: Plain text
#: README.md:298
msgid "```sh $ git show <commitid>:filename ```"
msgstr "```sh $ git show <commitid>:filename ```"

#. type: Plain text
#: README.md:300
msgid "### I wrote the wrong thing in a commit message"
msgstr "### T√¥i ƒë√£ vi·∫øt sai v√†i th·ª© trong message (th√¥ng ƒëi·ªáp) c·ªßa commit"

#. type: Plain text
#: README.md:302
msgid ""
"If you wrote the wrong thing and the commit has not yet been pushed, you can "
"do the following to change the commit message without changing the changes "
"in the commit:"
msgstr ""
"N·∫øu b·∫°n ƒë√£ vi·∫øt sai th·ª© g√¨ ƒë√≥ v√† commit ch∆∞a ƒë∆∞·ª£c push l√™n, b·∫°n c√≥ th·ªÉ l√†m "
"theo c√°ch sau ƒë·ªÉ thay ƒë·ªïi message c·ªßa commit m√† kh√¥ng l√†m thay ƒë·ªïi commit:"

#. type: Plain text
#: README.md:306
msgid "```sh $ git commit --amend --only ```"
msgstr "```sh $ git commit --amend --only ```"

#. type: Plain text
#: README.md:308
msgid ""
"This will open your default text editor, where you can edit the message. On "
"the other hand, you can do this all in one command:"
msgstr ""
"C√¢u l·ªánh ƒë√≥ s·∫Ω m·ªü tr√¨nh so·∫°n th·∫£o (text editor) m·∫∑c ƒë·ªãnh c·ªßa b·∫°n, n∆°i b·∫°n c√≥ "
"th·ªÉ ch·ªânh s·ª≠a message. Ngo√†i ra, b·∫°n c√≥ th·ªÉ l√†m t·∫•t c·∫£ ƒëi·ªÅu n√†y v·ªõi l·ªánh "
"sau:"

#. type: Plain text
#: README.md:312
msgid "```sh $ git commit --amend --only -m 'xxxxxxx' ```"
msgstr "```sh $ git commit --amend --only -m 'xxxxxxx' ```"

#. type: Plain text
#: README.md:314
msgid ""
"If you have already pushed the message, you can amend the commit and force "
"push, but this is not recommended."
msgstr ""
"N·∫øu b·∫°n ƒë√£ ƒë·∫©y message l√™n, b·∫°n c√≥ th·ªÉ ch·ªânh s·ª≠a commit v√† force push (ƒë·∫©y "
"√©p), nh∆∞ng c√°ch n√†y kh√¥ng ƒë∆∞·ª£c khuy·∫øn kh√≠ch."

#. type: Plain text
#: README.md:317
msgid ""
"<a name=\"commit-wrong-author\"></a> ### I committed with the wrong name and "
"email configured"
msgstr ""
"<a name=\"commit-wrong-author\"></a> ### T√¥i ƒë√£ commit v·ªõi c·∫•u h√¨nh t√™n v√† "
"email sai"

#. type: Plain text
#: README.md:319
msgid "If it's a single commit, amend it"
msgstr "N·∫øu ƒë√≥ l√† m·ªôt commit ƒë·ªôc l·∫≠p, ch·ªânh s·ª≠a n√≥:"

#. type: Plain text
#: README.md:323
msgid ""
"```sh $ git commit --amend --no-edit --author \"New Authorname "
"<authoremail@mydomain.com>\" ```"
msgstr ""
"```sh $ git commit --amend --no-edit --author \"T√™nT√°cGi·∫£M·ªõi "
"<authoremail@mydomain.com>\" ```"

#. type: Plain text
#: README.md:325
msgid ""
"An alternative is to correctly configure your author settings in `git config "
"--global author.(name|email)` and then use"
msgstr ""
"M·ªôt c√°ch kh√°c ƒë·ªÉ c·∫•u h√¨nh ƒë√∫ng t√°c gi·∫£ l√† c√†i ƒë·∫∑t l·∫°i v·ªõi l·ªánh `git config "
"--global author.(name|email)` v√† sau ƒë√≥ ch·∫°y l·ªánh"

#. type: Plain text
#: README.md:329
msgid "```sh $ git commit --amend --reset-author --no-edit ```"
msgstr "```sh $ git commit --amend --reset-author --no-edit ```"

#. type: Plain text
#: README.md:331
msgid ""
"If you need to change all of history, see the man page for `git "
"filter-branch`."
msgstr ""
"N·∫øu b·∫°n c·∫ßn thay ƒë·ªïi t·∫•t c·∫£ l·ªãch s·ª≠, h√£y xem trang `man` c·ªßa `git "
"filter-branch`."

#. type: Plain text
#: README.md:333
msgid "### I want to remove a file from the previous commit"
msgstr "### T√¥i mu·ªën xo√° m·ªôt file t·ª´ commit tr∆∞·ªõc"

#. type: Plain text
#: README.md:335
msgid ""
"In order to remove changes for a file from the previous commit, do the "
"following:"
msgstr "ƒê·ªÉ xo√° c√°c thay ƒë·ªïi ƒë·ªëi v·ªõi m·ªôt file kh·ªèi commit tr∆∞·ªõc, h√£y l√†m nh∆∞ sau:"

#. type: Plain text
#: README.md:341
msgid ""
"```sh $ git checkout HEAD^ myfile $ git add myfile $ git commit --amend "
"--no-edit ```"
msgstr ""
"```sh $ git checkout HEAD^ myfile $ git add myfile $ git commit --amend "
"--no-edit ```"

#. type: Plain text
#: README.md:343
msgid ""
"In case the file was newly added to the commit and you want to remove it "
"(from Git alone), do:"
msgstr ""
"Trong tr∆∞·ªùng h·ª£p file m·ªõi ƒë∆∞·ª£c th√™m v√†o commit v√† b·∫°n mu·ªën xo√° n√≥ (ri√™ng "
"tr√™n Git), h√£y th·ª±c hi·ªán:"

#. type: Plain text
#: README.md:348
msgid "```sh $ git rm --cached myfile $ git commit --amend --no-edit ```"
msgstr "```sh $ git rm --cached myfile $ git commit --amend --no-edit ```"

#. type: Plain text
#: README.md:350
msgid ""
"This is particularly useful when you have an open patch and you have "
"committed an unnecessary file, and need to force push to update the patch on "
"a remote. The `--no-edit` option is used to keep the existing commit "
"message."
msgstr ""
"C√°ch n√†y ƒëƒÉc bi·ªát h·ªØu √≠ch khi b·∫°n ƒëang m·ªü m·ªôt b·∫£n patch v√† b·∫°n ƒë√£ commit m·ªôt "
"file kh√¥ng c·∫ßn thi·∫øt v√† c·∫ßn force push ƒë·ªÉ c·∫≠p nh·∫≠t b·∫£n patch tr√™n "
"remote. D√≤ng `--no-edit` ƒë∆∞·ª£c d√πng ƒë·ªÉ gi·ªØ kh√¥ng thay ƒë·ªïi message cho commit "
"hi·ªán t·∫°i."

#. type: Plain text
#: README.md:353
msgid ""
"<a name=\"delete-pushed-commit\"></a> ### I want to delete or remove my last "
"commit"
msgstr ""
"<a name=\"delete-pushed-commit\"></a> ### T√¥i mu·ªën xo√° ho·∫∑c lo·∫°i b·ªè commit "
"m·ªõi nh·∫•t"

#. type: Plain text
#: README.md:355
msgid ""
"If you need to delete pushed commits, you can use the following. However, it "
"will irreversibly change your history, and mess up the history of anyone "
"else who had already pulled from the repository. In short, if you're not "
"sure, you should never do this, ever."
msgstr ""
"N·∫øu b·∫°n mu·ªën xo√° c√°c commit ƒë√£ push, b·∫°n c√≥ th·ªÉ l√†m nh∆∞ sau. Tuy nhi√™n, c√°ch "
"n√†y s·∫Ω thay ƒë·ªïi l·ªãch s·ª≠ commit kh√¥ng thay ƒë·ªïi ƒë∆∞·ª£c v√† l√†m h·ªèng l·ªãch s·ª≠ c·ªßa "
"b·∫•t k·ª≥ ai kh√°c ƒë√£ pull t·ª´ repository. T√≥m l·∫°i, n·∫øu b·∫°n kh√¥ng ch·∫Øc ch·∫Øn, b·∫°n "
"kh√¥ng bao gi·ªù n√™n l√†m c√°ch n√†y."

#. type: Plain text
#: README.md:360
msgid ""
"```sh $ git reset HEAD^ --hard $ git push --force-with-lease [remote] "
"[branch] ```"
msgstr ""
"```sh $ git reset HEAD^ --hard $ git push --force-with-lease [remote] "
"[branch] ```"

#. type: Plain text
#: README.md:362
msgid ""
"If you haven't pushed, to reset Git to the state it was in before you made "
"your last commit (while keeping your staged changes):"
msgstr ""
"N·∫øu b·∫°n ch∆∞a push, ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c Git v·ªÅ tr·∫°ng th√°i tr∆∞·ªõc khi b·∫°n th·ª±c hi·ªán "
"commit m·ªõi nh·∫•t (trong khi v√£n gi·ªØ c√°c thay ƒë·ªïi trong stage) h√£y ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:365
msgid "``` (my-branch*)$ git reset --soft HEAD@{1}"
msgstr "``` (my-branch*)$ git reset --soft HEAD@{1}"

#. type: Plain text
#: README.md:367 README.md:1341
msgid "```"
msgstr "```"

#. type: Plain text
#: README.md:369
msgid ""
"This only works if you haven't pushed. If you have pushed, the only truly "
"safe thing to do is `git revert SHAofBadCommit`. That will create a new "
"commit that undoes all the previous commit's changes. Or, if the branch you "
"pushed to is rebase-safe (ie. other devs aren't expected to pull from it), "
"you can just use `git push --force-with-lease`. For more, see [the above "
"section](#deleteremove-last-pushed-commit)."
msgstr ""
"C√°ch n√†y ch·ªâ ph√π h·ª£p n·∫øu b·∫°n ch∆∞a push. N·∫øu b·∫°n ƒë√£ push, ƒëi·ªÅu th·ª±c s·ª± an "
"to√†n nh·∫•t c·∫ßn l√†m l√† `git revert SHAc·ªßaCommitSai`. L·ªánh n√†y s·∫Ω t·∫°o m·ªôt "
"commit m·ªõi ƒë·ªÉ quay tr·ªü l·∫°i thay ƒë·ªïi c·ªßa commit tr∆∞·ªõc ƒë√≥. Ho·∫∑c n·∫øu nh√°nh b·∫°n "
"ƒë√£ push l√† rebase-safe (kh√¥ng c√≥ k·ª≥ v·ªçng c√°c dev kh√°c s·∫Ω pull t·ª´ n√≥), b·∫°n "
"ch·ªâ c√≥ th·ªÉ s·ª≠ d·ª•ng `git push --force-with-lease`. ƒê·ªÉ bi·∫øt th√™m, h√£y xem "
"[ph·∫ßn tr√™n](#delete-pushed-commit)."

#. type: Plain text
#: README.md:372
msgid "<a name=\"delete-any-commit\"></a> ### Delete/remove arbitrary commit"
msgstr "<a name=\"delete-any-commit\"></a> ### Xo√°/lo·∫°i b·ªè b·∫•t k·ª≥ commit n√†o"

#. type: Plain text
#: README.md:374
msgid "The same warning applies as above. Never do this if possible."
msgstr "L∆∞u √Ω nh∆∞ tr√™n. Kh√¥ng bao gi·ªù l√†m ƒëi·ªÅu n√†y n·∫øu c√≥ th·ªÉ tr√°nh ƒë∆∞·ª£c."

#. type: Plain text
#: README.md:379
msgid ""
"```sh $ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT $ git push "
"--force-with-lease [remote] [branch] ```"
msgstr ""
"```sh $ git rebase --onto SHA1_OF_BAD_COMMIT^ SHA1_OF_BAD_COMMIT $ git push "
"--force-with-lease [remote] [branch] ```"

#. type: Plain text
#: README.md:381
msgid ""
"Or do an [interactive rebase](#interactive-rebase) and remove the line(s) "
"corresponding to commit(s) you want to see removed."
msgstr ""
"Ho·∫∑c th·ª±c hi·ªán m·ªôt [interactive rebase](#interactive-rebase) v√† lo·∫°i b·ªè c√°c "
"d√≤ng t∆∞∆°ng ·ª©ng v·ªõi c√°c commit b·∫°n mu·ªën lo·∫°i b·ªè."

#. type: Plain text
#: README.md:384
msgid ""
"<a name=\"#force-push\"></a> ### I tried to push my amended commit to a "
"remote, but I got an error message"
msgstr ""
"<a name=\"#force-push\"></a> ### T√¥i ƒë√£ c·ªë g·∫Øng push commit ƒë√£ s·ª≠a ƒë·ªïi l√™n "
"remote, nh∆∞ng t√¥i g·∫∑p th√¥ng b√°o l·ªói"

#. type: Plain text
#: README.md:394, no-wrap
msgid ""
"```sh\n"
"To https://github.com/yourusername/repo.git\n"
"! [rejected]        mybranch -> mybranch (non-fast-forward)\n"
"error: failed to push some refs to "
"'https://github.com/tanay1337/webmaker.org.git'\n"
"hint: Updates were rejected because the tip of your current branch is "
"behind\n"
"hint: its remote counterpart. Integrate the remote changes (e.g.\n"
"hint: 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"```\n"
msgstr ""
"```sh\n"
"To https://github.com/yourusername/repo.git\n"
"! [rejected]        mybranch -> mybranch (non-fast-forward)\n"
"error: failed to push some refs to "
"'https://github.com/tanay1337/webmaker.org.git'\n"
"hint: Updates were rejected because the tip of your current branch is "
"behind\n"
"hint: its remote counterpart. Integrate the remote changes (e.g.\n"
"hint: 'git pull ...') before pushing again.\n"
"hint: See the 'Note about fast-forwards' in 'git push --help' for details.\n"
"```\n"

#. type: Plain text
#: README.md:396
msgid ""
"Note that, as with rebasing (see below), amending **replaces the old commit "
"with a new one**, so you must force push (`--force-with-lease`) your changes "
"if you have already pushed the pre-amended commit to your remote. Be careful "
"when you do this &ndash; *always* make sure you specify a branch!"
msgstr ""
"L∆∞u √Ω r·∫±ng, nh∆∞ v·ªõi rebase (xem b√™n d∆∞·ªõi), amend **thay th·∫ø commit c≈© v·ªõi "
"m·ªôt commit m·ªõi**, n√™n b·∫°n ph·∫£i force push (`--force-with-lease`) c√°c thay "
"ƒë·ªïi c·ªßa b·∫°n n·∫øu b·∫°n ƒë√£ push commit tr∆∞·ªõc amend l√™n remote c·ªßa b·∫°n. H√£y c·∫©n "
"th·∫≠n khi b·∫°n c√°ch n√†y &ndash; *lu√¥n lu√¥n* ƒë·∫£m b·∫£o r·∫±ng b·∫°n ƒë√£ ch·ªâ ƒë·ªãnh m·ªôt "
"nh√°nh!"

#. type: Plain text
#: README.md:400
msgid "```sh (my-branch)$ git push origin mybranch --force-with-lease ```"
msgstr "```sh (my-branch)$ git push origin mybranch --force-with-lease ```"

#. type: Plain text
#: README.md:402
msgid ""
"In general, **avoid force pushing**. It is best to create and push a new "
"commit rather than force-pushing the amended commit as it will cause "
"conflicts in the source history for any other developer who has interacted "
"with the branch in question or any child branches. `--force-with-lease` will "
"still fail, if someone else was also working on the same branch as you, and "
"your push would overwrite those changes."
msgstr ""
"N√≥i chung, **tr√°nh force push**. T·ªët nh·∫•t l√† t·∫°o v√† push m·ªôt commit m·ªõi thay "
"v√¨ force-push commit ƒë√£ s·ª≠a ƒë·ªïi v√¨ n√≥ s·∫Ω g√¢y xung ƒë·ªôt trong l·ªãch s·ª≠ commit "
"cho b·∫•t k·ª≥ developer n√†o ƒë√£ t∆∞∆°ng t√°c v·ªõi nh√°nh ƒë∆∞·ª£c ƒë·ªÅ c·∫≠p ho·∫∑c b·∫•t k·ª≥ "
"nh√°nh con n√†o. `--force-with-lease` s·∫Ω v·∫´n fail, n·∫øu ai kh√°c c≈©ng ƒëang l√†m "
"vi·ªác tr√™n c√πng m·ªôt nh√°nh v·ªõi b·∫°n v√† vi·ªác push l√™n s·∫Ω √©p tr√™n nh·ªØng thay ƒë·ªïi "
"ƒë√≥."

#. type: Plain text
#: README.md:404
msgid ""
"If you are *absolutely* sure that nobody is working on the same branch or "
"you want to update the tip of the branch *unconditionally*, you can use "
"`--force` (`-f`), but this should be avoided in general."
msgstr ""
"N·∫øu b·∫°n *ho√†n to√†n ch·∫Øc ch·∫Øn* r·∫±ng kh√¥ng ai ƒëang l√†m vi·ªác tr√™n c√πng m·ªôt "
"nh√°nh ho·∫∑c b·∫°n mu·ªën c·∫≠p nh·∫≠t ƒë·ªânh nh√°nh (tip of branch) *v√¥ ƒëi·ªÅu ki·ªán*, b·∫°n "
"c√≥ th·ªÉ s·ª≠ d·ª•ng `--force` (`-f`), nh∆∞ng c√°ch n√†y n√≥i chung n√™n tr√°nh."

#. type: Plain text
#: README.md:407
msgid ""
"<a href=\"undo-git-reset-hard\"></a> ### I accidentally did a hard reset, "
"and I want my changes back"
msgstr ""
"<a href=\"undo-git-reset-hard\"></a> ### T√¥i ƒë√£ v√¥ t√¨nh th·ª±c hi·ªán hard reset "
"v√† t√¥i mu·ªën c√°c thay ƒë·ªïi c·ªßa t√¥i."

#. type: Plain text
#: README.md:409
msgid ""
"If you accidentally do `git reset --hard`, you can normally still get your "
"commit back, as git keeps a log of everything for a few days."
msgstr ""
"N·∫øu v√¥ t√¨nh b·∫°n th·ª±c hi·ªán `git reset --hard`, b·∫°n c√≥ th·ªÉ v·∫´n ph·ª•c h·ªìi l·∫°i "
"ƒë∆∞·ª£c commit c·ªßa b·∫°n, v√¨ git gi·ªØ m·ªôt b·∫£n log cho t·∫•t c·∫£ m·ªçi th·ª© trong v√†i "
"ng√†y."

#. type: Plain text
#: README.md:411
msgid ""
"Note: This is only valid if your work is backed up, i.e., either committed "
"or stashed. `git reset --hard` _will remove_ uncommitted modifications, so "
"use it with caution. (A safer option is `git reset --keep`.)"
msgstr ""
"Ch√∫ √Ω: ƒêi·ªÅu n√†y ch·ªâ h·ª£p l·ªá n·∫øu ƒë√£ c√≥ sao l∆∞u, t·ª©c l√† ƒë√£ c√≥ commit ho·∫∑c ƒë∆∞·ª£c "
"`stash`. L·ªánh `git reset --hard` *s·∫Ω lo·∫°i b·ªè* c√°c thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c commit, "
"v√¨ v·∫≠y h√£y s·ª≠ d·ª•ng n√≥ m·ªôt c√°ch th·∫≠n tr·ªçng. (M·ªôt l·ª±a ch·ªçn an to√†n l√† `git "
"reset --keep`.)"

#. type: Plain text
#: README.md:415
msgid "```sh (main)$ git reflog ```"
msgstr "```sh (main)$ git reflog ```"

#. type: Plain text
#: README.md:417
msgid ""
"You'll see a list of your past commits, and a commit for the reset. Choose "
"the SHA of the commit you want to return to, and reset again:"
msgstr ""
"B·∫°n s·∫Ω th·∫•y danh s√°ch c√°c commit g·∫ßn ƒë√¢y v√† m·ªôt commit ƒë·ªÉ reset. Ch·ªçn SHA "
"c·ªßa commit b·∫°n mu·ªën tr·ªü l·∫°i t·ªõi v√† reset l·∫°i:"

#. type: Plain text
#: README.md:421
msgid "```sh (main)$ git reset --hard SHA1234 ```"
msgstr "```sh (main)$ git reset --hard SHA1234 ```"

#. type: Plain text
#: README.md:423
msgid "And you should be good to go."
msgstr "Th·∫ø n√†y l√† xong."

#. type: Plain text
#: README.md:426
msgid ""
"<a href=\"undo-a-commit-merge\"></a> ### I accidentally committed and pushed "
"a merge"
msgstr ""
"<a href=\"undo-a-commit-merge\"></a> ### T√¥i v√¥ t√¨nh commit v√† ƒë·∫©y l√™n m·ªôt "
"merge"

#. type: Plain text
#: README.md:428
msgid ""
"If you accidentally merged a feature branch to the main development branch "
"before it was ready to be merged, you can still undo the merge. But there's "
"a catch: A merge commit has more than one parent (usually two)."
msgstr ""
"N·∫øu b·∫°n v√¥ t√¨nh merge m·ªôt nh√°nh t√≠nh nƒÉng m·ªõi v√†o nh√°nh ph√°t tri·ªÉn ch√≠nh "
"tr∆∞·ªõc khi s·∫µn s√†ng ƒë·ªÉ merge, b·∫°n v·∫´n c√≥ th·ªÉ ƒë·∫£o ng∆∞·ª£c merge. Nh∆∞ng c√≥ m·ªôt "
"ƒëi·ªÉm ph·∫£i n·∫Øm ƒë∆∞·ª£c: M·ªôt commit merge c√≥ m·ªôt ho·∫∑c nhi·ªÅu h∆°n m·ªôt parent (g·ªëc) "
"(th∆∞·ªùng l√† 2)."

#. type: Plain text
#: README.md:434
msgid ""
"The command to use ```sh (feature-branch)$ git revert -m 1 <commit> ``` "
"where the -m 1 option says to select parent number 1 (the branch into which "
"the merge was made) as the parent to revert to."
msgstr ""
"L·ªánh ƒë·ªÉ ch·∫°y: ```sh (feature-branch)$ git revert -m 1 <commit> ``` D√≤ng `-m "
"1` l√† ƒë·ªÉ cho bi·∫øt c·∫ßn ch·ªçn parent th·ª© nh·∫•t` (nh√°nh m√† merge ƒë∆∞·ª£c th·ª±c hi·ªán) "
"l√†m parent ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c l·∫°i."

#. type: Plain text
#: README.md:436
msgid ""
"Note: the parent number is not a commit identifier. Rather, a merge commit "
"has a line `Merge: 8e2ce2d 86ac2e7`. The parent number is the 1-based index "
"of the desired parent on this line, the first identifier is number 1, the "
"second is number 2, and so on."
msgstr ""
"Ch√∫ √Ω: S·ªë parent kh√¥ng ph·∫£i l√† s·ªë commit. Thay v√†o ƒë√≥, m·ªôt commit merge s·∫Ω "
"c√≥ m·ªôt d√≤ng nh∆∞ `Merge: 8e2ce2d 86ac2e7`. S·ªë parent l√† s·ªë s·ªë nh·∫≠n d·∫°ng ƒë·∫ßu-1 "
"(1-based index) c·ªßa d√≤ng nay, s·ªë nh·∫≠n d·∫°ng ƒë·∫ßu ti√™n l√† 1 cho parent th·ª© "
"nh·∫•t, th·ª© 2 l√† cho parent 2, v√† ti·∫øp t·ª•c nh∆∞ th·∫ø."

#. type: Plain text
#: README.md:439
msgid ""
"<a href=\"undo-sensitive-commit-push\"></a> ### I accidentally committed and "
"pushed files containing sensitive data"
msgstr ""
"<a href=\"undo-sensitive-commit-push\"></a> ### T√¥i v√¥ t√¨nh commit v√† ƒë·∫©y "
"c√°c file ch·ª©a d·ªØ li·ªáu nh·∫£y c·∫£m"

#. type: Plain text
#: README.md:441
msgid ""
"If you accidentally pushed files containing sensitive, or private data "
"(passwords, keys, etc.), you can amend the previous commit. Keep in mind "
"that once you have pushed a commit, you should consider any data it contains "
"to be compromised. These steps can remove the sensitive data from your "
"public repo or your local copy, but you **cannot** remove the sensitive data "
"from other people's pulled copies. If you committed a password, **change it "
"immediately**. If you committed a key, **re-generate it "
"immediately**. Amending the pushed commit is not enough, since anyone could "
"have pulled the original commit containing your sensitive data in the "
"meantime."
msgstr ""
"N·∫øu b·∫°n v√¥ t√¨nh push l√™n c√°c file ch·ª©a d·ªØ li·ªáu nh·∫°y c·∫£m (m·∫≠t kh·∫©u, keys, "
"etc.), b·∫°n c√≥ th·ªÉ amend commit tr∆∞·ªõc. L∆∞u √Ω r·∫±ng khi b·∫°n ƒë√£ ƒë·∫©y m·ªôt commit, "
"b·∫°n n√™n coi b·∫•t k·ª≥ d·ªØ li·ªáu n√†o ƒë√£ b·ªã ƒë·∫©y nh∆∞ ƒë√£ b·ªã l·ªô. C√°c b∆∞·ªõc n√†y c√≥ th·ªÉ "
"xo√° d·ªØ li·ªáu nh·∫°y c·∫£m t·ª´ repo c√¥ng khai (public repo) ho·∫∑c b·∫£n sao n·ªôi b·ªô, "
"nh∆∞ng b·∫°n *kh√¥ng th·ªÉ* x√≥a d·ªØ li·ªáu nh·∫°y c·∫£m kh·ªèi c√°c b·∫£n sao ƒë√£ ƒë∆∞·ª£c t·∫£i v·ªÅ "
"b·ªüi ng∆∞·ªùi kh√°c. N·∫øu b·∫°n c√≥ commit m·∫≠t kh·∫©u, *h√£y thay ƒë·ªïi m·∫≠t kh·∫©u ngay l·∫≠p "
"t·ª©c*. N·∫øu b·∫°n ƒë√£ commit m·ªôt key, *h√£y t·∫°o l·∫°i key ƒë√≥ ngay l·∫≠p t·ª©c*. Vi·ªác "
"amend commit ƒë√£ ƒë·∫©y l√† kh√¥ng ƒë·ªß, v√¨ b·∫•t k·ª≥ ai c≈©ng c√≥ th·ªÉ ƒë√£ pull commit "
"ch·ª©a d·ªØ li·ªáu nh·∫°y c·∫£m c·ªßa b·∫°n trong th·ªùi gian ƒë·∫•y."

#. type: Plain text
#: README.md:448
msgid ""
"If you edit the file and remove the sensitive data, then run ```sh "
"(feature-branch)$ git add edited_file (feature-branch)$ git commit --amend "
"--no-edit (feature-branch)$ git push --force-with-lease origin [branch] ```"
msgstr ""
"N·∫øu b·∫°n ƒë√£ ch·ªânh s·ª≠a t·ªáp v√† x√≥a d·ªØ li·ªáu nh·∫°y c·∫£m, h√£y ch·∫°y ```sh "
"(feature-branch)$ git add EditedFile (feature-branch)$ git commit --amend "
"--no-edit (feature-branch)$ git push --force-with-lease origin [branch] ```"

#. type: Plain text
#: README.md:458
msgid ""
"If you want to remove an entire file (but keep it locally), then run ```sh "
"(feature-branch)$ git rm --cached sensitive_file echo sensitive_file >> "
".gitignore (feature-branch)$ git add .gitignore (feature-branch)$ git commit "
"--amend --no-edit (feature-branch)$ git push --force-with-lease origin "
"[branch] ``` Alternatively store your sensitive data in local environment "
"variables."
msgstr ""
"N·∫øu b·∫°n mu·ªën x√≥a to√†n b·ªô t·ªáp (nh∆∞ng gi·ªØ tr√™n local), h√£y ch·∫°y: ```sh "
"(feature-branch)$ git rm --cached sensitive_file echo sensitive_file >> "
".gitignore (feature-branch)$ git add .gitignore (feature-branch)$ git commit "
"--amend --no-edit (feature-branch)$ git push --force-with-lease origin "
"[branch] ``` Ngo√†i ra, l∆∞u tr·ªØ d·ªØ li·ªáu nh·∫°y c·∫£m c·ªßa b·∫°n trong c√°c bi·∫øn m√¥i "
"tr∆∞·ªùng (variable) c·ªßa local."

#. type: Plain text
#: README.md:460
msgid ""
"If you want to completely remove an entire file (and not keep it locally), "
"then run"
msgstr ""
"N·∫øu b·∫°n mu·ªën x√≥a ho√†n to√†n to√†n b·ªô t·ªáp (v√† kh√¥ng gi·ªØ t·ªáp t·∫°i local), h√£y "
"ch·∫°y"

#. type: Plain text
#: README.md:466
msgid ""
"```sh (feature-branch)$ git rm sensitive_file (feature-branch)$ git commit "
"--amend --no-edit (feature-branch)$ git push --force-with-lease origin "
"[branch] ```"
msgstr ""
"```sh (feature-branch)$ git rm sensitive_file (feature-branch)$ git commit "
"--amend --no-edit (feature-branch)$ git push --force-with-lease origin "
"[branch] ```"

#. type: Plain text
#: README.md:468
msgid ""
"If you have made other commits in the meantime (i.e. the sensitive data is "
"in a commit before the previous commit), you will have to rebase."
msgstr ""
"N·∫øu b·∫°n ƒë√£ th·ª±c hi·ªán c√°c commit kh√°c (t·ª©c l√† d·ªØ li·ªáu nh·∫°y c·∫£m n·∫±m t·∫°i commit "
"tr∆∞·ªõc commit m·ªõi nh·∫•t), b·∫°n s·∫Ω ph·∫£i rebase."

#. type: Plain text
#: README.md:471
msgid ""
"<a "
"href=\"#i-want-to-remove-a-large-file-from-ever-existing-in-repo-history\"></a> "
"### I want to remove a large file from ever existing in repo history"
msgstr ""
"<a "
"href=\"#i-want-to-remove-a-large-file-from-ever-existing-in-repo-history\"></a> "
"### T√¥i mu·ªën x√≥a file to qu√° ƒë·ªÉ ch∆∞a bao gi·ªù xu·∫•t hi·ªán trong l·ªãch s·ª≠ "
"repository"

#. type: Plain text
#: README.md:473
msgid ""
"If the file you want to delete is secret or sensitive, instead see [how to "
"remove sensitive "
"files](#i-accidentally-committed-and-pushed-files-containing-sensitive-data)."
msgstr ""
"N·∫øu file b·∫°n mu·ªën x√≥a c·∫ßn b·∫£o m·∫≠t hay l√† file ch∆∞a th√¥ng tin nh·∫°y c·∫£m, xem "
"ph·∫ßn [x√≥a file ch·ª©a th√¥ng tin nh·∫°y c·∫£m](#undo-sensitive-commit-push)."

#. type: Plain text
#: README.md:475
msgid ""
"Even if you delete a large or unwanted file in a recent commit, it still "
"exists in git history, in your repo's `.git` folder, and will make `git "
"clone` download unneeded files."
msgstr ""
"M·∫∑c d√π b·∫°n ƒë√£ x√≥a m·ªôt file to hay file kh√¥ng mu·ªën c√≥ trong d·ª± √°n, n√≥ c√≥ th·ªÉ "
"v·∫´n t·ªìn t·∫°i trong l·ªãch s·ª≠ git (git history) c·ªßa respository trong th∆∞ m·ª•c "
"`.git`, v√† s·∫Ω khi·∫øn c√°c l·ªánh `git clone` t·∫£i file kh√¥ng c·∫ßn thi·∫øt."

#. type: Plain text
#: README.md:477
msgid ""
"The actions in this part of the guide will require a force push, and rewrite "
"large sections of repo history, so if you are working with remote "
"collaborators, check first that any local work of theirs is pushed."
msgstr ""
"Nh·ªØng b∆∞·ªõc trong ph·∫ßn n√†y s·∫Ω y√™u c·∫ßu push √©p, v√† vi·∫øt l·∫°i ph·∫ßn n√†o l·ªãch s·ª≠ "
"git c·ªßa repository, th·∫ø n√™n n·∫øu b·∫°n l√†m vi·ªác v·ªõi nh·ªØng ng∆∞·ªùi kh√°c, ki·ªÉm tra "
"l√† nh·ªØng thay ƒë·ªïi c·ªßa h·ªç ƒë√£ ƒë∆∞·ª£c ƒë·∫©y."

#. type: Plain text
#: README.md:479
msgid ""
"There are two options for rewriting history, the built-in "
"`git-filter-branch` or "
"[`bfg-repo-cleaner`](https://rtyley.github.io/bfg-repo-cleaner/). `bfg` is "
"significantly cleaner and more performant, but it is a third-party download "
"and requires java. We will describe both alternatives. The final step is to "
"force push your changes, which requires special consideration on top of a "
"regular force push, given that a great deal of repo history will have been "
"permanently changed."
msgstr ""
"C√≥ hai l·ª±a ch·ªçn ƒë·ªÉ vi·∫øt l·∫°i l·ªãch s·ª≠, s·ª≠ d·ª•ng t√≠nh nƒÉng s√£n c√≥ "
"`git-filter-branch` ho·∫∑c d√πng "
"[`bfg-repo-cleaner`](https://rtyley.github.io/bfg-repo-cleaner/). `bfg` thao "
"t√°c s·∫°ch h∆°n v√† nhanh h∆°n, nh∆∞ng ƒë√¢y l√† ph·∫ßn m·ªÅm b√™n th·ª© ba v√† c·∫ßn c√≥ "
"Java. Ch√∫ng ta s·∫Ω xem c·∫£ hai c√°ch. B∆∞·ªõc cu·ªëi c√πng l√† push √©p thay ƒë·ªïi c·ªßa "
"b·∫°n, l·∫ßn n√†y s·∫Ω c√≤n c·∫ßn ch√∫ √Ω xem x√©t h∆°n c√°c push √©p b√¨nh th∆∞·ªùng b·ªüi v√¨ m·ªôt "
"ph·∫ßn kh√¥ng nh·ªè l·ªãch s·ª≠ repository s·∫Ω thay ƒë·ªïi vƒ©nh vi·ªÖn."

#. type: Plain text
#: README.md:481
msgid "#### Recommended Technique: Use third-party bfg"
msgstr "#### C√°ch khuy·∫øn kh√≠ch: S·ª≠ d·ª•ng d·ªãch v·ª• b√™n th·ª© ba bfg"

#. type: Plain text
#: README.md:483
msgid ""
"Using bfg-repo-cleaner requires java. Download the bfg jar from the link "
"[here](https://rtyley.github.io/bfg-repo-cleaner/). Our examples will use "
"`bfg.jar`, but your download may have a version number, "
"e.g. `bfg-1.13.0.jar`."
msgstr ""
"S·ª≠ d·ª•ng bfg-repo-cleaner c·∫ßn c√≥ Java. T·∫£i file d·∫°ng .jar cho ph·∫ßn m·ªÅm bfg "
"v·ªõi ƒë∆∞·ªùng link [n√†y](https://rtyley.github.io/bfg-repo-cleaner/). V√≠ d·ª• t·∫°i "
"ƒë√¢y s·∫Ω d√πng `bfg.jar`, nh∆∞ng file b·∫°n t·∫£i xu·ªëng c√≥ th·ªÉ c√≥ th√™m s·ªë phi√™n b·∫£n "
"nh∆∞ `bfg-1.13.0.jar`."

#. type: Plain text
#: README.md:485
msgid "To delete a specific file."
msgstr "ƒê·ªÉ x√≥a m·ªôt file, d√πng l·ªánh:"

#. type: Plain text
#: README.md:491
msgid ""
"```sh (main)$ git rm path/to/filetoremove (main)$ git commit -m \"Commit "
"removing filetoremove\" (main)$ java -jar ~/Downloads/bfg.jar --delete-files "
"filetoremove ```"
msgstr ""
"```sh (main)$ git rm path/to/FileToRemove (main)$ git commit -m \"Commit "
"removing filetoremove\" (main)$ java -jar ~/Downloads/bfg.jar --delete-files "
"FileToRemove ```"

#. type: Plain text
#: README.md:493
msgid ""
"Note that in bfg you must use the plain file name even if it is in a "
"subdirectory."
msgstr "L∆∞u √Ω l√† v·ªõi bfg b·∫°n d√πng t·ªÉn c·ªßa file ch·ª© kh√¥ng ph·∫£i ƒë∆∞·ªùng d·∫´n ƒë·∫øn file."

#. type: Plain text
#: README.md:495
msgid "You can also delete a file by pattern, e.g.:"
msgstr ""
"B·∫°n c≈©ng c√≥ th·ªÉ x√≥a file d∆∞·ª£ng theo m·ªôt khu√¥n m·∫´u, v√≠ d·ª• x√≥a t·∫•t c·∫£ file "
"d·∫°ng .jpg:"

#. type: Plain text
#: README.md:501
msgid ""
"```sh (main)$ git rm *.jpg (main)$ git commit -m \"Commit removing *.jpg\" "
"(main)$ java -jar ~/Downloads/bfg.jar --delete-files *.jpg ```"
msgstr ""
"```sh (main)$ git rm *.jpg (main)$ git commit -m \"Commit removing *.jpg\" "
"(main)$ java -jar ~/Downloads/bfg.jar --delete-files *.jpg ```"

#. type: Plain text
#: README.md:503
msgid ""
"With bfg, the files that exist on your latest commit will not be "
"affected. For example, if you had several large .tga files in your repo, and "
"then in an earlier commit, you deleted a subset of them, this call does not "
"touch files present in the latest commit"
msgstr ""
"V·ªõi bfg, the files that exist on your latest commit will not be "
"affected. For example, if you had several large .tga files in your repo, and "
"then in an earlier commit, you deleted a subset of them, this call does not "
"touch files present in the latest commit"

#. type: Plain text
#: README.md:505
msgid ""
"Note, if you renamed a file as part of a commit, e.g. if it started as "
"`LargeFileFirstName.mp4` and a commit changed it to "
"`LargeFileSecondName.mp4`, running `java -jar ~/Downloads/bfg.jar "
"--delete-files LargeFileSecondName.mp4` will not remove it from git "
"history. Either run the `--delete-files` command with both filenames, or "
"with a matching pattern."
msgstr ""
"L∆∞u √Ω, n·∫øu b·∫°n thay ƒë·ªïi t√™n file trong m·ªôt commit tr∆∞·ªõc, v√≠ d·ª•: n·∫øu t·ªáp b·∫Øt "
"ƒë·∫ßu v·ªõi t√™n `LargeFileFirstName.mp4` v√† m·ªôt commit ƒë·ªïi t√™n t·ªáp th√†nh "
"`LargeFileSecondName.mp4`, ch·∫°y l·ªánh `java -jar ~/Downloads/bfg.jar "
"--delete-files LargeFileSecondName.mp4` s√© kh√¥ng x√≥a file trong l·ªãch s·ª≠ "
"git. Ho·∫∑c l√† ch·∫°y l·ªánh `--delete-files` v·ªõi c·∫£ hai t√™n, ho·∫∑c v·ªõi khu√¥n m·∫´u "
"nh∆∞ tr√™n."

#. type: Plain text
#: README.md:507
msgid "#### Built-in Technique: Use git-filter-branch"
msgstr "#### C√°ch c√≥ s·∫µn: S·ª≠ d·ª•ng git-filter-branch"

#. type: Plain text
#: README.md:509
msgid ""
"`git-filter-branch` is more cumbersome and has less features, but you may "
"use it if you cannot install or run `bfg`."
msgstr ""
"`git-filter-branch` n·∫∑ng h∆°n v√† √≠t t√≠nh nƒÉng h∆°n, nh∆∞ng b·∫°n c√≥ th·ªÉ d√πng c√°ch "
"n√†y n·∫øu kh√¥ng th·ªÉ c√†i hay ch·∫°y `bfg`."

#. type: Plain text
#: README.md:511
msgid ""
"In the below, replace `filepattern` may be a specific name or pattern, "
"e.g. `*.jpg`. This will remove files matching the pattern from all history "
"and branches."
msgstr ""
"Trong l·ªánh b√™n d∆∞·ªõi, thay `filepattern` v·ªõi t√™n file ho·∫∑c khu√¥ng m·∫´u, "
"v.d. `*.jpg`. L·ªánh n√†y s·∫Ω x√≥a file theo khu√¥n m·∫´u kh·ªèi t·∫•t c·∫£ l·ªãch s·ª≠ c·ªßa "
"t·∫•t c·∫£ c√°c nh√°nh."

#. type: Plain text
#: README.md:515
msgid ""
"```sh (main)$ git filter-branch --force --index-filter 'git rm --cached "
"--ignore-unmatch filepattern' --prune-empty --tag-name-filter cat -- --all "
"```"
msgstr ""
"```sh (main)$ git filter-branch --force --index-filter 'git rm --cached "
"--ignore-unmatch filepattern' --prune-empty --tag-name-filter cat -- --all "
"```"

#. type: Plain text
#: README.md:517
msgid "Behind-the-scenes explanation:"
msgstr "Gi·∫£i th√≠ch l·ªánh tr√™n:"

#. type: Plain text
#: README.md:519
msgid ""
"`--tag-name-filter cat` is a cumbersome, but simplest, way to apply the "
"original tags to the new commits, using the command cat."
msgstr ""
"`--tag-name-filter cat` kh√° l√† n·∫∑ng, nh∆∞ng l√† c√°ch ƒë∆°n gi·∫£n nh·∫•t ƒë·ªÉ gi·ªØ "
"nguy√™n c√°c tags cho c√°c commit m·ªõi b·∫±ng c√°ch s·ª≠ d·ª•ng l·ªánh `cat`."

#. type: Plain text
#: README.md:521
msgid "`--prune-empty` removes any now-empty commits."
msgstr "`--prune-empty` x√≥a nh·ªØng commit b√¢y gi·ªù ƒë·ªÉ tr·ªëng r·ªóng."

#. type: Plain text
#: README.md:523
msgid "#### Final Step: Pushing your changed repo history"
msgstr "#### B∆∞·ªõc cu·ªëi: ƒê·∫©y l·ªãch s·ª≠ ƒë√£ thay ƒë·ªïi c·ªßa repository"

#. type: Plain text
#: README.md:530
msgid ""
"Once you have removed your desired files, test carefully that you haven't "
"broken anything in your repo - if you have, it is easiest to re-clone your "
"repo to start over.  To finish, optionally use git garbage collection to "
"minimize your local .git folder size, and then force push.  ```sh (main)$ "
"git reflog expire --expire=now --all && git gc --prune=now --aggressive "
"(main)$ git push origin --force --tags ```"
msgstr ""
"M·ªôt khi b·∫°n ƒë√£ x√≥a file, ki·ªÉm tra th·∫≠t c·∫©n th·∫≠n l√† b·∫°n kh√¥ng l√†m h·ªèng c√°i g√¨ "
"trong repo - v√† n·∫øu b·∫°n ƒë√£ l√†m h·ªèng c√°i g√¨ ƒë√≥, d·ªÖ nh·∫•t l√† clone repo l·∫°i v√† "
"b·∫Øt ƒë·∫ßu t·ª´ ƒë·∫ßu.  ƒê·ªÉ k·∫øt th√∫c, b·∫°n c√≥ th·ªÉ d√πng ch·ª©c nƒÉng thu h·ªìi r√°c (garbage "
"collection) ƒë·ªÉ gi·∫£m thi·ªÉu k√≠ch c·ª° t·ªáp .git v√† r·ªìi push √©p. c ```sh (main)$ "
"git reflog expire --expire=now --all && git gc --prune=now --aggressive "
"(main)$ git push origin --force --tags ```"

#. type: Plain text
#: README.md:536
msgid ""
"Since you just rewrote the entire git repo history, the `git push` operation "
"may be too large, and return the error `‚ÄúThe remote end hung up "
"unexpectedly‚Äù`. If this happens, you can try increasing the git post buffer: "
"```sh (main)$ git config http.postBuffer 524288000 (main)$ git push --force "
"```"
msgstr ""
"V√¨ b·∫°n v·ª´a vi·∫øt l·∫°i to√†n b·ªô l·ªãch s·ª≠ git repository, l·ªánh `git push` c√≥ th·ªÉ "
"qu√° to ƒë·ªÉ thi h√†nh, v√† g·ª≠i l·∫°i th√¥ng ƒëi·ªáp l·ªói (error) `‚ÄúThe remote end hung "
"up unexpectedly‚Äù`. N·∫øu vi·ªác n√†y x·∫£y ra, b·∫°n c√≥ th·ªÉ th·ª≠ tƒÉng post buffer c·ªßa "
"git: ```sh (main)$ git config http.postBuffer 524288000 (main)$ git push "
"--force ```"

#. type: Plain text
#: README.md:542
msgid ""
"If this does not work, you will need to manually push the repo history in "
"chunks of commits. In the command below, try increasing `<number>` until the "
"push operation succeeds.  ```sh (main)$ git push -u origin "
"HEAD~<number>:refs/head/main --force ``` Once the push operation succeeds "
"the first time, decrease `<number>` gradually until a conventional `git "
"push` succeeds."
msgstr ""
"N·∫øu c√°ch n√†y kh√¥ng hi·ªáu qu·∫£, b·∫°n s·∫Ω ph·∫£i push th·ªß c√¥ng l·ªãch s·ª≠ repo t·ª´ng c·ª•c "
"m·ªôt. V·ªõi l·ªánh b√™n d∆∞·ªõi, d·∫ßn d·∫ßn tƒÉng con s·ªë cho `<s·ªë c·ª•c>` ƒë·∫øn khi n√†o l·ªánh "
"push th√†nh c√¥ng.  ```sh (main)$ git push -u origin HEAD~<s·ªë "
"c·ª•c>:refs/head/main --force ``` M·ªôt khi l·ªánh push th√†nh c√¥ng, d·∫ßn d·∫ßn gi·∫£m "
"thi·ªÉu `<s·ªë c·ª•c>` cho ƒë·∫øn khi m·ªôt l·ªánh `git push` b√¨nh th∆∞·ªùng th√†nh c√¥ng."

#. type: Plain text
#: README.md:545
msgid ""
"<a "
"href=\"i-need-to-change-the-content-of-a-commit-which-is-not-my-last\"></a> "
"### I need to change the content of a commit which is not my last"
msgstr ""
"<a "
"href=\"i-need-to-change-the-content-of-a-commit-which-is-not-my-last\"></a> "
"### T√¥i c·∫ßn thay ƒë·ªïi n·ªôi dung c·ªßa m·ªôt commit nh∆∞ng kh√¥ng ph·∫£i l√† c√°i m·ªõi "
"nh·∫•t"

#. type: Plain text
#: README.md:547
msgid ""
"Consider you created some (e.g. three) commits and later realize you missed "
"doing something that belongs contextually into the first of those "
"commits. This bothers you, because if you'd create a new commit containing "
"those changes, you'd have a clean code base, but your commits weren't atomic "
"(i.e. changes that belonged to each other weren't in the same commit). In "
"such a situation you may want to change the commit where these changes "
"belong to, include them and have the following commits unaltered. In such a "
"case, `git rebase` might save you."
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n ƒë√£ c√≥ v√†i (v.d. ba) commit v√† sau nh·∫≠n ra l√† b·∫°n qu√™n m·∫•t kh√¥ng "
"cho v√†o m·ªôt th·ª© g√¨ ƒë√≥ h·ª£p h∆°n v·ªõi commit ƒë·∫ßu ti√™n. Vi·ªác n√†y l√†m phi·ªÅn b·∫°n v√¨ "
"m·∫∑c d√π n·∫øu ti·∫øp t·ª•c commit b·∫°n s·∫Ω c√≥ l·ªãch s·ª≠ s·∫°ch s·∫Ω nh∆∞ng commit c·ªßa b·∫°n "
"kh√¥ng nguy√™n ch·∫•t (nh·ªØng thay ƒë·ªïi li√™n quan v·ªõi nhau n√™n ·ªü c√πng m·ªôt "
"commit). Trong tr∆∞·ªùng h·ª£p nh∆∞ v·∫≠y, b·∫°n ch·∫Øc mu·ªën cho th√™m nh·ªØng thay ƒë·ªïi "
"li√™n quan v√†o commit mong mu·ªën nh∆∞ng kh√¥ng mu·ªën nh·ªØng commit sau ti·∫øp c≈©ng "
"ph·∫£i s·ª≠a theo. Trong tr∆∞·ªùng h·ª£p nh∆∞ v√¢y, `git rebase` c√≥ th·ªÉ c·ª©u b·∫°n."

#. type: Plain text
#: README.md:549
msgid ""
"Consider a situation where you want to change the third last commit you "
"made."
msgstr "Hay xem tr∆∞·ªùng h·ª£p m√† b·∫°n mu·ªën thay ƒë·ªïi commit s·ªë ba n·∫øu ƒë·∫øm ng∆∞·ª£c."

#. type: Plain text
#: README.md:553
msgid "```sh (your-branch)$ git rebase -i HEAD~4 ```"
msgstr "```sh (nh√°nh-b·∫°n)$ git rebase -i HEAD~4 ```"

#. type: Plain text
#: README.md:555
msgid ""
"gets you into interactive rebase mode, which allows you to edit any of your "
"last three commits. A text editor pops up, showing you something like"
msgstr ""
"L·ªánh tr√™n ƒë∆∞a b·∫°n v√†o mode (ch·∫ø ƒë·ªô) rebase t∆∞∆°ng t√°c (interactive rebase), "
"ch·∫ø ƒë·ªô cho ph√©p b·∫°n edit ba commit m·ªõi nh·∫•t. M·ªôt tr√¨nh so·∫°n th·∫£o (text "
"editor) s·∫Ω b·∫≠t l√™n tr√¥ng gi·ªëng nh∆∞ sau:"

#. type: Plain text
#: README.md:561
msgid ""
"```sh pick 9e1d264 The third last commit pick 4b6e19a The second to last "
"commit pick f4037ec The last commit ```"
msgstr ""
"```sh pick 9e1d264 commit tr∆∞·ªõc ba pick 4b6e19a commit tr∆∞·ªõc hai pick "
"f4037ec commit tr∆∞·ªõc ```"

#. type: Plain text
#: README.md:563
msgid "which you change into"
msgstr "v√† b·∫°n thay/vi·∫øt th√†nh:"

#. type: Plain text
#: README.md:569
msgid ""
"```sh edit 9e1d264 The third last commit pick 4b6e19a The second to last "
"commit pick f4037ec The last commit ```"
msgstr ""
"```sh edit 9e1d264 commit tr∆∞·ªõc ba pick 4b6e19a commit tr∆∞·ªõc hai pick "
"f4037ec commit tr∆∞·ªõc ```"

#. type: Plain text
#: README.md:571
msgid ""
"This tells rebase that you want to edit your third last commit and keep the "
"other two unaltered. Then you'll save (and close) the editor. Git will then "
"start to rebase. It stops on the commit you want to alter, giving you the "
"chance to edit that commit. Now you can apply the changes which you missed "
"applying when you initially committed that commit. You do so by editing and "
"staging them. Afterwards you'll run"
msgstr ""
"L·ªánh n√†y b·∫£o rebase l√† b·∫°n mu·ªën thay ƒë·ªïi commit tr∆∞·ªõc ba v√† gi·ªØ hai commit "
"kia kh√¥ng thay ƒë·ªïi. Sau ƒë√≥ b·∫°n save (v√† ƒë√≥ng) tr√¨nh so·∫°n th·∫£o. Git b√¢y gi·ªù "
"s·∫Ω b·∫Øt ƒë·∫ßu rebase. N√≥ d·ª´ng l·∫°i ·ªü commit b·∫°n ƒë·ªÉ l√† edit v√† cho b·∫°n c∆° h·ªôi "
"thay ƒë·ªïi commit ƒë·∫•y. B√¢y gi·ªù b·∫°n c√≥ th·ªÉ cho th√™m nh·ªØng thay ƒë·ªïi b·∫°n l·ª° kh√¥ng "
"cho v√†o l·∫ßn ƒë·∫ßu. ƒê·ªÉ l√†m th·∫ø, b·∫°n edit r·ªìi stage nh·ªØng thay ƒë·ªïi ƒë·∫•yNow you "
"can apply the changes which you missed applying when you initially committed "
"that commit. Sau ƒë√≥ b·∫°n ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:575
msgid "```sh (your-branch)$ git commit --amend ```"
msgstr "```sh (your-branch)$ git commit --amend ```"

#. type: Plain text
#: README.md:577
msgid ""
"which tells Git to recreate the commit, but to leave the commit message "
"unedited. Having done that, the hard part is solved."
msgstr ""
"L·ªánh b·∫£o Git l√† c·∫ßn t·∫°o l·∫°i commit, nh∆∞ng gi·ªØ nguy√™n th√¥ng ƒëi·ªáp "
"commit. which tells Git to recreate the commit, but to leave the commit "
"message unedited. Th·∫ø l√† xong ph·∫ßn kh√≥ nh·∫•t. Cu·ªëi c√πng l√† ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:581
msgid "```sh (your-branch)$ git rebase --continue ```"
msgstr "```sh (your-branch)$ git rebase --continue ```"

#. type: Plain text
#: README.md:583
msgid "will do the rest of the work for you."
msgstr "L·ªánh tr√™n s·∫Ω gi·∫£i quy·∫øt ph·∫ßn c√≤n l·∫°i."

#. type: Plain text
#: README.md:585
msgid "## Staging"
msgstr "## Staging (s√¢n chuy·ªÉn ti·∫øp)"

#. type: Plain text
#: README.md:587
msgid ""
"<a "
"href=\"#i-want-to-stage-all-tracked-files-and-leave-untracked-files\"></a>"
msgstr ""
"<a "
"href=\"#i-want-to-stage-all-tracked-files-and-leave-untracked-files\"></a>"

#. type: Plain text
#: README.md:589
msgid "### I want to stage all tracked files and leave untracked files"
msgstr ""
"### T√¥i mu·ªën n√¢ng l√™n stage t·∫•t c·∫£ file ƒëang theo d√µi v√† b·ªè qua file kh√¥ng "
"theo d√µi"

#. type: Plain text
#: README.md:593
msgid "```sh $ git add -u ```"
msgstr "```sh $ git add -u ```"

#. type: Plain text
#: README.md:595
msgid "#### To stage part of tracked files"
msgstr "#### Ch·ªâ n√¢ng m·ªôt ph·∫ßn c√°c file ƒëang theo d√µi"

#. type: Plain text
#: README.md:599
msgid "```sh # to stage files with ext .txt $ git add -u *.txt"
msgstr "```sh # ƒê·ªÉ n√¢ng c√°c file d·∫°ng .txt $ git add -u *.txt"

#. type: Plain text
#: README.md:603
msgid "# to stage all files inside directory src $ git add -u src/ ```"
msgstr "# ƒê·ªÉ nang c√°c file trong thu m·ª•c src $ git add -u src/ ```"

#. type: Plain text
#: README.md:606
msgid ""
"<a href=\"#i-need-to-add-staged-changes-to-the-previous-commit\"></a> ### I "
"need to add staged changes to the previous commit"
msgstr ""
"<a href=\"#i-need-to-add-staged-changes-to-the-previous-commit\"></a> ### "
"T√¥i c·∫ßn cho th√™m c√°c thay ƒë·ªïi ƒëang trong stage v√†o commit tr∆∞·ªõc"

#. type: Plain text
#: README.md:610
msgid "```sh (my-branch*)$ git commit --amend ```"
msgstr "```sh (my-branch*)$ git commit --amend ```"

#. type: Plain text
#: README.md:612
msgid ""
"If you already know you don't want to change the commit message, you can "
"tell git to reuse the commit message:"
msgstr ""
"N·∫øu b·∫°n ƒë√£ bi·∫øt b·∫°n kh√¥ng mu·ªën thay ƒë·ªïi th√¥ng ƒëi·ªáp commit, b·∫°n c√≥ th·ªÉ y√™u "
"c·∫ßu git s·ª≠ d·ª•ng l·∫°i commit message:"

#. type: Plain text
#: README.md:616
msgid "```sh (my-branch*)$ git commit --amend -C HEAD ```"
msgstr "```sh (my-branch*)$ git commit --amend -C HEAD ```"

#. type: Plain text
#: README.md:619
msgid ""
"<a name=\"commit-partial-new-file\"></a> ### I want to stage part of a new "
"file, but not the whole file"
msgstr ""
"<a name=\"commit-partial-new-file\"></a> ### T√¥i mu·ªën stage m·ªôt ph·∫ßn c·ªßa m·ªôt "
"file m·ªõi, nh∆∞ng kh√¥ng ph·∫£i to√†n b·ªô file"

#. type: Plain text
#: README.md:621
msgid "Normally, if you want to stage part of a file, you run this:"
msgstr "Th√¥ng th∆∞·ªùng, n·∫øu b·∫°n mu·ªën stage m·ªôt ph·∫ßn c·ªßa m·ªôt file, b·∫°n ch·∫°y l·ªánh n√†y:"

#. type: Plain text
#: README.md:625
msgid "```sh $ git add --patch filename.x ```"
msgstr "```sh $ git add --patch filename.x ```"

#. type: Plain text
#: README.md:627
msgid ""
"`-p` will work for short. This will open interactive mode. You would be able "
"to use the `s` option to split the commit - however, if the file is new, you "
"will not have this option. To add a new file, do this:"
msgstr ""
"B·∫°n c√≥ th·ªÉ d√πng `-p` thay `--patch` cho ng·∫Øn. L·ªánh n√†y s·∫Ω m·ªü ch·∫ø ƒë·ªô "
"interactive. B·∫°n c√≥ th·ªÉ cho th√™m `s` ƒë·ªÉ c·∫Øt commit - tuy nhi√™n, n·∫øu l√† file "
"m·ªõi, b·∫°n s·∫Ω kh√¥ng c√≥ l·ª±a ch·ªçn n√†y. ƒê·ªÉ th√™m m·ªôt file m·ªõi, l√†m nh∆∞ sau:"

#. type: Plain text
#: README.md:631
msgid "```sh $ git add -N filename.x ```"
msgstr "```sh $ git add -N filename.x ```"

#. type: Plain text
#: README.md:634
msgid ""
"Then, you will need to use the `e` option to manually choose which lines to "
"add. Running `git diff --cached` or `git diff --staged` will show you which "
"lines you have staged compared to which are still saved locally."
msgstr ""
"Sau ƒë√≥, b·∫°n s·∫Ω c·∫ßn s·ª≠ d·ª•ng `e` ƒë·ªÉ th·ªß c√¥ng th√™m d√≤ng. Ch·∫°y l·ªánh `git diff "
"--cached` ho·∫∑c `git diff --staged` s·∫Ω cho b·∫°n th·∫•y nh·ªØng d√≤ng b·∫°n ƒë√£ stage "
"so v·ªõi nh·ªØng d√≤ng v·∫´n l∆∞u ·ªü local."

#. type: Plain text
#: README.md:637
msgid ""
"<a href=\"stage-in-two-commits\"></a> ### I want to add changes in one file "
"to two different commits"
msgstr ""
"<a href=\"stage-in-two-commits\"></a> ### T√¥i mu·ªën th√™m c√°c thay ƒë·ªïi trong "
"m·ªôt file v√†o 2 commit kh√°c nhau"

#. type: Plain text
#: README.md:639
msgid ""
"`git add` will add the entire file to a commit. `git add -p` will allow to "
"interactively select which changes you want to add."
msgstr ""
"`git add` s·∫Ω th√™m to√†n b·ªô file v√†o m·ªôt commit. `git add -p` s·∫Ω cho v√†o ch·∫ø "
"ƒë·ªô t∆∞∆°ng t√°c ƒë·ªÉ ch·ªçn nh·ªØng thay ƒë·ªïi b·∫°n mu·ªën th√™m v√†o."

#. type: Plain text
#: README.md:642
msgid ""
"<a href=\"selective-unstage-edits\"></a> ### I staged too many edits, and I "
"want to break them out into a separate commit"
msgstr ""
"<a href=\"selective-unstage-edits\"></a> ### T√¥i cho l√™n stage qu√° nhi·ªÅu "
"thay ƒë·ªïi, v√† t√¥i mu·ªën t√°ch ra th√†nh c√°c commit kh√°c nhau"

#. type: Plain text
#: README.md:644
msgid ""
"`git reset -p` will open a patch mode reset dialog.  This is similar to `git "
"add -p`, except that selecting \"yes\" will unstage the change, removing it "
"from the upcoming commit."
msgstr ""
"`git reset -p` s·∫Ω m·ªü ch·∫ø ƒë·ªô patch v√† h·ªôp tho·∫°i ƒë·ªÉ reset. Vi·ªác n√†y s·∫Ω gi·ªëng "
"nh∆∞ v·ªõi l·ªánh `git add -p`, ngo·∫°i tr·ª´ l√† vi·ªác ch·ªçn \"yes\" s·∫Ω ƒë∆∞a thay ƒë·ªïi "
"kh·ªèi stage, lo·∫°i tr·ª´ n√≥ kh·ªèi commit ti·∫øp ƒë·∫øn."

#. type: Plain text
#: README.md:647
msgid ""
"<a href=\"unstaging-edits-and-staging-the-unstaged\"></a> ### I want to "
"stage my unstaged edits, and unstage my staged edits"
msgstr ""
"<a href=\"unstaging-edits-and-staging-the-unstaged\"></a> ### T√¥i mu·ªën cho "
"l√™n stage c√°c ch·ªânh s·ª≠a ch∆∞a ƒë∆∞·ª£c stage v√† h√£ kh·ªèi stage c√°c ch·ªânh s·ª≠a ƒë√£ "
"stage"

#. type: Plain text
#: README.md:649
msgid ""
"In many cases, you should unstage all of your staged files and then pick the "
"file you want and commit it. However, if you want to switch the staged and "
"unstaged edits, you can create a temporary commit to store your staged "
"files, stage your unstaged files and then stash them. Then, reset the "
"temporary commit and pop your stash."
msgstr ""
"Ph·∫ßn l·ªõn th·ªùi gian, b·∫°n n√™n h·∫° t·∫•t c·∫£ c√°c file ƒë√£ tr√™n stage v√† ch·ªçn l·∫°i "
"nh·ªØng file b·∫°n mu·ªën commit.Nh∆∞ng gi·∫£ s·ª≠ b·∫°n mu·ªën thay c√°c thay ƒë·ªïi l√™n v√† h·∫° "
"stage, b·∫°n c√≥ th·ªÉ t·∫°o m·ªôt commit t·∫°m th·ªùi, n√¢ng l√™n stage c√°c thay ƒë·ªïi, r·ªìi "
"stash (c·∫•t) n√≥. Sau ƒë√≥, reset c√°i commit t·∫°m th·ªùi r·ªìi pop c√°i stage b·∫°n v·ª´a "
"c·∫•t."

#. type: Plain text
#: README.md:657
msgid ""
"```sh $ git commit -m \"WIP\" $ git add . # This will also add untracked "
"files.  $ git stash $ git reset HEAD^ $ git stash pop --index 0 ```"
msgstr ""
"```sh $ git commit -m \"WIP\" $ git add . # \".\" s·∫Ω th√™m t·∫•t c·∫£ file ch∆∞a "
"theo d√µi $ git stash $ git reset HEAD^ $ git stash pop --index 0 ```"

#. type: Plain text
#: README.md:660
msgid ""
"NOTE 1: The reason to use `pop` here is want to keep idempotent as much as "
"possible.  NOTE 2: Your staged files will be marked as unstaged if you don't "
"use the `--index` flag. ([This "
"link](https://stackoverflow.com/questions/31595873/git-stash-with-staged-files-does-stash-convert-staged-files-to-unstaged?answertab=active#tab-top) "
"explains why.)"
msgstr ""
"GHI CH√ö 1: L√Ω do ƒë·ªÉ d√πng `pop` l√† ƒë·ªÉ gi·ªØ nguy√™n c√°c thay ƒë·ªïi nh·∫•t c√≥ th·ªÉ.  "
"GHI CH√ö 2: C√°c file ƒë√£ n√¢ng l√™n stage s·∫Ω b·ªã h·∫° n·∫øu kh√¥ng c√≥ th√™m c·ªù "
"`--index`. "
"([Link](https://stackoverflow.com/questions/31595873/git-stash-with-staged-files-does-stash-convert-staged-files-to-unstaged?answertab=active#tab-top) "
"explains why.)"

#. type: Plain text
#: README.md:662
msgid "## Unstaged Edits"
msgstr "## Thay ƒë·ªïi ch∆∞a l√™n s√¢n (Unstaged Edits)"

#. type: Plain text
#: README.md:665
msgid ""
"<a href=\"move-unstaged-edits-to-new-branch\"></a> ### I want to move my "
"unstaged edits to a new branch"
msgstr ""
"<a href=\"move-unstaged-edits-to-new-branch\"></a> ### T√¥i mu·ªën di chuy·ªÉn "
"c√°c ch·ªânh s·ª≠a ch∆∞a l√™n stage sang m·ªôt nh√°nh m·ªõi"

#. type: Plain text
#: README.md:669
msgid "```sh $ git checkout -b my-branch ```"
msgstr "```sh $ git checkout -b nh√°nh-m·ªõi ```"

#. type: Plain text
#: README.md:672
msgid ""
"<a href=\"move-unstaged-edits-to-old-branch\"></a> ### I want to move my "
"unstaged edits to a different, existing branch"
msgstr ""
"<a href=\"move-unstaged-edits-to-old-branch\"></a> ### T√¥i mu·ªën di chuy·ªÉn "
"c√°c ch·ªânh s·ª≠a ch∆∞a stage c·ªßa t√¥i ƒë·∫øn m·ªôt nh√°nh kh√°c ƒë√£ t·ªìn t·∫°i"

#. type: Plain text
#: README.md:678
msgid "```sh $ git stash $ git checkout my-branch $ git stash pop ```"
msgstr "```sh $ git stash $ git checkout nh√°nh-t·ªìn-t·∫°i $ git stash pop ```"

#. type: Plain text
#: README.md:681
msgid ""
"<a href=\"i-want-to-discard-my-local-uncommitted-changes\"></a> ### I want "
"to discard my local uncommitted changes (staged and unstaged)"
msgstr ""
"<a href=\"i-want-to-discard-my-local-uncommitted-changes\"></a> ### T√¥i mu·ªën "
"b·ªè c√°c thay ƒë√¥i ch∆∞a trong commit t·∫°i local (ƒë√£ l√™n ho·∫∑c ch∆∞a l√™n stage)"

#. type: Plain text
#: README.md:683
msgid ""
"If you want to discard all your local staged and unstaged changes, you can "
"do this:"
msgstr ""
"N·∫øu b·∫°n mu·ªën b·ªè t·∫•t c·∫£ c√°c thay ƒë·ªïi ƒë√£ l√™n ho·∫∑c ch∆∞a l√™n stage t·∫°i local c·ªßa "
"b·∫°n, b·∫°n c√≥ th·ªÉ l√†m nh∆∞ sau:"

#. type: Plain text
#: README.md:689
msgid "```sh (my-branch)$ git reset --hard # or (main)$ git checkout -f ```"
msgstr "```sh (my-branch)$ git reset --hard # ho·∫∑c (main)$ git checkout -f ```"

#. type: Plain text
#: README.md:691
msgid "This will unstage all files you might have staged with `git add`:"
msgstr ""
"L·ªánh sau s·∫Ω h·∫° kh·ªèi stage t·∫•t c·∫£ thay ƒë·ªïi b·∫°n ƒë√£ cho l√™n stage v·ªõi `git "
"add`:"

#. type: Plain text
#: README.md:695
msgid "```sh $ git reset ```"
msgstr "```sh $ git reset ```"

#. type: Plain text
#: README.md:697
msgid ""
"This will revert all local uncommitted changes (should be executed in repo "
"root):"
msgstr ""
"L·ªánh sau s·∫Ω ƒë·∫£o ng∆∞·ª£c t·∫•t c·∫£ c√°c thay ƒë·ªïi ch∆∞a commit t·∫°i local (n√™n ch·∫°y "
"t·∫°i th∆∞ m·ª•c g·ªëc repo):"

#. type: Plain text
#: README.md:701
msgid "```sh $ git checkout .  ```"
msgstr "```sh $ git checkout .  ```"

#. type: Plain text
#: README.md:703
msgid "You can also revert uncommitted changes to a particular file or directory:"
msgstr ""
"B·∫°n c≈©ng c√≥ th·ªÉ ƒë·∫£o ng∆∞·ª£c c√°c thay ƒë·ªïi ch∆∞a commit cho m·ªôt file ho·∫∑c m·ªôt th∆∞ "
"m·ª•c c·ª• th·ªÉ:"

#. type: Plain text
#: README.md:707
msgid "```sh $ git checkout [some_dir|file.txt] ```"
msgstr "```sh $ git checkout [th∆∞_m·ª•c|file.txt] ```"

#. type: Plain text
#: README.md:709
msgid ""
"Yet another way to revert all uncommitted changes (longer to type, but works "
"from any subdirectory):"
msgstr ""
"Tuy nhi√™n, m·ªôt c√°ch kh√°c ƒë·ªÉ ƒë·∫£o ng∆∞·ª£c t·∫•t c·∫£ c√°c thay ƒë·ªïi ch∆∞a commit (d√†i "
"h∆°n ƒë·ªÉ nh·∫≠p, nh∆∞ng ho·∫°t ƒë·ªông t·ª´ b·∫•t k·ª≥ th∆∞ m·ª•c con n√†o):"

#. type: Plain text
#: README.md:713
msgid "```sh $ git reset --hard HEAD ```"
msgstr "```sh $ git reset --hard HEAD ```"

#. type: Plain text
#: README.md:715
msgid ""
"This will remove all local untracked files, so only files tracked by Git "
"remain:"
msgstr ""
"L·ªánh tr√™n s·∫Ω xo√° t·∫•t c·∫£ c√°c file ch∆∞a ƒë∆∞·ª£c theo d√µi(untracked) t·∫°i local, do "
"ƒë√≥, ch·ªâ c√°c file ƒë√£ ƒë∆∞·ª£c theo d√µi b·ªüi git (tracked) c√≤n t·ªìn:"

#. type: Plain text
#: README.md:719
msgid "```sh $ git clean -fd ```"
msgstr "```sh $ git clean -fd ```"

#. type: Plain text
#: README.md:721
msgid "`-x` will also remove all ignored files."
msgstr "Th√™m c·ªù `-x` ƒë·ªÉ xo√° t·∫•t c·∫£ c√°c file ƒë√£ ignore."

#. type: Plain text
#: README.md:723
msgid "### I want to discard specific unstaged changes"
msgstr "### T√¥i mu·ªën lo·∫°i b·ªè c√°c thay ƒë·ªïi c·ª• th·ªÉ ch∆∞a l√™n stage"

#. type: Plain text
#: README.md:725
msgid "When you want to get rid of some, but not all changes in your working copy."
msgstr ""
"Khi b·∫°n mu·ªën lo·∫°i b·ªè m·ªôt s·ªë, nh∆∞ng kh√¥ng ph·∫£i t·∫•t c·∫£, c√°c thay ƒë·ªïi trong b·∫£n "
"sao l√†m vi·ªác c·ªßa b·∫°n."

#. type: Plain text
#: README.md:727
msgid "Checkout undesired changes, keep good changes."
msgstr "Checkout c√°c thay ƒë·ªïi kh√¥ng mong mu·ªën, gi·ªØ c√°c thay ƒë·ªïi t·ªët."

#. type: Plain text
#: README.md:732
msgid ""
"```sh $ git checkout -p # Answer y to all of the snippets you want to drop "
"```"
msgstr ""
"```sh $ git checkout -p # Tr·∫£ l·ªùi y ƒë·ªëi v·ªõi nh·ªØng thay ƒë·ªïi b·∫°n kh√¥ng mu·ªën "
"gi·ªØ ```"

#. type: Plain text
#: README.md:734
msgid ""
"Another strategy involves using `stash`. Stash all the good changes, reset "
"working copy, and reapply good changes."
msgstr ""
"M·ªôt c√°ch kh√°c th√¨ s·ª≠ d·ª•ng `stash` (c·∫•t). C·∫•t t·∫•t c·∫£ c√°c thay ƒë·ªïi t·ªët, reset "
"b·∫£n sao l√†m vi·ªác v√† apply l·∫°i c√°c thay ƒë·ªïi t·ªët."

#. type: Plain text
#: README.md:741
msgid ""
"```sh $ git stash -p # Select all of the snippets you want to save $ git "
"reset --hard $ git stash pop ```"
msgstr ""
"```sh $ git stash -p # Ch·ªçn nh·ªØng thay ƒë·ªïi b·∫°n mu·ªën gi·ªØ $ git reset --hard $ "
"git stash pop ```"

#. type: Plain text
#: README.md:743
msgid "Alternatively, stash your undesired changes, and then drop stash."
msgstr ""
"Ngo√†i ra, c√≤n c√°ch c·∫•t nh·ªØng thay ƒë·ªïi kh√¥ng mong mu·ªën c·ªßa b·∫°n v√† sau ƒë√≥ drop "
"stash."

#. type: Plain text
#: README.md:749
msgid ""
"```sh $ git stash -p # Select all of the snippets you don't want to save $ "
"git stash drop ```"
msgstr ""
"```sh $ git stash -p # Ch·ªçn nh·ªØng thay ƒë·ªïi b·∫°n kh√¥ng mu·ªën gi·ªØ $ git stash "
"drop ```"

#. type: Plain text
#: README.md:751
msgid "### I want to discard specific unstaged files"
msgstr "### T√¥i mu·ªën lo·∫°i b·ªè c√°c file c·ª• th·ªÉ ch∆∞a l√™n stage"

#. type: Plain text
#: README.md:753
msgid "When you want to get rid of one specific file in your working copy."
msgstr "Khi b·∫°n mu·ªën lo·∫°i b·ªè m·ªôt file c·ª• th·ªÉ trong b·∫£n sao l√†m vi·ªác c·ªßa b·∫°n."

#. type: Plain text
#: README.md:757
msgid "```sh $ git checkout myFile ```"
msgstr "```sh $ git checkout FileC·ªßaT√¥i ```"

#. type: Plain text
#: README.md:759
msgid ""
"Alternatively, to discard multiple files in your working copy, list them "
"all."
msgstr ""
"Ngo√†i ra, ƒë·ªÉ lo·∫°i b·ªè nhi·ªÅu file trong b·∫£n sao l√†m vi·ªác c·ªßa b·∫°n, h√£y li·ªát k√™ "
"t·∫•t c·∫£ ch√∫ng."

#. type: Plain text
#: README.md:763
msgid "```sh $ git checkout myFirstFile mySecondFile ```"
msgstr "```sh $ git checkout FileTh·ª©Nh·∫•t FileTh·ª©Hai ```"

#. type: Plain text
#: README.md:765
msgid "### I want to discard only my unstaged local changes"
msgstr "### T√¥i mu·ªën ch·ªâ lo·∫°i b·ªè c√°c thay ƒë·ªïi ch∆∞a l√™n stage t·∫°i local"

#. type: Plain text
#: README.md:767
msgid "When you want to get rid of all of your unstaged local uncommitted changes"
msgstr "Khi b·∫°n mu·ªën lo·∫°i b·ªè t·∫•t c·∫£ c√°c thay ƒë·ªïi ch∆∞a commit m√† ch∆∞a stage t·∫°i local"

#. type: Plain text
#: README.md:773
msgid ""
"```sh $ git checkout .  ``` <a "
"href=\"i-want-to-discard-all-my-untracked-files\"></a> ### I want to discard "
"all of my untracked files"
msgstr ""
"```sh $ git checkout .  ``` <a "
"href=\"i-want-to-discard-all-my-untracked-files\"></a> ### T√¥i mu·ªën lo·∫°i b·ªè "
"t·∫•t c·∫£ c√°c file ch∆∞a ƒë∆∞·ª£c theo d√µi (track)"

#. type: Plain text
#: README.md:775
msgid "When you want to get rid of all of your untracked files"
msgstr "Khi b·∫°n mu·ªën lo·∫°i b·ªè t·∫•t c·∫£ c√°c file ch∆∞a ƒë∆∞·ª£c theo d√µi"

#. type: Plain text
#: README.md:779
msgid "```sh $ git clean -f ```"
msgstr "```sh $ git clean -f ```"

#. type: Plain text
#: README.md:782
msgid ""
"<a href=\"I-want-to-unstage-specific-staged-file\"></a> ### I want to "
"unstage a specific staged file"
msgstr ""
"<a href=\"I-want-to-unstage-specific-staged-file\"></a> ### T√¥i mu·ªën h·∫° kh·ªèi "
"stage m·ªôt file c·ª• th·ªÉ ƒë√£ stage"

#. type: Plain text
#: README.md:784
msgid ""
"Sometimes we have one or more files that accidentally ended up being staged, "
"and these files have not been committed before. To unstage them:"
msgstr ""
"ƒê√¥i khi, ch√∫ng ta c√≥ m·ªôt ho·∫∑c nhi·ªÅu file ƒë√£ v√¥ t√¨nh l√™n stage v√† c√°c file "
"n√†y ch∆∞a ƒë∆∞·ª£c commit tr∆∞·ªõc ƒë√≥. ƒê·ªÉ h·∫° ch√∫ng kh·ªèi stage:"

#. type: Plain text
#: README.md:788
msgid "```sh $ git reset -- <filename> ```"
msgstr "```sh $ git reset -- <T√™nFile> ```"

#. type: Plain text
#: README.md:790
msgid "This results in unstaging the file and make it look like it's untracked."
msgstr "L·ªánh tr√™n s·∫Ω h·∫° file kh·ªèi stage v√† l√†m n√≥ kh√¥ng ƒë∆∞·ª£c theo d√µi (untracked)."

#. type: Plain text
#: README.md:792
msgid "## Branches"
msgstr "## Nh√°nh"

#. type: Plain text
#: README.md:794
msgid "### I want to list all branches"
msgstr "### T√¥i mu·ªën li·ªát k√™ t·∫•t c·∫£ c√°c nh√°nh"

#. type: Plain text
#: README.md:796
msgid "List local branches"
msgstr "Li·ªát k√™ c√°c nhanh t·∫°i local"

#. type: Plain text
#: README.md:800
msgid "```sh $ git branch ```"
msgstr "```sh $ git branch ```"

#. type: Plain text
#: README.md:802
msgid "List remote branches"
msgstr "Li·ªát k√™ c√°ch nh√°nh tr√™n remote"

#. type: Plain text
#: README.md:806
msgid "```sh $ git branch -r ```"
msgstr "```sh $ git branch -r ```"

#. type: Plain text
#: README.md:808
msgid "List all branches (both local and remote)"
msgstr "Li·ªát k√™ t·∫•t c·∫£ c√°c nh√°nh (c·∫£ local v√† remote)"

#. type: Plain text
#: README.md:812
msgid "```sh $ git branch -a ```"
msgstr "```sh $ git branch -a ```"

#. type: Plain text
#: README.md:818
msgid ""
"<a name=\"create-branch-from-commit\"></a> ### Create a branch from a commit "
"```sh $ git checkout -b <branch> <SHA1_OF_COMMIT> ```"
msgstr ""
"<a name=\"create-branch-from-commit\"></a> ### T·∫°o m·ªôt nh√°nh m·ªõi t·ª´ m·ªôt "
"commit ```sh $ git checkout -b <nh√°nh> <SHA1_C·ªßa_COMMIT> ```"

#. type: Plain text
#: README.md:821
msgid "<a name=\"pull-wrong-branch\"></a> ### I pulled from/into the wrong branch"
msgstr "<a name=\"pull-wrong-branch\"></a> ### T√¥i ƒë√£ pull (k√©o) t·ª´/v√†o sai nh√°nh"

#. type: Plain text
#: README.md:823
msgid ""
"This is another chance to use `git reflog` to see where your HEAD pointed "
"before the bad pull."
msgstr ""
"ƒê√¢y l√† m·ªôt c∆° h·ªôi kh√°c ƒë·ªÉ d√πng `git reflog` ƒë·ªÉ xem HEAD ƒë√£ tr·ªè ·ªü ƒë√¢u tr∆∞·ªõc "
"khi pull sai."

#. type: Plain text
#: README.md:829
msgid ""
"```sh (main)$ git reflog ab7555f HEAD@{0}: pull origin wrong-branch: "
"Fast-forward c5bc55a HEAD@{1}: checkout: checkout message goes here ```"
msgstr ""
"```sh (main)$ git reflog ab7555f HEAD@{0}: pull origin nh√°nh-sai: "
"Fast-forward c5bc55a HEAD@{1}: checkout: checkout message goes here ```"

#. type: Plain text
#: README.md:831
msgid "Simply reset your branch back to the desired commit:"
msgstr "Ch·ªâ c·∫ßn reset nh√°nh c·ªßa b·∫°n v·ªÅ commit mong mu·ªën:"

#. type: Plain text
#: README.md:835
msgid "```sh $ git reset --hard c5bc55a ```"
msgstr "```sh $ git reset --hard c5bc55a ```"

#. type: Plain text
#: README.md:837
msgid "Done."
msgstr "Xong."

#. type: Plain text
#: README.md:840
msgid ""
"<a href=\"discard-local-commits\"></a> ### I want to discard local commits "
"so my branch is the same as one on the server"
msgstr ""
"<a href=\"discard-local-commits\"></a> ### T√¥i mu·ªën lo·∫°i b·ªè c√°c commit t·∫°i "
"local ƒë·ªÉ nh√°nh c·ªßa t√¥i gi·ªëng nh∆∞ nh√°nh tr√™n server"

#. type: Plain text
#: README.md:842
msgid "Confirm that you haven't pushed your changes to the server."
msgstr "Ki·ªÉm tra r·∫±ng b·∫°n ch∆∞a push c√°c thay ƒë·ªïi c·ªßa m√¨nh ƒë·∫øn server."

#. type: Plain text
#: README.md:844
msgid "`git status` should show how many commits you are ahead of origin:"
msgstr "`git status` s·∫Ω hi·ªÉn th·ªã s·ªë l∆∞·ª£ng c√°c commit b·∫°n c√≥ h∆°n origin:"

#. type: Plain text
#: README.md:852, no-wrap
msgid ""
"```sh\n"
"(my-branch)$ git status\n"
"# On branch my-branch\n"
"# Your branch is ahead of 'origin/my-branch' by 2 commits.\n"
"#   (use \"git push\" to publish your local commits)\n"
"#\n"
"```\n"
msgstr ""
"```sh\n"
"(my-branch)$ git status\n"
"# On branch my-branch\n"
"# Your branch is ahead of 'origin/my-branch' by 2 commits.\n"
"#   (use \"git push\" to publish your local commits)\n"
"#\n"
"```\n"

#. type: Plain text
#: README.md:854
msgid ""
"One way of resetting to match origin (to have the same as what is on the "
"remote) is to do this:"
msgstr ""
"M·ªôt c√°ch ƒë·ªÉ reset v·ªÅ origin (ƒë·ªÉ c√≥ nh√°nh gi·ªëng nh∆∞ tr√™n remote) l√† ch·∫°y "
"l·ªánh:"

#. type: Plain text
#: README.md:858
msgid "```sh (main)$ git reset --hard origin/my-branch ```"
msgstr "```sh (main)$ git reset --hard origin/my-branch ```"

#. type: Plain text
#: README.md:861
msgid ""
"<a name=\"commit-wrong-branch\"></a> ### I committed to main instead of a "
"new branch"
msgstr ""
"<a name=\"commit-wrong-branch\"></a> ### T√¥i ƒë√£ t·∫°o commit l√™n main thay v√¨ "
"m·ªôt nh√°nh m·ªõi"

#. type: Plain text
#: README.md:863
msgid "Create the new branch while remaining on main:"
msgstr "T·∫°o nh√°nh m·ªõi trong khi gi·ªØ main:"

#. type: Plain text
#: README.md:867
msgid "```sh (main)$ git branch my-branch ```"
msgstr "```sh (main)$ git branch my-branch ```"

#. type: Plain text
#: README.md:869
msgid "Reset the branch main to the previous commit:"
msgstr "Reset nh√°nh main ƒë·∫øn commit tr∆∞·ªõc ƒë√≥:"

#. type: Plain text
#: README.md:873
msgid "```sh (main)$ git reset --hard HEAD^ ```"
msgstr "```sh (main)$ git reset --hard HEAD^ ```"

#. type: Plain text
#: README.md:875
msgid ""
"`HEAD^` is short for `HEAD^1`. This stands for the first parent of `HEAD`, "
"similarly `HEAD^2` stands for the second parent of the commit (merges can "
"have 2 parents)."
msgstr ""
"`HEAD^` l√† vi·∫øt t·∫Øt c·ªßa `HEAD^1`. ƒê√¢y l√† vi·∫øt t·∫Øt c·ªßa parent th·ª© nh·∫•t "
"`HEAD`, t∆∞∆°ng t·ª± `HEAD^2` l√† vi·∫øt t·∫Øt c·ªßa parent th·ª© hai c·ªßa commit (merge "
"c√≥ th·ªÉ c√≥ 2 parent)."

#. type: Plain text
#: README.md:877
msgid ""
"Note that `HEAD^2` is **not** the same as `HEAD~2` (see [this "
"link](http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde) for more "
"information)."
msgstr ""
"Ch√∫ √Ω r·∫±ng `HEAD^2` **kh√¥ng** gi·ªëng nh∆∞ `HEAD~2` (xem "
"[link](http://www.paulboxley.com/blog/2011/06/git-caret-and-tilde) ƒë·ªÉ th√™m "
"th√¥ng tin)."

#. type: Plain text
#: README.md:879
msgid ""
"Alternatively, if you don't want to use `HEAD^`, find out what the commit "
"hash you want to set your main branch to (`git log` should do the "
"trick). Then reset to that hash. `git push` will make sure that this change "
"is reflected on your remote."
msgstr ""
"Ngo√†i ra, n·∫øu b·∫°n kh√¥ng mu·ªën s·ª≠ d·ª•ng `HEAD^`, t√¨m m√£ hash c·ªßa commit m√† b·∫°n "
"mu·ªën main tr·ªè v·ªÅ(`git log` s·∫Ω gi√∫p b·∫°n). Sau ƒë√≥ reset v·ªÅ m√£ hash ƒë·∫•y. `git "
"push` s·∫Ω ƒë·∫£m b·∫£o r·∫±ng thay ƒë·ªïi n√†y s·∫Ω hi·ªán tr√™n remote c·ªßa b·∫°n."

#. type: Plain text
#: README.md:881
msgid ""
"For example, if the hash of the commit that your main branch is supposed to "
"be at is `a13b85e`:"
msgstr "V√≠ d·ª•, n·∫øu hash c·ªßa commit m√† nh√°nh main c·ªßa b·∫°n ƒë√°ng ra l√† `a13b85e`:"

#. type: Plain text
#: README.md:886 README.md:965
msgid "```sh (main)$ git reset --hard a13b85e HEAD is now at a13b85e ```"
msgstr "```sh (main)$ git reset --hard a13b85e HEAD is now at a13b85e ```"

#. type: Plain text
#: README.md:888
msgid "Checkout the new branch to continue working:"
msgstr "Checkout m·ªôt nh√°nh m·ªõi ƒë·ªÉ ti·∫øp t·ª•c l√†m vi·ªác:"

#. type: Plain text
#: README.md:892
msgid "```sh (main)$ git checkout my-branch ```"
msgstr "```sh (main)$ git checkout my-branch ```"

#. type: Plain text
#: README.md:895
msgid ""
"<a name=\"keep-whole-file\"></a> ### I want to keep the whole file from "
"another ref-ish"
msgstr ""
"<a name=\"keep-whole-file\"></a> ### T√¥i mu·ªën gi·ªØ to√†n b·ªô file t·ª´ m·ªôt "
"ref-ish kh√°c"

#. type: Plain text
#: README.md:897
msgid ""
"Say you have a working spike (see note), with hundreds of "
"changes. Everything is working. Now, you commit into another branch to save "
"that work:"
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n c√≥ m·ªôt c·ªôt m≈©i l√†m vi·ªác (xem Ghi Ch√∫), v·ªõi h√†ng trƒÉm thay "
"ƒë·ªïi. M·ªçi th·ª© ƒëang ho·∫°t ƒë·ªông. B√¢y gi·ªù, b·∫°n commit v√†o m·ªôt nh√°nh kh√°c ƒë·ªÉ l∆∞u "
"nh·ªØng thay ƒë·ªïi ƒë√≥:"

#. type: Plain text
#: README.md:901
msgid ""
"```sh (solution)$ git add -A && git commit -m \"Adding all changes from this "
"spike into one big commit.\" ```"
msgstr ""
"```sh (solution)$ git add -A && git commit -m \"Cho t·∫•t c·∫£ c√°c thay ƒë·ªïi "
"trong c·ªôt m≈©i l√†m vi·ªác n√†y v√†o m·ªôt commit to.\" ```"

#. type: Plain text
#: README.md:903
msgid ""
"When you want to put it into a branch (maybe feature, maybe `develop`), "
"you're interested in keeping whole files. You want to split your big commit "
"into smaller ones."
msgstr ""
"Khi b·∫°n mu·ªën ƒë·∫∑t n√≥ v√†o m·ªôt nh√°nh (c√≥ th·ªÉ l√† feature, c√≥ th·ªÉ `develop`), b·∫°n "
"quan t√¢m ƒë·∫øn vi·ªác gi·ªØ to√†n b·ªô c√°c file. B·∫°n mu·ªën chia commit l·ªõn c·ªßa b·∫°n "
"th√†nh nh·ªØng c√°i nh·ªè h∆°n."

#. type: Plain text
#: README.md:905
msgid "Say you have:"
msgstr "Gi·∫£ s·ª≠ b·∫°n c√≥:"

#. type: Bullet: '  * '
#: README.md:908
msgid "branch `solution`, with the solution to your spike. One ahead of `develop`."
msgstr ""
"nh√°nh `solution`, v·ªõi gi√°p ph√°p b·∫°n ph√°t tri·ªÉn v·ªõi c·ªôt m≈©i l√†m vi·ªác c·ªßa "
"b·∫°n. H∆°n `develop` m·ªôt commit."

#. type: Bullet: '  * '
#: README.md:908
msgid "branch `develop`, where you want to add your changes."
msgstr "nh√°nh `develop`, n∆°i b·∫°n mu·ªën th√™m c√°c thay ƒë·ªïi c·ªßa b·∫°n."

#. type: Plain text
#: README.md:910
msgid "You can solve it bringing the contents to your branch:"
msgstr "B·∫°n c√≥ th·ªÉ gi·∫£i quy·∫øt b·∫±ng c√°ch mang n·ªôi dung thay ƒë·ªïi sang nh√°nh c·ªßa b·∫°n:"

#. type: Plain text
#: README.md:914
msgid "```sh (develop)$ git checkout solution -- file1.txt ```"
msgstr "```sh (develop)$ git checkout solution -- file1.txt ```"

#. type: Plain text
#: README.md:916
msgid ""
"This will get the contents of that file in branch `solution` to your branch "
"`develop`:"
msgstr ""
"L·ªánh tr√™n s·∫Ω l·∫•y n·ªôi dung c·ªßa t·∫≠p tin ƒë√≥ trong nh√°nh `solution` ƒë·∫øn nh√°nh "
"`develop` c·ªßa b·∫°n:"

#. type: Plain text
#: README.md:925, no-wrap
msgid ""
"```sh\n"
"# On branch develop\n"
"# Your branch is up-to-date with 'origin/develop'.\n"
"# Changes to be committed:\n"
"#  (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#        modified:   file1.txt\n"
"```\n"
msgstr ""
"```sh\n"
"# On branch develop\n"
"# Your branch is up-to-date with 'origin/develop'.\n"
"# Changes to be committed:\n"
"#  (use \"git reset HEAD <file>...\" to unstage)\n"
"#\n"
"#        modified:   file1.txt\n"
"```\n"

#. type: Plain text
#: README.md:927
msgid "Then, commit as usual."
msgstr "Sau ƒë√≥, commit nh∆∞ b√¨nh th∆∞·ªùng."

#. type: Plain text
#: README.md:929
msgid ""
"Note: Spike solutions are made to analyze or solve the problem. These "
"solutions are used for estimation and discarded once everyone gets clear "
"visualization of the problem. ~ "
"[Wikipedia](https://en.wikipedia.org/wiki/Extreme_programming_practices)."
msgstr ""
"L∆∞u √Ω: C·ªôt m≈©i gi·∫£i ph√°p ƒë∆∞·ª£c ph√°t tri·ªÉn ƒë·ªÉ ph√¢n t√≠ch ho·∫∑c gi·∫£i quy·∫øt v·∫•n "
"ƒë·ªÅ. C√°c gi·∫£i ph√°p n√†y ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ∆∞·ªõc t√≠nh v√† lo·∫°i b·ªè sau khi m·ªçi ng∆∞·ªùi "
"hi·ªÉu r√µ v·∫•n ƒë·ªÅ. ~ "
"[Wikipedia](https://en.wikipedia.org/wiki/Extreme_programming_practices)."

#. type: Plain text
#: README.md:932
msgid ""
"<a name=\"cherry-pick\"></a> ### I made several commits on a single branch "
"that should be on different branches"
msgstr ""
"<a name=\"cherry-pick\"></a> ### T√¥i ƒë√£ th·ª±c hi·ªán m·ªôt s·ªë commit tr√™n m·ªôt "
"nh√°nh m·∫∑c d√π ch√∫ng n√™n ·ªü c√°c nh√°nh kh√°c nhau"

#. type: Plain text
#: README.md:934
msgid ""
"Say you are on your main branch. Running `git log`, you see you have made "
"two commits:"
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n ƒëang ·ªü tr√™n nh√°nh main c·ªßa b·∫°n. Ch·∫°y `git log`, b·∫°n th·∫•y b·∫°n ƒë√£ "
"th·ª±c hi·ªán 2 commit:"

#. type: Plain text
#: README.md:937
msgid "```sh (main)$ git log"
msgstr "```sh (main)$ git log"

#. type: Plain text
#: README.md:941, no-wrap
msgid ""
"commit e3851e817c451cc36f2e6f3049db528415e3c114\n"
"Author: Alex Lee <alexlee@example.com>\n"
"Date:   Tue Jul 22 15:39:27 2014 -0400\n"
msgstr ""
"commit e3851e817c451cc36f2e6f3049db528415e3c114\n"
"Author: Alex Lee <alexlee@example.com>\n"
"Date:   Tue Jul 22 15:39:27 2014 -0400\n"

#. type: Plain text
#: README.md:943, no-wrap
msgid "    Bug #21 - Added CSRF protection\n"
msgstr "    Bug #21 - Added CSRF protection\n"

#. type: Plain text
#: README.md:947, no-wrap
msgid ""
"commit 5ea51731d150f7ddc4a365437931cd8be3bf3131\n"
"Author: Alex Lee <alexlee@example.com>\n"
"Date:   Tue Jul 22 15:39:12 2014 -0400\n"
msgstr ""
"commit 5ea51731d150f7ddc4a365437931cd8be3bf3131\n"
"Author: Alex Lee <alexlee@example.com>\n"
"Date:   Tue Jul 22 15:39:12 2014 -0400\n"

#. type: Plain text
#: README.md:949, no-wrap
msgid "    Bug #14 - Fixed spacing on title\n"
msgstr "    Bug #14 - Fixed spacing on title\n"

#. type: Plain text
#: README.md:953, no-wrap
msgid ""
"commit a13b85e984171c6e2a1729bb061994525f626d14\n"
"Author: Aki Rose <akirose@example.com>\n"
"Date:   Tue Jul 21 01:12:48 2014 -0400\n"
msgstr ""
"commit a13b85e984171c6e2a1729bb061994525f626d14\n"
"Author: Aki Rose <akirose@example.com>\n"
"Date:   Tue Jul 21 01:12:48 2014 -0400\n"

#. type: Plain text
#: README.md:956, no-wrap
msgid ""
"    First commit\n"
"```\n"
msgstr ""
"    First commit\n"
"```\n"

#. type: Plain text
#: README.md:958
msgid ""
"Let's take note of our commit hashes for each bug (`e3851e8` for #21, "
"`5ea5173` for #14)."
msgstr ""
"H√£y l∆∞u √Ω c√°c hash commit c·ªßa ch√∫ng ta cho m·ªói bug (l·ªói) (`e3851e8` cho #21, "
"`5ea5173` cho #14)."

#. type: Plain text
#: README.md:960
msgid "First, let's reset our main branch to the correct commit (`a13b85e`):"
msgstr ""
"Tr∆∞·ªõc ti√™n, h√£y ƒë·∫∑t l·∫°i nh√°nh main c·ªßa ch√∫ng ta v·ªÅ commit ch√≠nh x√°c "
"(`a13b85e`):"

#. type: Plain text
#: README.md:967
msgid "Now, we can create a fresh branch for our bug #21:"
msgstr "B√¢y gi·ªù, ch√∫ng ta c√≥ th·ªÉ t·∫°o ra m·ªôt nh√°nh m·ªõi cho l·ªói #21 c·ªßa ch√∫ng ta:"

#. type: Plain text
#: README.md:972
msgid "```sh (main)$ git checkout -b 21 (21)$ ```"
msgstr "```sh (main)$ git checkout -b 21 (21)$ ```"

#. type: Plain text
#: README.md:974
msgid ""
"Now, let's *cherry-pick* the commit for bug #21 on top of our branch. That "
"means we will be applying that commit, and only that commit, directly on top "
"of whatever our head is at."
msgstr ""
"B√¢y gi·ªù, h√£y *cherry-pick* commit cho bug #21 tr√™n ƒë·∫ßu c·ªßa nh√°nh. N√≥i t√≥m "
"l·∫°i l√† ch√∫ng ta s·∫Ω √°p commit ƒë√≥, v√† ch·ªâ commit ƒë√≥, tr·ª±c ti·∫øp v√†o ƒë·∫ßu c·ªßa "
"nh√°nh."

#. type: Plain text
#: README.md:978
msgid "```sh (21)$ git cherry-pick e3851e8 ```"
msgstr "```sh (21)$ git cherry-pick e3851e8 ```"

#. type: Plain text
#: README.md:980
msgid ""
"At this point, there is a possibility there might be conflicts. See the "
"[**There were conflicts**](#merge-conflict) section in the [interactive "
"rebasing section above](#interactive-rebase) for how to resolve conflicts."
msgstr ""
"T·∫°i th·ªùi ƒëi·ªÉm n√†y, c√≥ kh·∫£ nƒÉng c√≥ th·ªÉ c√≥ xung ƒë·ªôt h·ª£p (merge conflicts). H√£y "
"xem ph·∫ßn [**There were conflicts**](#merge-conflict) trong [ph·∫ßn interactive "
"rebasing ·ªü tr√™n](#interactive-rebase) ƒë·ªÉ l√†m th·∫ø n√†o gi·∫£i quy·∫øt xung ƒë·ªôt "
"h·ª£p."

#. type: Plain text
#: README.md:982
msgid "Now let's create a new branch for bug #14, also based on main"
msgstr ""
"B√¢y gi·ªù ch√∫ng ta h√£y t·∫°o m·ªôt nh√°nh m·ªõi cho bug # 14, c≈©ng d·ª±a tr√™n nh√°nh "
"main:"

#. type: Plain text
#: README.md:988
msgid "```sh (21)$ git checkout main (main)$ git checkout -b 14 (14)$ ```"
msgstr "```sh (21)$ git checkout main (main)$ git checkout -b 14 (14)$ ```"

#. type: Plain text
#: README.md:990
msgid "And finally, let's cherry-pick the commit for bug #14:"
msgstr "V√† cu·ªëi c√πng, h√£y cherry-pick commit cho bug #14:"

#. type: Plain text
#: README.md:994
msgid "```sh (14)$ git cherry-pick 5ea5173 ```"
msgstr "```sh (14)$ git cherry-pick 5ea5173 ```"

#. type: Plain text
#: README.md:997
msgid ""
"<a name=\"delete-stale-local-branches\"></a> ### I want to delete local "
"branches that were deleted upstream"
msgstr ""
"<a name=\"delete-stale-local-branches\"></a> ### T√¥i mu·ªën x√≥a c√°c nh√°nh "
"local ƒë√£ b·ªã x√≥a t·∫°i lu·ªìng tr∆∞·ªõc (upstream)"

#. type: Plain text
#: README.md:999
msgid ""
"Once you merge a pull request on GitHub, it gives you the option to delete "
"the merged branch in your fork. If you aren't planning to keep working on "
"the branch, it's cleaner to delete the local copies of the branch so you "
"don't end up cluttering up your working checkout with a lot of stale "
"branches."
msgstr ""
"Khi b·∫°n k·∫øt h·ª£p (merge) m·ªôt pull request tr√™n GitHub, n√≥ s·∫Ω cho b·∫°n l·ª±a ch·ªçn "
"ƒë·ªÉ x√≥a nh√°nh ƒë√£ ƒë∆∞·ª£c k·∫øt h·ª£p trong fork c·ªßa b·∫°n. N·∫øu b·∫°n kh√¥ng c√≥ k·∫ø ho·∫°ch "
"ti·∫øp t·ª•c l√†m vi·ªác tr√™n nh√°nh ƒë·∫•y, m·ªçi th·ª© s·∫Ω s·∫°ch h∆°n n·∫øu x√≥a c√°c b·∫£n sao "
"local c·ªßa nh√°nh, do ƒë√≥ b·∫°n kh√¥ng t·ªìn ƒë·ªçng m·ªôt c√°ch l·ªôn x·ªôn t·∫°i b·∫£n sao l√†m "
"vi·ªác c·ªßa b·∫°n v·ªõi c√°c nh√°nh c≈©."

#. type: Plain text
#: README.md:1003
msgid "```sh $ git fetch -p upstream ```"
msgstr "```sh $ git fetch -p upstream ```"

#. type: Plain text
#: README.md:1005
msgid "where, `upstream` is the remote you want to fetch from."
msgstr "upstream` l√† remote b·∫°n mu·ªën fetch (g·ªçi) v·ªÅ."

#. type: Plain text
#: README.md:1008
msgid "<a name='restore-a-deleted-branch'></a> ### I accidentally deleted my branch"
msgstr "<a name='restore-a-deleted-branch'></a> ### T√¥i v√¥ t√¨nh x√≥a nh√°nh c·ªßa t√¥i"

#. type: Plain text
#: README.md:1010
msgid ""
"If you're regularly pushing to remote, you should be safe most of the "
"time. But still sometimes you may end up deleting your branches. Let's say "
"we create a branch and create a new file:"
msgstr ""
"N·∫øu b·∫°n th∆∞·ªùng xuy√™n push l√™n remote, b·∫°n s·∫Ω an to√†n ph·∫ßn l·ªõn th·ªùi "
"gian. Nh∆∞ng ƒë√¥i khi b·∫°n c√≥ th·ªÉ s·∫Ω x√≥a c√°c nh√°nh c·ªßa b·∫°n. Gi·∫£ s·ª≠ ch√∫ng ta t·∫°o "
"m·ªôt nh√°nh v√† t·∫°o m·ªôt t·ªáp m·ªõi:"

#. type: Plain text
#: README.md:1018
msgid ""
"```sh (main)$ git checkout -b my-branch (my-branch)$ git branch (my-branch)$ "
"touch foo.txt (my-branch)$ ls README.md foo.txt ```"
msgstr ""
"```sh (main)$ git checkout -b my-branch (my-branch)$ git branch (my-branch)$ "
"touch foo.txt (my-branch)$ ls README.md foo.txt ```"

#. type: Plain text
#: README.md:1020
msgid "Let's add it and commit."
msgstr "H√£y th√™m n√≥ v√† r·ªìi t·∫°o commit."

#. type: Plain text
#: README.md:1028, no-wrap
msgid ""
"```sh\n"
"(my-branch)$ git add .\n"
"(my-branch)$ git commit -m 'foo.txt added'\n"
"(my-branch)$ foo.txt added\n"
" 1 files changed, 1 insertions(+)\n"
" create mode 100644 foo.txt\n"
"(my-branch)$ git log\n"
msgstr ""
"```sh\n"
"(my-branch)$ git add .\n"
"(my-branch)$ git commit -m 'foo.txt added'\n"
"(my-branch)$ foo.txt added\n"
" 1 files changed, 1 insertions(+)\n"
" create mode 100644 foo.txt\n"
"(my-branch)$ git log\n"

#. type: Plain text
#: README.md:1032, no-wrap
msgid ""
"commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\n"
"Author: siemiatj <siemiatj@example.com>\n"
"Date:   Wed Jul 30 00:34:10 2014 +0200\n"
msgstr ""
"commit 4e3cd85a670ced7cc17a2b5d8d3d809ac88d5012\n"
"Author: siemiatj <siemiatj@example.com>\n"
"Date:   Wed Jul 30 00:34:10 2014 +0200\n"

#. type: Plain text
#: README.md:1034, no-wrap
msgid "    foo.txt added\n"
msgstr "    foo.txt added\n"

#. type: Plain text
#: README.md:1038, no-wrap
msgid ""
"commit 69204cdf0acbab201619d95ad8295928e7f411d5\n"
"Author: Kate Hudson <katehudson@example.com>\n"
"Date:   Tue Jul 29 13:14:46 2014 -0400\n"
msgstr ""
"commit 69204cdf0acbab201619d95ad8295928e7f411d5\n"
"Author: Kate Hudson <katehudson@example.com>\n"
"Date:   Tue Jul 29 13:14:46 2014 -0400\n"

#. type: Plain text
#: README.md:1041, no-wrap
msgid ""
"    Fixes #6: Force pushing after amending commits\n"
"```\n"
msgstr ""
"    Fixes #6: Force pushing after amending commits\n"
"```\n"

#. type: Plain text
#: README.md:1043
msgid "Now we're switching back to main and 'accidentally' removing our branch."
msgstr "B√¢y gi·ªù ch√∫ng ta chuy·ªÉn l·∫°i v·ªÅ main v√† 'v√¥ t√¨nh' x√≥a nh√°nh c·ªßa ch√∫ng ta"

#. type: Plain text
#: README.md:1053
msgid ""
"```sh (my-branch)$ git checkout main Switched to branch 'main' Your branch "
"is up-to-date with 'origin/main'.  (main)$ git branch -D my-branch Deleted "
"branch my-branch (was 4e3cd85).  (main)$ echo oh noes, deleted my branch! oh "
"noes, deleted my branch! ```"
msgstr ""
"```sh (my-branch)$ git checkout main Switched to branch 'main' Your branch "
"is up-to-date with 'origin/main'.  (main)$ git branch -D my-branch Deleted "
"branch my-branch (was 4e3cd85).  (main)$ echo √¥i kh√¥ng,t√¥i delete nh√°nh t√¥i! "
"√¥i kh√¥ng,t√¥i delete nh√°nh t√¥i! ```"

#. type: Plain text
#: README.md:1055
msgid ""
"At this point you should get familiar with 'reflog', an upgraded logger. It "
"stores the history of all the action in the repo."
msgstr ""
"T·∫°i th·ªùi ƒëi·ªÉm n√†y, b·∫°n n√™n l√†m quen v·ªõi 'reflog', m·ªôt logger (k√Ω s·ª≠) ƒë∆∞·ª£c "
"n√¢ng c·∫•p. N√≥ l∆∞u tr·ªØ l·ªãch s·ª≠ c·ªßa t·∫•t c·∫£ c√°c h√†nh ƒë·ªông trong repo."

#. type: Plain text
#: README.md:1062
msgid ""
"``` (main)$ git reflog 69204cd HEAD@{0}: checkout: moving from my-branch to "
"main 4e3cd85 HEAD@{1}: commit: foo.txt added 69204cd HEAD@{2}: checkout: "
"moving from main to my-branch ```"
msgstr ""
"``` (main)$ git reflog 69204cd HEAD@{0}: checkout: moving from my-branch to "
"main 4e3cd85 HEAD@{1}: commit: foo.txt added 69204cd HEAD@{2}: checkout: "
"moving from main to my-branch ```"

#. type: Plain text
#: README.md:1064
msgid ""
"As you can see we have commit hash from our deleted branch. Let's see if we "
"can restore our deleted branch."
msgstr ""
"Nh∆∞ b·∫°n c√≥ th·ªÉ th·∫•y ch√∫ng ta c√≥ s·ªë hash c·ªßa commit t·ª´ nh√°nh ƒë√£ x√≥a c·ªßa ch√∫ng "
"ta. H√£y xem li·ªáu ch√∫ng ta c√≥ th·ªÉ kh√¥i ph·ª•c nh√°nh ƒë√£ x√≥a c·ªßa ch√∫ng ta hay "
"kh√¥ng."

#. type: Plain text
#: README.md:1073
msgid ""
"```sh (main)$ git checkout -b my-branch-help Switched to a new branch "
"'my-branch-help' (my-branch-help)$ git reset --hard 4e3cd85 HEAD is now at "
"4e3cd85 foo.txt added (my-branch-help)$ ls README.md foo.txt ```"
msgstr ""
"```sh (main)$ git checkout -b my-branch-help Switched to a new branch "
"'my-branch-help' (my-branch-help)$ git reset --hard 4e3cd85 HEAD is now at "
"4e3cd85 foo.txt added (my-branch-help)$ ls README.md foo.txt ```"

#. type: Plain text
#: README.md:1075
msgid ""
"Voila! We got our removed file back. `git reflog` is also useful when "
"rebasing goes terribly wrong."
msgstr ""
"V√† ƒë·∫•y! Ch√∫ng ta ƒë√£ ph·ª•c h·ªìi l·∫°i ƒë∆∞·ª£c file b·ªã x√≥a c·ªßa ch√∫ng ta. `git reflog` "
"c≈©ng h·ªØu √≠ch khi rebase t·∫°o sai l·∫ßm l·ªõn."

#. type: Plain text
#: README.md:1077
msgid "### I want to delete a branch"
msgstr "### T√¥i mu·ªën xo√° m·ªôt nh√°nh"

#. type: Plain text
#: README.md:1079
msgid "To delete a remote branch:"
msgstr "ƒê·ªÉ xo√° m·ªôt nh√°nh t·∫°i remote:"

#. type: Plain text
#: README.md:1083
msgid "```sh (main)$ git push origin --delete my-branch ```"
msgstr "```sh (main)$ git push origin --delete my-branch ```"

#. type: Plain text
#: README.md:1085
msgid "You can also do:"
msgstr "B·∫°n c≈©ng c√≥ th·ªÉ ch·∫°y :"

#. type: Plain text
#: README.md:1089
msgid "```sh (main)$ git push origin :my-branch ```"
msgstr "```sh (main)$ git push origin :my-branch ```"

#. type: Plain text
#: README.md:1091
msgid "To delete a local branch:"
msgstr "ƒê·ªÉ xo√° nh√°nh t·∫°i local:"

#. type: Plain text
#: README.md:1095
msgid "```sh (main)$ git branch -d my-branch ```"
msgstr "```sh (main)$ git branch -d my-branch ```"

#. type: Plain text
#: README.md:1097
msgid ""
"To delete a local branch that *has not* been merged to the current branch or "
"an upstream:"
msgstr ""
"ƒê·ªÉ xo√° m·ªôt nh√°nh local *ch∆∞a ƒë∆∞·ª£c* merge v·ªõi nh√°nh hi·ªán t·∫°i ho·∫∑c tr√™n "
"upstream (lu·ªìng tr∆∞·ªõc):"

#. type: Plain text
#: README.md:1101
msgid "```sh (main)$ git branch -D my-branch ```"
msgstr "```sh (main)$ git branch -D my-branch ```"

#. type: Plain text
#: README.md:1103
msgid "### I want to delete multiple branches"
msgstr "### T√¥i mu·ªën xo√° nhi·ªÅu nh√°nh"

#. type: Plain text
#: README.md:1105
msgid "Say you want to delete all branches that start with `fix/`:"
msgstr "Gi·∫£ s·ª≠ b·∫°n mu·ªën xo√° t·∫•t c·∫£ c√°c nh√°nh b·∫Øt ƒë·∫ßu v·ªõi `fix/`:"

#. type: Plain text
#: README.md:1109
msgid "```sh (main)$ git branch | grep 'fix/' | xargs git branch -d ```"
msgstr "```sh (main)$ git branch | grep 'fix/' | xargs git branch -d ```"

#. type: Plain text
#: README.md:1111
msgid "### I want to rename a branch"
msgstr "### T√¥i mu·ªën ƒë·ªïi t√™n m·ªôt nh√°nh"

#. type: Plain text
#: README.md:1113
msgid "To rename the current (local) branch:"
msgstr "ƒê·ªÉ ƒë·ªïi t√™n nh√°nh local hi·ªán t·∫°i:"

#. type: Plain text
#: README.md:1117
msgid "```sh (main)$ git branch -m new-name ```"
msgstr "```sh (main)$ git branch -m t√™n-m·ªõi ```"

#. type: Plain text
#: README.md:1119
msgid "To rename a different (local) branch:"
msgstr "ƒê·ªÉ ƒë·ªïi t√™n nh√°nh local kh√°c:"

#. type: Plain text
#: README.md:1123
msgid "```sh (main)$ git branch -m old-name new-name ```"
msgstr "```sh (main)$ git branch -m t√™n-c≈© t√™n-m·ªõi ```"

#. type: Plain text
#: README.md:1125
msgid "To delete the `old-name` remote branch and push the `new-name` local branch:"
msgstr "ƒê·ªÉ v·ª´a x√≥a nh√°nh `t√™n-c≈©` t·∫°i remote v√† push nh√°nh `t√™n-m·ªõi` t·ª´ local:"

#. type: Plain text
#: README.md:1129
msgid "```sh (main)$ git push origin :old_name new_name ```"
msgstr "```sh (main)$ git push origin :t√™n_c≈© t√™n_m·ªõi ```"

#. type: Plain text
#: README.md:1132
msgid ""
"<a "
"name=\"i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on\"></a> "
"### I want to checkout to a remote branch that someone else is working on"
msgstr ""
"<a "
"name=\"i-want-to-checkout-to-a-remote-branch-that-someone-else-is-working-on\"></a> "
"### T√¥i mu·ªën checkout ƒë·∫øn m·ªôt nh√°nh remote m√† ng∆∞·ªùi kh√°c ƒëang l√†m vi·ªác tr√™n "
"ƒë√≥"

#. type: Plain text
#: README.md:1134
msgid "First, fetch all branches from remote:"
msgstr "ƒê·∫ßu ti√™n, fetch t·∫•t c·∫£ nh√°nh t·ª´ remote:"

#. type: Plain text
#: README.md:1138
msgid "```sh (main)$ git fetch --all ```"
msgstr "```sh (main)$ git fetch --all ```"

#. type: Plain text
#: README.md:1140
msgid "Say you want to checkout to `daves` from the remote."
msgstr "Gi·∫£ s·ª≠ b·∫°n mu·ªën checkout sang `daves` t·ª´ remote."

#. type: Plain text
#: README.md:1146
msgid ""
"```sh (main)$ git checkout --track origin/daves Branch daves set up to track "
"remote branch daves from origin.  Switched to a new branch 'daves' ```"
msgstr ""
"```sh (main)$ git checkout --track origin/daves Branch daves set up to track "
"remote branch daves from origin.  Switched to a new branch 'daves' ```"

#. type: Plain text
#: README.md:1148
msgid ""
"(`--track` is shorthand for `git checkout -b [branch] "
"[remotename]/[branch]`)"
msgstr "(`--track` l√† vi·∫øt t·∫Øt c·ªßa `git checkout -b [branch] [remotename]/[branch]`)"

#. type: Plain text
#: README.md:1150
msgid ""
"This will give you a local copy of the branch `daves`, and any update that "
"has been pushed will also show up remotely."
msgstr ""
"L·ªánh n√†y s·∫Ω cung c·∫•p cho b·∫°n m·ªôt b·∫£n sao t·∫°i local c·ªßa nh√°nh `daves` v√† m·ªçi "
"c·∫≠p nh·∫≠t ƒë√£ ƒë∆∞·ª£c push c≈©ng s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã t·ª´ remote."

#. type: Plain text
#: README.md:1152
msgid "### I want to create a new remote branch from current local one"
msgstr "### T√¥i mu·ªën t·∫°o m·ªôt nh√°nh remote m·ªõi t·ª´ m·ªôt nh√°nh local hi·ªán t·∫°i"

#. type: Plain text
#: README.md:1156
msgid "```sh $ git push <remote> HEAD ```"
msgstr "```sh $ git push <remote> HEAD ```"

#. type: Plain text
#: README.md:1158
msgid ""
"If you would also like to set that remote branch as upstream for the current "
"one, use the following instead:"
msgstr "N·∫øu b·∫°n c≈©ng mu·ªën ƒë·∫∑t nh√°nh remote l√† upstream cho nh√°nh hi·ªán t·∫°i, s·ª≠ d·ª•ng:"

#. type: Plain text
#: README.md:1162
msgid "```sh $ git push -u <remote> HEAD ```"
msgstr "```sh $ git push -u <remote> HEAD ```"

#. type: Plain text
#: README.md:1164
msgid ""
"With the `upstream` mode and the `simple` (default in Git 2.0) mode of the "
"`push.default` config, the following command will push the current branch "
"with regards to the remote branch that has been registered previously with "
"`-u`:"
msgstr ""
"V·ªõi ch·∫ø ƒë·ªô `upstream` v√† `simple` (m·∫∑c ƒë·ªãnh trong Git 2.0) c·ªßa c·∫•u h√¨nh "
"`push.default`, l·ªánh sau s·∫Ω push nh√°nh hi·ªán t·∫°i l√™n nh√°nh remote ƒë∆∞·ª£c ƒëƒÉng "
"k√Ω tr∆∞·ªõc ƒë√≥ v·ªõi `-u`:"

#. type: Plain text
#: README.md:1168
msgid "```sh $ git push ```"
msgstr "```sh $ git push ```"

#. type: Plain text
#: README.md:1170
msgid ""
"The behavior of the other modes of `git push` is described in the [doc of "
"`push.default`](https://git-scm.com/docs/git-config#git-config-pushdefault)."
msgstr ""
"C√°c h√†nh vi c·ªßa c√°c ch·∫ø ƒë·ªô kh√°c c·ªßa `git push` ƒë∆∞·ª£c m√¥ t·∫£ trong [doc cho "
"`push.default`](https://git-scm.com/docs/git-config#git-config-pushdefault)."

#. type: Plain text
#: README.md:1172
msgid "### I want to set a remote branch as the upstream for a local branch"
msgstr ""
"### T√¥i mu·ªën thi·∫øt l·∫≠p m·ªôt nh√°nh remote l√†m upstream (lu·ªìng tr∆∞·ªõc) cho m·ªôt "
"nh√°nh local"

#. type: Plain text
#: README.md:1174
msgid ""
"You can set a remote branch as the upstream for the current local branch "
"using:"
msgstr ""
"B·∫°n c√≥ th·ªÉ thi·∫øt l·∫≠p m·ªôt nh√°nh remote l√†m upstream cho nh√°nh local hi·ªán t·∫°i "
"b·∫±ng c√°ch ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:1180
msgid ""
"```sh $ git branch --set-upstream-to [remotename]/[branch] # or, using the "
"shorthand: $ git branch -u [remotename]/[branch] ```"
msgstr ""
"```sh $ git branch --set-upstream-to [remotename]/[branch] # ho·∫∑c, d√πng k√Ω "
"t·∫Øt: $ git branch -u [remotename]/[branch] ```"

#. type: Plain text
#: README.md:1182
msgid "To set the upstream remote branch for another local branch:"
msgstr "ƒê·ªÉ thi·∫øt l·∫≠p nh√°nh upstream remote cho nh√°nh local kh√°c:"

#. type: Plain text
#: README.md:1186
msgid "```sh $ git branch -u [remotename]/[branch] [local-branch] ```"
msgstr "```sh $ git branch -u [remotename]/[branch] [local-branch] ```"

#. type: Plain text
#: README.md:1189
msgid ""
"<a name=\"i-want-to-set-my-HEAD-to-track-the-default-remote-branch\"></a> "
"### I want to set my HEAD to track the default remote branch"
msgstr ""
"<a name=\"i-want-to-set-my-HEAD-to-track-the-default-remote-branch\"></a> "
"### T√¥i mu·ªën ƒë·ªÉ HEAD c·ªßa t√¥i d√µi theo nh√°nh m·∫∑c ƒë·ªãnh c·ªßa remote"

#. type: Plain text
#: README.md:1191
msgid ""
"By checking your remote branches, you can see which remote branch your HEAD "
"is tracking. In some cases, this is not the desired branch."
msgstr ""
"B·∫±ng c√°ch ki·ªÉm tra c√°c nh√°nh remote c·ªßa b·∫°n, b·∫°n c√≥ th·ªÉ th·∫•y nh√°nh remote "
"n√†o m√† HEAD c·ªßa b·∫°n ƒëang theo d√µi. Trong m·ªôt s·ªë tr∆∞·ªùng h·ª£p, c√≥ th·ªÉ ƒë·∫•y kh√¥ng "
"ph·∫£i l√† nh√°nh mong mu·ªën."

#. type: Plain text
#: README.md:1197, no-wrap
msgid ""
"```sh\n"
"$ git branch -r\n"
"  origin/HEAD -> origin/gh-pages\n"
"  origin/main\n"
"```\n"
msgstr ""
"```sh\n"
"$ git branch -r\n"
"  origin/HEAD -> origin/gh-pages\n"
"  origin/main\n"
"```\n"

#. type: Plain text
#: README.md:1199
msgid "To change `origin/HEAD` to track `origin/main`, you can run this command:"
msgstr ""
"ƒê·ªÉ thay ƒë·ªïi `origin/HEAD` sang theo d√µi `origin/main`, b·∫°n c√≥ th·ªÉ ch·∫°y l·ªánh "
"n√†y:"

#. type: Plain text
#: README.md:1204
msgid "```sh $ git remote set-head origin --auto origin/HEAD set to main ```"
msgstr "```sh $ git remote set-head origin --auto origin/HEAD set to main ```"

#. type: Plain text
#: README.md:1206
msgid "### I made changes on the wrong branch"
msgstr "### T√¥i ƒë√£ th·ª±c hi·ªán thay ƒë·ªïi tr√™n sai nh√°nh"

#. type: Plain text
#: README.md:1208
msgid ""
"You've made uncommitted changes and realise you're on the wrong "
"branch. Stash changes and apply them to the branch you want:"
msgstr ""
"B·∫°n ƒë√£ th·ª±c hi·ªán c√°c thay ƒë·ªïi ch∆∞a ƒë∆∞·ª£c commit v√† nh·∫≠n ra b·∫°n ƒëang ·ªü sai "
"nh√°nh. Stash (c·∫•t) c√°c thay ƒë·ªïi v√† apply (√°p d·ª•ng) ch√∫ng v√†o nh√°nh b·∫°n mu·ªën:"

#. type: Plain text
#: README.md:1214
msgid ""
"```sh (wrong_branch)$ git stash (wrong_branch)$ git checkout "
"<correct_branch> (correct_branch)$ git stash apply ```"
msgstr ""
"```sh (wrong_branch)$ git stash (wrong_branch)$ git checkout nh√°nh_ƒë√∫ng "
"(correct_branch)$ git stash apply ```"

#. type: Plain text
#: README.md:1217
msgid ""
"<a name=\"i-want-to-split-a-branch-into-two\"></a> ### I want to split a "
"branch into two"
msgstr ""
"<a name=\"i-want-to-split-a-branch-into-two\"></a> ### T√¥i mu·ªën t√°ch m·ªôt "
"nh√°nh th√†nh hai"

#. type: Plain text
#: README.md:1219
msgid ""
"You've made a lot of commits on a branch and now want to separate it into "
"two, ending with a branch up to an earlier commit and another with all the "
"changes."
msgstr ""
"B·∫°n ƒë√£ t·∫°o r·∫•t nhi·ªÅu commit tr√™n m·ªôt nh√†nh v√† b√¢y gi·ªù b·∫°n mu·ªën t√°ch nh√°nh ra "
"th√†nh hai, m·ªôt nh√°nh k·∫øt th√∫c v·ªõi m·ªôt commit c≈©, v√† m·ªôt nh√°nh v·ªõi t·∫•t c·∫£ c√°c "
"thay ƒë·ªïi."

#. type: Plain text
#: README.md:1221
msgid ""
"Use `git log` to find the commit where you want to split. Then do the "
"following:"
msgstr ""
"D√πng `git log` ƒë·ªÉ t√¨m commit b·∫°n mu·ªën l√†m m·ªëc ƒë·ªÉ t√°ch. Sau ƒë√≥ ch·∫°y l·ªánh nh∆∞ "
"sau:"

#. type: Plain text
#: README.md:1227
msgid ""
"```sh (original_branch)$ git checkout -b new_branch (new_branch)$ git "
"checkout original_branch (original_branch)$ git reset --hard <sha1 split "
"here> ```"
msgstr ""
"```sh (original_branch)$ git checkout -b new_branch (new_branch)$ git "
"checkout original_branch (original_branch)$ git reset --hard <s·ªë sha1 commit "
"ƒë·ªÉ t√°ch> ```"

#. type: Plain text
#: README.md:1229
msgid ""
"If you had previously pushed the `original_branch` to remote, you will need "
"to do a force push. For more information check [Stack "
"Overlflow](https://stackoverflow.com/questions/28983458/how-to-split-a-branch-in-two-with-git/28983843#28983843)"
msgstr ""
"N·∫øu b·∫°n tr∆∞·ªõc ƒë√≥ ƒë√£ push nh√°nh g·ªëc l√™n remote, b·∫°n s·∫Ω c·∫ßn ph·∫£i push √©p "
"(force push). ƒê·ªÉ th√™m th√¥ng tin xem [Stack "
"Overlflow](https://stackoverflow.com/questions/28983458/how-to-split-a-branch-in-two-with-git/28983843#28983843)."

#. type: Plain text
#: README.md:1231
msgid "## Rebasing and Merging"
msgstr "## Rebasing v√† Merging"

#. type: Plain text
#: README.md:1234
msgid "<a name=\"undo-rebase\"></a> ### I want to undo rebase/merge"
msgstr "<a name=\"undo-rebase\"></a> ### T√¥i mu·ªën ƒë·∫£o ng∆∞·ª£c rebase/merge"

#. type: Plain text
#: README.md:1236
msgid ""
"You may have merged or rebased your current branch with a wrong branch, or "
"you can't figure it out or finish the rebase/merge process. Git saves the "
"original HEAD pointer in a variable called ORIG_HEAD before doing dangerous "
"operations, so it is simple to recover your branch at the state before the "
"rebase/merge."
msgstr ""
"B·∫°n c√≥ th·ªÉ ƒë√£ merge ho·∫∑c rebase nh√°nh hi·ªán t·∫°i c·ªßa b·∫°n v·ªõi m·ªôt nh√°nh sai "
"ho·∫∑c b·∫°n kh√¥ng th·ªÉ t√¨m ra c√°ch ho√†n th√†nh qu√° tr√¨nh rebase/merge. Git l∆∞u "
"con tr·ªè original HEAD trong m·ªôt variable (bi·∫øn) ƒë∆∞·ª£c g·ªçi l√† ORIG_HEAD tr∆∞·ªõc "
"khi ch·∫°y c√°c h√†nh ƒë·ªông nguy hi·ªÉm, v√¨ v·∫≠y b·∫°n c√≥ th·ªÉ d·ªÖ d√†ng kh√¥i ph·ª•c l·∫°i "
"tr·∫°ng th√°i tr∆∞·ªõc khi rebase/merge."

#. type: Plain text
#: README.md:1240
msgid "```sh (my-branch)$ git reset --hard ORIG_HEAD ```"
msgstr "```sh (my-branch)$ git reset --hard ORIG_HEAD ```"

#. type: Plain text
#: README.md:1243
msgid ""
"<a name=\"force-push-rebase\"></a> ### I rebased, but I don't want to force "
"push"
msgstr ""
"<a name=\"force-push-rebase\"></a> ### T√¥i ƒë√£ rebase, nh∆∞ng t√¥i kh√¥ng mu·ªën "
"push √©p (force push)"

#. type: Plain text
#: README.md:1245
msgid ""
"Unfortunately, you have to force push, if you want those changes to be "
"reflected on the remote branch. This is because you have changed the "
"history. The remote branch won't accept changes unless you force push. This "
"is one of the main reasons many people use a merge workflow, instead of a "
"rebasing workflow - large teams can get into trouble with developers force "
"pushing. Use this with caution. A safer way to use rebase is not to reflect "
"your changes on the remote branch at all, and instead to do the following:"
msgstr ""
"Th·∫≠t kh√¥ng may, b·∫°n b·∫Øt bu·ªôc ph·∫£i push √©p, n·∫øu b·∫°n mu·ªën nh·ªØng thay ƒë·ªïi ƒë√≥ "
"ƒë∆∞·ª£c ph·∫£n √°nh tr√™n nh√°nh remote. ƒêi·ªÅu n√†y l√† do b·∫°n ƒë√£ thay ƒë·ªïi l·ªãch "
"s·ª≠. Nh√°nh remote s·∫Ω kh√¥ng ch·∫•p nh·∫≠n thay ƒë·ªïi tr·ª´ khi b·∫°n push √©p. ƒê√¢y l√† m·ªôt "
"trong nh·ªØng l√Ω do ch√≠nh khi·∫øn nhi·ªÅu ng∆∞·ªùi s·ª≠ d·ª•ng quy tr√¨nh l√†m vi·ªác tr√™n "
"merge, thay v√¨ quy tr√¨nh l√†m vi·ªác tr√™n rebasing - c√°c nh√≥m l·ªõn c√≥ th·ªÉ g·∫∑p "
"r·∫Øc r·ªëi khi developer push √©p. N√™n s·ª≠ d·ª•ng rebase m·ªôt c√°ch th·∫≠n tr·ªçng. M·ªôt "
"c√°ch an to√†n h∆°n ƒë·ªÉ s·ª≠ d·ª•ng rebase kh√¥ng l√† kh√¥ng ph·∫£n √°nh c√°c thay ƒë·ªïi c·ªßa "
"b·∫°n tr√™n nh√°nh remote v√† thay v√†o ƒë√≥ th·ª±c hi·ªán c√°c thao t√°c sau:"

#. type: Plain text
#: README.md:1252
msgid ""
"```sh (main)$ git checkout my-branch (my-branch)$ git rebase -i main "
"(my-branch)$ git checkout main (main)$ git merge --ff-only my-branch ```"
msgstr ""
"```sh (main)$ git checkout my-branch (my-branch)$ git rebase -i main "
"(my-branch)$ git checkout main (main)$ git merge --ff-only my-branch ```"

#. type: Plain text
#: README.md:1254
msgid ""
"For more, see [this SO "
"thread](https://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push)."
msgstr ""
"ƒê·ªÉ bi·∫øt th√™m h√£y xem [ch·ªß ƒë·ªÅ n√†y tr√™n "
"SO](https://stackoverflow.com/questions/11058312/how-can-i-use-git-rebase-without-requiring-a-forced-push)."

#. type: Plain text
#: README.md:1257
msgid "<a name=\"interactive-rebase\"></a> ### I need to combine commits"
msgstr "<a name=\"interactive-rebase\"></a> ### T√¥i c·∫ßn k·∫øt h·ª£p c√°c commit"

#. type: Plain text
#: README.md:1259
msgid ""
"Let's suppose you are working in a branch that is/will become a pull-request "
"against `main`. In the simplest case when all you want to do is to combine "
"*all* commits into a single one and you don't care about commit timestamps, "
"you can reset and recommit. Make sure the main branch is up to date and all "
"your changes committed, then:"
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n ƒëang l√†m vi·ªác trong m·ªôt nh√°nh c√≥ / s·∫Ω tr·ªü th√†nh m·ªôt pull-request "
"cho `main`. Trong tr∆∞·ªùng h·ª£p ƒë∆°n gi·∫£n nh·∫•t khi b·∫°n ch·ªâ mu·ªën l√† k·∫øt h·ª£p *t·∫•t "
"c·∫£* c√°c commit th√†nh m·ªôt commit v√† b·∫°n kh√¥ng quan t√¢m ƒë·∫øn timestamp (m·ªëc "
"th·ªùi gian) c·ªßa commit, b·∫°n c√≥ th·ªÉ reset v√† commit l·∫°i. ƒê·∫£m b·∫£o r·∫±ng nh√°nh "
"main ƒë∆∞·ª£c c·∫≠p nh·∫≠t v√† t·∫•t c·∫£ c√°c thay ƒë·ªïi c·ªßa b·∫°n ƒë∆∞·ª£c commit, sau ƒë√≥:"

#. type: Plain text
#: README.md:1264
msgid ""
"```sh (my-branch)$ git reset --soft main (my-branch)$ git commit -am \"New "
"awesome feature\" ```"
msgstr ""
"```sh (my-branch)$ git reset --soft main (my-branch)$ git commit -am \"New "
"awesome feature\" ```"

#. type: Plain text
#: README.md:1266
msgid ""
"If you want more control, and also to preserve timestamps, you need to do "
"something called an interactive rebase:"
msgstr ""
"N·∫øu b·∫°n mu·ªën ki·ªÉm so√°t ƒë∆∞·ª£c nhi·ªÅu h∆°n v√† c≈©ng ƒë·ªÉ b·∫£o v·ªá timestamp, b·∫°n c·∫ßn "
"ph·∫£i l√†m m·ªôt v√†i th·ª© ƒë∆∞·ª£c g·ªçi l√† interactive rebase:"

#. type: Plain text
#: README.md:1270
msgid "```sh (my-branch)$ git rebase -i main ```"
msgstr "```sh (my-branch)$ git rebase -i main ```"

#. type: Plain text
#: README.md:1272
msgid ""
"If you aren't working against another branch you'll have to rebase relative "
"to your `HEAD`. If you want to squash the last 2 commits, for example, "
"you'll have to rebase against `HEAD~2`. For the last 3, `HEAD~3`, etc."
msgstr ""
"N·∫øu b·∫°n kh√¥ng l√†m vi·ªác v·ªõi m·ªôt nh√°nh kh√°c, b·∫°n ph·∫£i rebase t∆∞∆°ng ƒë·ªëi so v·ªõi "
"`HEAD` c·ªßa b·∫°n. N·∫øu b·∫°n mu·ªën g·ªôp 2 commit cu·ªëi, b·∫°n s·∫Ω ph·∫£i rebase t·ªõi "
"`HEAD~2`. Cho 3 commit cu·ªëi, `HEAD~3`,..."

#. type: Plain text
#: README.md:1276
msgid "```sh (main)$ git rebase -i HEAD~2 ```"
msgstr "```sh (main)$ git rebase -i HEAD~2 ```"

#. type: Plain text
#: README.md:1278
msgid ""
"After you run the interactive rebase command, you will see something like "
"this in your text editor:"
msgstr ""
"Sau khi b·∫°n ch·∫°y l·ªánh interactive rebase, b·∫°n s·∫Ω th·∫•y tr√¥ng gi·ªëng th·∫ø n√†y "
"trong tr√¨nh so·∫°n th·∫£o (text editor) c·ªßa b·∫°n:"

#. type: Plain text
#: README.md:1284
msgid ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature pick "
"b729ad5 fixup pick e3851e8 another fix"
msgstr ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature pick "
"b729ad5 fixup pick e3851e8 another fix"

#. type: Plain text
#: README.md:1303
msgid ""
"# Rebase 8074d12..b729ad5 onto 8074d12 # # Commands: # p, pick = use commit "
"# r, reword = use commit, but edit the commit message # e, edit = use "
"commit, but stop for amending # s, squash = use commit, but meld into "
"previous commit # f, fixup = like \"squash\", but discard this commit's log "
"message # x, exec = run command (the rest of the line) using shell # # These "
"lines can be re-ordered; they are executed from top to bottom.  # # If you "
"remove a line here THAT COMMIT WILL BE LOST.  # # However, if you remove "
"everything, the rebase will be aborted.  # # Note that empty commits are "
"commented out ```"
msgstr ""
"# Rebase 8074d12..b729ad5 onto 8074d12 # # Commands: # p, pick = use commit "
"# r, reword = use commit, but edit the commit message # e, edit = use "
"commit, but stop for amending # s, squash = use commit, but meld into "
"previous commit # f, fixup = like \"squash\", but discard this commit's log "
"message # x, exec = run command (the rest of the line) using shell # # These "
"lines can be re-ordered; they are executed from top to bottom.  # # If you "
"remove a line here THAT COMMIT WILL BE LOST.  # # However, if you remove "
"everything, the rebase will be aborted.  # # Note that empty commits are "
"commented out ```"

#. type: Plain text
#: README.md:1305
msgid ""
"All the lines beginning with a `#` are comments, they won't affect your "
"rebase."
msgstr ""
"T·∫•t c·∫£ c√°c d√≤ng b·∫Øt ƒë·∫ßu b·∫±ng m·ªôt `#` l√† c√°c comment (ch√∫ th√≠ch), ch√∫ng s·∫Ω "
"kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn rebase c·ªßa b·∫°n."

#. type: Plain text
#: README.md:1307
msgid ""
"Then you replace `pick` commands with any in the list above, and you can "
"also remove commits by removing corresponding lines."
msgstr ""
"Sau ƒë√≥ b·∫°n thay th·ªÉ l·ªánh `pick` v·ªõi nh·ªØng b·∫•t c·ª© l·ªánh n√†o trong danh s√°ch "
"tr√™n v√† b·∫°n c≈©ng c√≥ th·ªÉ lo·∫°i b·ªè c√°c commit kh·ªèi rebase b·∫±ng c√°ch xo√° c√°c "
"d√≤ng t∆∞∆°ng ·ª©ng."

#. type: Plain text
#: README.md:1309
msgid ""
"For example, if you want to **leave the oldest (first) commit alone and "
"combine all the following commits with the second oldest**, you should edit "
"the letter next to each commit except the first and the second to say `f`:"
msgstr ""
"V√≠ d·ª•, n·∫øu b·∫°n mu·ªënn **d·ªØ nguy√™n commit c≈© nh·∫•t(ƒë·∫ßu ti√™n) v√† k·∫øt h·ª£p t·∫•t c·∫£ "
"commit sau v·ªõi commit c≈© th·ª© hai**, b·∫°n n√™n ch·ªânh s·ª≠a ch·ªØ c√°i b√™n c·∫°nh m·ªói "
"commit ngo·∫°i tr·ª´ ch·ªØ c√°i ƒë·∫ßu ti√™n v√† ch·ªØ c√°i th·ª© hai v·ªõi `f`:"

#. type: Plain text
#: README.md:1316
msgid ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature f "
"b729ad5 fixup f e3851e8 another fix ```"
msgstr ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature f "
"b729ad5 fixup f e3851e8 another fix ```"

#. type: Plain text
#: README.md:1318
msgid ""
"If you want to combine these commits **and rename the commit**, you should "
"additionally add an `r` next to the second commit or simply use `s` instead "
"of `f`:"
msgstr ""
"N·∫øu b·∫°n mu·ªën k·∫øt h·ª£p t·∫•t c·∫£ c√°c commit **v√† ƒë·ªïi t√™n commit**, b·∫°n n√™n th√™m "
"m·ªôt ch·ªØ c√°i `r` b√™n c·∫°nh commit th·ª© 2 ho·∫∑c ƒë∆°n gi·∫£n s·ª≠ d·ª•ng `s` thay v√¨ `f`:"

#. type: Plain text
#: README.md:1325
msgid ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature s "
"b729ad5 fixup s e3851e8 another fix ```"
msgstr ""
"```vim pick a9c8a1d Some refactoring pick 01b2fd8 New awesome feature s "
"b729ad5 fixup s e3851e8 another fix ```"

#. type: Plain text
#: README.md:1327
msgid "You can then rename the commit in the next text prompt that pops up."
msgstr "B·∫°n c√≥ th·ªÉ ƒë·ªïi t√™n commit trong ƒëo·∫°n h·ªôi tho·∫°i s·∫Ω b·∫≠t l√™n."

#. type: Plain text
#: README.md:1330
msgid "```vim Newer, awesomer features"
msgstr "```vim Newer, awesomer features"

#. type: Plain text
#: README.md:1339, no-wrap
msgid ""
"# Please enter the commit message for your changes. Lines starting\n"
"# with '#' will be ignored, and an empty message aborts the commit.\n"
"# rebase in progress; onto 8074d12\n"
"# You are currently editing a commit while rebasing branch 'main' on "
"'8074d12'.\n"
"#\n"
"# Changes to be committed:\n"
"#   modified:   README.md\n"
"#\n"
msgstr ""
"# Please enter the commit message for your changes. Lines starting\n"
"# with '#' will be ignored, and an empty message aborts the commit.\n"
"# rebase in progress; onto 8074d12\n"
"# You are currently editing a commit while rebasing branch 'main' on "
"'8074d12'.\n"
"#\n"
"# Changes to be committed:\n"
"#   modified:   README.md\n"
"#\n"

#. type: Plain text
#: README.md:1343
msgid "If everything is successful, you should see something like this:"
msgstr "N·∫øu m·ªçi th·ª© th√†nh c√¥ng, b·∫°n s·∫Ω th·∫•y gi·ªëng nh∆∞ th·∫ø n√†y:"

#. type: Plain text
#: README.md:1347
msgid "```sh (main)$ Successfully rebased and updated refs/heads/main.  ```"
msgstr "```sh (main)$ Successfully rebased and updated refs/heads/main.  ```"

#. type: Plain text
#: README.md:1350
msgid ""
"#### Safe merging strategy `--no-commit` performs the merge but pretends the "
"merge failed and does not autocommit, giving the user a chance to inspect "
"and further tweak the merge result before committing. `no-ff` maintains "
"evidence that a feature branch once existed, keeping project history "
"consistent."
msgstr ""
"#### Chi·∫øn l∆∞·ª£c merge an to√†n `--no-commit` th·ª±c hi·ªán merge nh∆∞ng gi·∫£ v·ªù k·∫øt "
"h·ª£p kh√¥ng th√†nh c√¥ng v√† kh√¥ng t·ª± ƒë·ªông t·∫°o commit, cho ph√©p ng∆∞·ªùi d√πng c√≥ c∆° "
"h·ªôi ki·ªÉm tra v√† ch·ªânh th√™m k·∫øt qu·∫£ merge tr∆∞·ªõc khi commit. `no-ff` duy tr√¨ "
"b·∫±ng ch·ª©ng r·∫±ng m·ªôt nh√°nh t√≠nh nƒÉng ƒë√£ t·ª´ng t·ªìn t·∫°i, gi·ªØ l·ªãch s·ª≠ d·ª± √°n nh·∫•t "
"qu√°n."

#. type: Plain text
#: README.md:1354
msgid "```sh (main)$ git merge --no-ff --no-commit my-branch ```"
msgstr "```sh (main)$ git merge --no-ff --no-commit my-branch ```"

#. type: Plain text
#: README.md:1356
msgid "#### I need to merge a branch into a single commit"
msgstr "#### T√¥i c·∫ßn merge m·ªôt nh√°nh th√†nh m·ªôt commit duy nh·∫•t"

#. type: Plain text
#: README.md:1360
msgid "```sh (main)$ git merge --squash my-branch ```"
msgstr "```sh (main)$ git merge --squash my-branch ```"

#. type: Plain text
#: README.md:1363
msgid ""
"<a name=\"rebase-unpushed-commits\"></a> #### I want to combine only "
"unpushed commits"
msgstr ""
"<a name=\"rebase-unpushed-commits\"></a> #### T√¥i ch·ªâ mu·ªën k·∫øt h·ª£p c√°c "
"commit ch∆∞a push"

#. type: Plain text
#: README.md:1365
msgid ""
"Sometimes you have several work in progress commits that you want to combine "
"before you push them upstream. You don't want to accidentally combine any "
"commits that have already been pushed upstream because someone else may have "
"already made commits that reference them."
msgstr ""
"ƒê√¥i khi b·∫°n c√≥ m·ªôt s·ªë commit trong khi c√¥ng-vi·ªác-ƒëang-ti·∫øn-h√†nh v√† b·∫°n mu·ªën "
"k·∫øt h·ª£p th√†nh m·ªôt tr∆∞·ªõc khi b·∫°n ƒë·∫©y l√™n upstream. B·∫°n kh√¥ng mu·ªën v√¥ t√¨nh k·∫øt "
"h·ª£p b·∫•t k·ª≥ commit n√†o ƒë√£ ƒë∆∞·ª£c push l√™n upstream v√¨ ng∆∞·ªùi kh√°c c√≥ th·ªÉ ƒë√£ th·ª±c "
"hi·ªán c√°c commit tham chi·∫øu ch√∫ng."

#. type: Plain text
#: README.md:1369
msgid "```sh (main)$ git rebase -i @{u} ```"
msgstr "```sh (main)$ git rebase -i @{u} ```"

#. type: Plain text
#: README.md:1371
msgid ""
"This will do an interactive rebase that lists only the commits that you "
"haven't already pushed, so it will be safe to reorder/fix/squash anything in "
"the list."
msgstr ""
"L·ªánh n√†y s·∫Ω th·ª±c h√†nh m·ªôt interactive rebase m√† ch·ªâ li·ªát k√™ c√°c commit b·∫°n "
"ch∆∞a push, v√¨ v·∫≠y m·ªçi th·ª© s·∫Ω an to√†n ƒë·ªÉ s·∫Øp x·∫øp l·∫°i / s·ª≠a ch·ªØa / squash "
"(g·ªôp) b·∫•t c·ª© g√¨ trong danh s√°ch"

#. type: Plain text
#: README.md:1373
msgid "#### I need to abort the merge"
msgstr "#### T√¥i c·∫ßn hu·ª∑ b·ªè merge"

#. type: Plain text
#: README.md:1375
msgid ""
"Sometimes the merge can produce problems in certain files, in those cases we "
"can use the option `abort` to abort the current conflict resolution process, "
"and try to reconstruct the pre-merge state."
msgstr ""
"ƒê√¥i khi vi·ªác merge c√≥ th·ªÉ g√¢y ra s·ª± c·ªë trong m·ªôt s·ªë file nh·∫•t ƒë·ªãnh, trong "
"nh·ªØng tr∆∞·ªùng h·ª£p ƒë√≥, ch√∫ng ta c√≥ th·ªÉ s·ª≠ d·ª•ng c·ªù `abort` ƒë·ªÉ h·ªßy b·ªè qu√° tr√¨nh "
"gi·∫£i quy·∫øt xung ƒë·ªôt hi·ªán t·∫°i v√† c·ªë g·∫Øng x√¢y d·ª±ng l·∫°i tr·∫°ng th√°i tr∆∞·ªõc merge."

#. type: Plain text
#: README.md:1379
msgid "```sh (my-branch)$ git merge --abort ```"
msgstr "```sh (my-branch)$ git merge --abort ```"

#. type: Plain text
#: README.md:1381
msgid "This command is available since Git version >= 1.7.4"
msgstr "L·ªánh n√†y c√≥ s·∫µn t·ª´ phi√™n b·∫£n Git >= 1.7.4"

#. type: Plain text
#: README.md:1383
msgid "### I need to update the parent commit of my branch"
msgstr "### T√¥i c·∫ßn c·∫≠p nh·∫≠t commit g·ªëc (parent commit) cho nh√°nh c·ªßa t√¥i"

#. type: Plain text
#: README.md:1385
msgid ""
"Say I have a main branch, a feature-1 branch branched from main, and a "
"feature-2 branch branched off of feature-1. If I make a commit to feature-1, "
"then the parent commit of feature-2 is no longer accurate (it should be the "
"head of feature-1, since we branched off of it). We can fix this with `git "
"rebase --onto`."
msgstr ""
"Gi·∫£ s·ª≠ t√¥i c√≥ m·ªôt nh√°nh main, m·ªôt nh√°nh feature-1 t√°ch t·ª´ main v√† m·ªôt nh√°nh "
"feature-2 t√°ch t·ª´ feature-1. N·∫øu t√¥i th·ª±c hi·ªán commit ƒë·ªëi v·ªõi feature-1, th√¨ "
"commit c·ªßa feature-2 kh√¥ng c√≤n ch√≠nh x√°c n·ªØa (g·ªëc n√™n l√† ƒë·∫ßu c·ªßa feature-1, "
"v√¨ ch√∫ng ta ƒë√£ t√°ch nh√°nh t·ª´ n√≥). Ch√∫ng ta c√≥ th·ªÉ s·ª≠a v·∫•n ƒë·ªÅ n√†y v·ªõi `git "
"rebase --onto`."

#. type: Plain text
#: README.md:1389
msgid ""
"```sh (feature-2)$ git rebase --onto feature-1 <the first commit in your "
"feature-2 branch that you don't want to bring along> feature-2 ```"
msgstr ""
"```sh (feature-2)$ git rebase --onto feature-1 <commit ƒë·∫ßu ti√™n trong nh√°nh "
"feature-2 m√† b·∫°n kh√¥ng mu·ªën mang theo> feature-2 ```"

#. type: Plain text
#: README.md:1391
msgid ""
"This helps in sticky scenarios where you might have a feature built on "
"another feature that hasn't been merged yet, and a bugfix on the feature-1 "
"branch needs to be reflected in your feature-2 branch."
msgstr ""
"L·ªánh n√†y gi√∫p trong c√°c tr∆∞·ªùng h·ª£p kh√≥ n∆°i b·∫°n c√≥ th·ªÉ c√≥ m·ªôt feature ƒë∆∞·ª£c "
"x√¢y d·ª±ng tr√™n m·ªôt feature kh√°c ch∆∞a ƒë∆∞·ª£c merge, ho·∫∑c m·ªôt bugfix (v√° l·ªói) "
"tr√™n nh√°nh feature-1 c·∫ßn ƒë∆∞·ª£c ph·∫£n √°nh trong nh√°nh feature-2 c·ªßa b·∫°n."

#. type: Plain text
#: README.md:1393
msgid "### Check if all commits on a branch are merged"
msgstr "### Ki·ªÉm tra xem t·∫•t c·∫£ commit tr√™n m·ªôt nh√°nh ƒë√£ ƒë∆∞·ª£c merge"

#. type: Plain text
#: README.md:1395
msgid ""
"To check if all commits on a branch are merged into another branch, you "
"should diff between the heads (or any commits) of those branches:"
msgstr ""
"ƒê·ªÉ ki·ªÉm tra t·∫•t c·∫£ commit tr√™n m·ªôt nh√°nh ƒë√£ ƒë∆∞·ª£c merge v√†o nh√°nh kh√°c, b·∫°n "
"n√™n diff (kh√°c bi·ªát) gi·ªØa c√°c head (ho·∫∑c c√°c commit) c·ªßa c√°c nh√°nh:"

#. type: Plain text
#: README.md:1399
msgid ""
"```sh (main)$ git log --graph --left-right --cherry-pick --oneline "
"HEAD...feature/120-on-scroll ```"
msgstr ""
"```sh (main)$ git log --graph --left-right --cherry-pick --oneline "
"HEAD...feature/120-on-scroll ```"

#. type: Plain text
#: README.md:1401
msgid ""
"This will tell you if any commits are in one but not the other, and will "
"give you a list of any nonshared between the branches. Another option is to "
"do this:"
msgstr ""
"L·ªánh n√†y s·∫Ω cho b·∫°n bi·∫øt n·∫øu b·∫•t k·ª≥ commit ·ªü trong m·ªôt nh√°nh nh∆∞ng kh√¥ng "
"trong nh√°nh kia, v√† s·∫Ω cung c·∫•p cho b·∫°n m·ªôt danh s√°ch c·ªßa b·∫•t k·ª≥ t·ªáp kh√¥ng "
"chia s·∫Ω gi·ªØa c√°c nh√°nh. M·ªôt l·ª±a ch·ªçn kh√°c l√† ch·∫°y l·ªánh:"

#. type: Plain text
#: README.md:1405
msgid "```sh (main)$ git log main ^feature/120-on-scroll --no-merges ```"
msgstr "```sh (main)$ git log main ^feature/120-on-scroll --no-merges ```"

#. type: Plain text
#: README.md:1407
msgid "### Possible issues with interactive rebases"
msgstr "### C√°c v·∫•n ƒë·ªÅ c√≥ th·ªÉ x·∫£y ra v·ªõi interactive rebase"

#. type: Plain text
#: README.md:1410
msgid "<a name=\"noop\"></a> #### The rebase editing screen says 'noop'"
msgstr "<a name=\"noop\"></a> #### M√†n h√¨nh ch·ªânh s·ª≠a rebase ghi 'noop'"

#. type: Plain text
#: README.md:1415
msgid "If you're seeing this: ``` noop ```"
msgstr "N·∫øu b·∫°n th·∫•y nh∆∞ sau: ``` noop ```"

#. type: Plain text
#: README.md:1417
msgid ""
"That means you are trying to rebase against a branch that is at an identical "
"commit, or is *ahead* of your current branch. You can try:"
msgstr ""
"ƒêi·ªÅu n√†y c√≥ nghƒ©a b·∫°n ƒëang c·ªë rebase l·∫°i m·ªôt nh√°nh ƒëang c√≥ commit gi·ªëng h·ªát "
"ho·∫∑c l√† *·ªü tr∆∞·ªõc* nh√°nh hi·ªán t·∫°i. B·∫°n c√≥ th·ªÉ th·ª≠:"

#. type: Bullet: '* '
#: README.md:1420
msgid "making sure your main branch is where it should be"
msgstr "ƒë·∫£m b·∫£o nh√°nh main c·ªßa b·∫°n ·ªü ƒë√∫ng ch·ªó"

#. type: Bullet: '* '
#: README.md:1420
msgid "rebase against `HEAD~2` or earlier instead"
msgstr "rebase v·ªõi `HEAD~2` ho·∫∑c c≈© h∆°n"

#. type: Plain text
#: README.md:1423
msgid "<a name=\"merge-conflict\"></a> #### There were conflicts"
msgstr "<a name=\"merge-conflict\"></a> #### C√≥ m·ªôt v√†i xung ƒë·ªôt"

#. type: Plain text
#: README.md:1425
msgid ""
"If you are unable to successfully complete the rebase, you may have to "
"resolve conflicts."
msgstr ""
"N·∫øu b·∫°n kh√¥ng th·ªÉ ho√†n t·∫•t th√†nh c√¥ng rebase, b·∫°n c√≥ th·ªÉ ph·∫£i gi·∫£i quy·∫øt "
"xung ƒë·ªôt."

#. type: Plain text
#: README.md:1427
msgid "First run `git status` to see which files have conflicts in them:"
msgstr "ƒê·∫ßu ti√™n ch·∫°y `git status` ƒë·ªÉ xem t·ªáp n√†o c√≥ xung ƒë·ªôt:"

#. type: Plain text
#: README.md:1434, no-wrap
msgid ""
"```sh\n"
"(my-branch)$ git status\n"
"On branch my-branch\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"
msgstr ""
"```sh\n"
"(my-branch)$ git status\n"
"On branch my-branch\n"
"Changes not staged for commit:\n"
"  (use \"git add <file>...\" to update what will be committed)\n"
"  (use \"git checkout -- <file>...\" to discard changes in working "
"directory)\n"

#. type: Plain text
#: README.md:1437, no-wrap
msgid ""
"  both modified:   README.md\n"
"```\n"
msgstr ""
"  both modified:   README.md\n"
"```\n"

#. type: Plain text
#: README.md:1439
msgid ""
"In this example, `README.md` has conflicts. Open that file and look for the "
"following:"
msgstr ""
"Trong v√≠ d·ª• ƒë√≥, `README.md` c√≥ xung ƒë·ªôt. M·ªü t·ªáp ƒë√≥ v√† t√¨m nh·ªØng d√≤ng tr√¥ng "
"nh∆∞ sau:"

#. type: Plain text
#: README.md:1447, no-wrap
msgid ""
"```vim\n"
"   <<<<<<< HEAD\n"
"   some code\n"
"   =========\n"
"   some code\n"
"   >>>>>>> new-commit\n"
"```\n"
msgstr ""
"```vim\n"
"   <<<<<<< HEAD\n"
"   some code\n"
"   =========\n"
"   some code\n"
"   >>>>>>> new-commit\n"
"```\n"

#. type: Plain text
#: README.md:1449
msgid ""
"You will need to resolve the differences between the code that was added in "
"your new commit (in the example, everything from the middle line to "
"`new-commit`) and your `HEAD`."
msgstr ""
"B·∫°n s·∫Ω c·∫ßn ph·∫£i gi·∫£i quy·∫øt s·ª± kh√°c bi·ªát gi·ªØa code ƒë√£ ƒë∆∞·ª£c th√™m v√†o v·ªõi "
"commit m·ªõi c·ªßa b·∫°n (trong v√≠ d·ª•, m·ªçi th·ª© t·ª´ d√≤ng ·ªü gi·ªØa cho ƒë·∫øn "
"`new-commit`) v√† `HEAD` c·ªßa b·∫°n."

#. type: Plain text
#: README.md:1451
msgid ""
"If you want to keep one branch's version of the code, you can use `--ours` "
"or `--theirs`:"
msgstr ""
"N·∫øu b·∫°n mu·ªën gi·ªØ phi√™n b·∫£n code c·ªßa m·ªôt nh√°nh, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng `--ours` "
"ho·∫∑c `--theirs`:"

#. type: Plain text
#: README.md:1455
msgid "```sh (main*)$ git checkout --ours README.md ```"
msgstr "```sh (main*)$ git checkout --ours README.md ```"

#. type: Plain text
#: README.md:1458
msgid ""
"- When *merging*, use `--ours` to keep changes from the local branch, or "
"`--theirs` to keep changes from the other branch.  - When *rebasing*, use "
"`--theirs` to keep changes from the local branch, or `--ours` to keep "
"changes from the other branch. For an explanation of this swap, see [this "
"note in the Git "
"documentation](https://git-scm.com/docs/git-rebase#git-rebase---merge)."
msgstr ""
"- Khi *ƒëang merge*, s·ª≠ d·ª•ng `--ours` ƒë·ªÉ gi·ªØ c√°c thay ƒë·ªïi t·ª´ nh√°nh local, "
"ho·∫∑c `--theirs` ƒë·ªÉ gi·ªØ c√°c thay ƒë·ªïi t·ª´ nh√°nh kh√°c.  - Khi *ƒëang rebase*, s·ª≠ "
"d·ª•ng `--theirs` ƒë·ªÉ gi·ªØ c√°c thay ƒë·ªïi t·ª´ nh√°nh local, ho·∫∑c `--ours` ƒë·ªÉ gi·ªØ c√°c "
"thay ƒë·ªïi t·ª´ nh√°nh kh√°c. ƒê·ªÉ hi·ªÉu gi·∫£i th√≠ch v·ªÅ s·ª± ho√°n ƒë·ªïi n√†y, h√£y xem [ghi "
"ch√∫ n√†y trong t√†i li·ªáu "
"Git](https://git-scm.com/docs/git-rebase#git-rebase---merge)."

#. type: Plain text
#: README.md:1460
msgid "If the merges are more complicated, you can use a visual diff editor:"
msgstr ""
"N·∫øu vi·ªác merge ph·ª©c t·∫°p h∆°n, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng tr√¨nh ch·ªânh s·ª≠a kh√°c bi·ªát "
"tr·ª±c quan (visual diff editor):"

#. type: Plain text
#: README.md:1464
msgid "```sh (main*)$ git mergetool -t opendiff ```"
msgstr "```sh (main*)$ git mergetool -t opendiff ```"

#. type: Plain text
#: README.md:1466
msgid ""
"After you have resolved all conflicts and tested your code, `git add` the "
"files you have changed, and then continue the rebase with `git rebase "
"--continue`"
msgstr ""
"Sau khi b·∫°n ƒë√£ gi·∫£i quy·∫øt t·∫•t c·∫£ xung ƒë·ªôt v√† ƒë√£ ki·ªÉm tra code c·ªßa m√¨nh, `git "
"add` c√°c file ƒë√£ thay ƒë·ªïi v√† sau ƒë√≥ ti·∫øp t·ª•c rebase v·ªõi `git rebase "
"--continue`"

#. type: Plain text
#: README.md:1471
msgid "```sh (my-branch)$ git add README.md (my-branch)$ git rebase --continue ```"
msgstr "```sh (my-branch)$ git add README.md (my-branch)$ git rebase --continue ```"

#. type: Plain text
#: README.md:1473
msgid ""
"If after resolving all the conflicts you end up with an identical tree to "
"what it was before the commit, you need to `git rebase --skip` instead."
msgstr ""
"N·∫øu sau khi gi·∫£i quy·∫øt t·∫•t c·∫£ c√°c xung ƒë·ªôt b·∫°n k·∫øt th√∫c v·ªõi m·ªôt c√¢y gi·ªëng "
"h·ªát v·ªõi c√°i tr∆∞·ªõc khi th·ª±c hi·ªán, b·∫°n c·∫ßn `git rebase --skip`."

#. type: Plain text
#: README.md:1475
msgid ""
"If at any time you want to stop the entire rebase and go back to the "
"original state of your branch, you can do so:"
msgstr ""
"N·∫øu b·∫•t k·ª≥ l√∫c n√†o b·∫°n mu·ªën d·ª´ng to√†n b·ªô qu√° tr√¨nh rebase v√† quay tr·ªü l·∫°i "
"tr·∫°ng th√°i ban ƒë·∫ßu nh√°nh c·ªßa b·∫°n, b·∫°n c√≥ th·ªÉ l√†m nh∆∞ th·∫ø n√†y:"

#. type: Plain text
#: README.md:1479
msgid "```sh (my-branch)$ git rebase --abort ```"
msgstr "```sh (my-branch)$ git rebase --abort ```"

#. type: Plain text
#: README.md:1482
msgid "<a name=\"stashing\"></a> ## Stash"
msgstr "<a name=\"stashing\"></a> ## Stash (C·∫•t)"

#. type: Plain text
#: README.md:1484
msgid "### Stash all edits"
msgstr "### Stash t·∫•t c·∫£ ch·ªânh s·ª≠a"

#. type: Plain text
#: README.md:1486
msgid "To stash all the edits in your working directory"
msgstr "ƒê·ªÉ stash t·∫•t c·∫£ c√°c ch·ªânh s·ª≠a trong th∆∞ m·ª•c l√†m vi·ªác"

#. type: Plain text
#: README.md:1490
msgid "```sh $ git stash ```"
msgstr "```sh $ git stash ```"

#. type: Plain text
#: README.md:1492
msgid "If you also want to stash untracked files, use `-u` option."
msgstr "N·∫øu b·∫°n c≈©ng mu·ªën stash c√°c file ch∆∞a ƒë∆∞·ª£c theo d√µi, s·ª≠ d·ª•ng c·ªù `-u`."

#. type: Plain text
#: README.md:1496
msgid "```sh $ git stash -u ```"
msgstr "```sh $ git stash -u ```"

#. type: Plain text
#: README.md:1498
msgid "### Stash specific files"
msgstr "### Stash c√°c file c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1500
msgid "To stash only one file from your working directory"
msgstr "ƒê·ªÉ stash ch·ªâ m·ªôt file t·ª´ th∆∞ m·ª•c l√†m vi·ªác"

#. type: Plain text
#: README.md:1504
msgid "```sh $ git stash push working-directory-path/filename.ext ```"
msgstr "```sh $ git stash push working-directory-path/filename.ext ```"

#. type: Plain text
#: README.md:1506
msgid "To stash multiple files from your working directory"
msgstr "ƒê·ªÉ stash nhi·ªÅu file t·ª´ th∆∞ m·ª•c l√†m vi·ªác"

#. type: Plain text
#: README.md:1510
msgid ""
"```sh $ git stash push working-directory-path/filename1.ext "
"working-directory-path/filename2.ext ```"
msgstr ""
"```sh $ git stash push working-directory-path/filename1.ext "
"working-directory-path/filename2.ext ```"

#. type: Plain text
#: README.md:1513
msgid "<a name=\"stash-msg\"></a> ### Stash with message"
msgstr "<a name=\"stash-msg\"></a> ### Stash v·ªõi message (th√¥ng ƒëi·ªáp)"

#. type: Plain text
#: README.md:1517
msgid "```sh $ git stash save <message> ```"
msgstr "```sh $ git stash save <message> ```"

#. type: Plain text
#: README.md:1519
msgid "or"
msgstr "ho·∫∑c"

#. type: Plain text
#: README.md:1523
msgid "```sh $ git stash push -m <message> ```"
msgstr "```sh $ git stash push -m <message> ```"

#. type: Plain text
#: README.md:1526
msgid "<a name=\"stash-apply-specific\"></a> ### Apply a specific stash from list"
msgstr ""
"<a name=\"stash-apply-specific\"></a> ### Apply m·ªôt stash c·ª• th·ªÉ t·ª´ danh "
"s√°ch"

#. type: Plain text
#: README.md:1528
msgid "First check your list of stashes with message using"
msgstr "ƒê·∫ßu ti√™n ki·ªÉm tra danh s√°ch c√°c stash v·ªõi message b·∫±ng l·ªánh"

#. type: Plain text
#: README.md:1532
msgid "```sh $ git stash list ```"
msgstr "```sh $ git stash list ```"

#. type: Plain text
#: README.md:1534
msgid "Then apply a specific stash from the list using"
msgstr "Sau ƒë√≥ apply (√°p d·ª•ng) m·ªôt stash c·ª• th·ªÉ t·ª´ danh s√°ch v·ªõi"

#. type: Plain text
#: README.md:1538
msgid "```sh $ git stash apply \"stash@{n}\" ```"
msgstr "```sh $ git stash apply \"stash@{n}\" ```"

#. type: Plain text
#: README.md:1540
msgid ""
"Here, 'n' indicates the position of the stash in the stack. The topmost "
"stash will be position 0."
msgstr ""
"·ªû ƒë√¢y, 'n' cho bi·∫øt v·ªã tr√≠ c·ªßa stash trong stack. Stash tr√™n c√πng s·∫Ω l√† v·ªã "
"tr√≠ 0."

#. type: Plain text
#: README.md:1542
msgid "Furthermore, using a time-based stash reference is also possible."
msgstr "H∆°n n·ªØa, c≈©ng c√≥ th·ªÉ ch·ªâ stash d·ª±a v√†o m·ªëc th·ªùi gian"

#. type: Plain text
#: README.md:1546
msgid "```sh $ git stash apply \"stash@{2.hours.ago}\" ```"
msgstr "```sh $ git stash apply \"stash@{2.hours.ago}\" ```"

#. type: Plain text
#: README.md:1549
msgid ""
"<a name=\"stage-and-keep-unstaged\"></a> ### Stash while keeping unstaged "
"edits"
msgstr ""
"<a name=\"stage-and-keep-unstaged\"></a> ### Stash trong khi gi·ªØ c√°c thay "
"ƒë·ªïi ch∆∞a stage"

#. type: Plain text
#: README.md:1551
msgid "You can manually create a `stash commit`, and then use `git stash store`."
msgstr "B·∫°n c√≥ th·ªÉ t·∫°o m·ªôt `stash commit`, r·ªìi d√πng l·ªánh `git stash store`."

#. type: Plain text
#: README.md:1556
msgid "```sh $ git stash create $ git stash store -m <message> CREATED_SHA1 ```"
msgstr "```sh $ git stash create $ git stash store -m <message> CREATED_SHA1 ```"

#. type: Plain text
#: README.md:1558
msgid "## Finding"
msgstr "## Finding (T√¨m)"

#. type: Plain text
#: README.md:1560
msgid "### I want to find a string in any commit"
msgstr "### T√¥i mu·ªën t√¨m m·ªôt chu·ªói k√Ω t·ª± trong b·∫•t k·ª≥ commit n√†o"

#. type: Plain text
#: README.md:1562
msgid ""
"To find a certain string which was introduced in any commit, you can use the "
"following structure:"
msgstr ""
"ƒê·ªÉ t√¨m m·ªôt chu·ªói k√Ω t·ª± ƒë∆∞·ª£c gi·ªõi thi·ªáu v·ªõi commit, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh "
"nh∆∞ sau:"

#. type: Plain text
#: README.md:1566
msgid "```sh $ git log -S \"string to find\" ```"
msgstr "```sh $ git log -S \"chu·ªói k√Ω t·ª± ƒë·ªÉ t√¨m\" ```"

#. type: Plain text
#: README.md:1568
msgid "Commons parameters:"
msgstr "C√°c c·ªù th∆∞·ªùng d√πng:"

#. type: Bullet: '* '
#: README.md:1570
msgid ""
"`--source` means to show the ref name given on the command line by which "
"each commit was reached."
msgstr ""
"`--source` c√≥ nghƒ©a l√† hi·ªÉn th·ªã t√™n ref ƒë∆∞·ª£c ƒë∆∞a ra tr√™n d√≤ng l·ªánh m√† m·ªói "
"l·∫ßn commit ƒë√£ ƒë·∫°t t·ªõi."

#. type: Bullet: '* '
#: README.md:1572
msgid "`--all` means to start from every branch."
msgstr "`--all` nghƒ©a l√† b·∫Øt ƒë·∫ßu t·ª´ m·ªçi nh√°nh."

#. type: Bullet: '* '
#: README.md:1574
msgid ""
"`--reverse` prints in reverse order, it means that will show the first "
"commit that made the change."
msgstr ""
"`--reverse` in theo th·ª© t·ª± ng∆∞·ª£c l·∫°i, c√≥ nghƒ©a l√† hi·ªÉn th·ªã commit ƒë·∫ßu ti√™n "
"ƒë√£ th·ª±c hi·ªán thay ƒë·ªïi."

#. type: Plain text
#: README.md:1577
msgid ""
"<a name=\"i-want-to-find-by-author-committer\"></a> ### I want to find by "
"author/committer"
msgstr ""
"<a name=\"i-want-to-find-by-author-committer\"></a> ### T√¥i mu·ªën t√¨m t√°c gi·∫£ "
"ho·∫∑c ng∆∞·ªùi commit"

#. type: Plain text
#: README.md:1579
msgid "To find all commits by author/committer you can use:"
msgstr "ƒê·ªÉ t√¨m t·∫•t c·∫£ commit t·ª´ t√°c gi·∫£ ho·∫∑c ng∆∞·ªùi commit b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:"

#. type: Plain text
#: README.md:1584
msgid ""
"```sh $ git log --author=<name or email> $ git log --committer=<name or "
"email> ```"
msgstr ""
"```sh $ git log --author=<t√™n ho·∫∑c email> $ git log --committer=<t√™n ho·∫∑c "
"email> ```"

#. type: Plain text
#: README.md:1586
msgid ""
"Keep in mind that author and committer are not the same. The `--author` is "
"the person who originally wrote the code; on the other hand, the "
"`--committer`, is the person who committed the code on behalf of the "
"original author."
msgstr ""
"H√£y nh·ªõ r·∫±ng t√°c gi·∫£ v√† ng∆∞·ªùi commit kh√¥ng gi·ªëng nhau. `--author` l√† ng∆∞·ªùi "
"ban ƒë·∫ßu vi·∫øt code; m·∫∑t kh√°c, `--committer`, l√† ng∆∞·ªùi ƒë√£ commit code thay m·∫∑t "
"t√°c gi·∫£ g·ªëc."

#. type: Plain text
#: README.md:1588
msgid "### I want to list commits containing specific files"
msgstr "### T√¥i mu·ªën li·ªát k√™ c√°c commit ch·ª©a c√°c file c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1590
msgid "To find all commits containing a specific file you can use:"
msgstr "ƒê·ªÉ t√¨m t·∫•t c·∫£ c√°c commit ch∆∞a m·ªôt file c·ª• th·ªÉ b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng:"

#. type: Plain text
#: README.md:1594
msgid "```sh $ git log -- <path to file> ```"
msgstr "```sh $ git log -- <path to file> ```"

#. type: Plain text
#: README.md:1596
msgid ""
"You would usually specify an exact path, but you may also use wild cards in "
"the path and file name:"
msgstr ""
"B·∫°n th∆∞·ªùng s·∫Ω ch·ªâ ƒë·ªãnh m·ªôt ƒë∆∞·ªùng d·∫´n (filepath) ch√≠nh x√°c, nh∆∞ng b·∫°n c≈©ng c√≥ "
"th·ªÉ s·ª≠ d·ª•ng c√°c k√Ω t·ª± ƒë·∫°i di·ªán b·∫•t k·ª≥ cho ƒë∆∞·ªùng d·∫´n v√† t√™n t·ªáp:"

#. type: Plain text
#: README.md:1600
msgid "```sh $ git log -- **/*.js ```"
msgstr "```sh $ git log -- **/*.js ```"

#. type: Plain text
#: README.md:1602
msgid ""
"While using wildcards, it's useful to inform `--name-status` to see the list "
"of committed files:"
msgstr ""
"Trong khi s·ª≠ d·ª•ng k√Ω t·ª± ƒë·∫°i di·ªán b·∫•t k·ª≥, s·∫Ω h·ªØu √≠ch h∆°n khi th√™m "
"`--name-status` ƒë·ªÉ xem danh s√°ch c√°c t·ªáp trong commit:"

#. type: Plain text
#: README.md:1606
msgid "```sh $ git log --name-status -- **/*.js ```"
msgstr "```sh $ git log --name-status -- **/*.js ```"

#. type: Plain text
#: README.md:1609
msgid ""
"<a name=\"#i-want-to-view-the-commit-history-for-a-specific-function\"></a> "
"### I want to view the commit history for a specific function"
msgstr ""
"<a name=\"#i-want-to-view-the-commit-history-for-a-specific-function\"></a> "
"### T√¥i mu·ªën xem l·ªãch s·ª≠ commit c·ªßa m·ªôt function (ch·ª©c nƒÉng) c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1611
msgid "To trace the evolution of a single function you can use:"
msgstr "ƒê·ªÉ truy t√¨m l·ªãch s·ª≠ ti·∫øn h√≥a c·ªßa m·ªôt function l√† d√πng l·ªánh:"

#. type: Plain text
#: README.md:1615
msgid "```sh $ git log -L :FunctionName:FilePath ```"
msgstr "```sh $ git log -L :T√™nFunction:FilePath ```"

#. type: Plain text
#: README.md:1617
msgid ""
"Note that you can combine this with further `git log` options, like "
"[revision ranges](https://git-scm.com/docs/gitrevisions) and [commit "
"limits](https://git-scm.com/docs/git-log/#_commit_limiting)."
msgstr ""
"Ghi ch√∫ l√† b·∫°n c√≥ th·ªÉ x√¢y d·ª±ng l·ªánh tr√™n th√™m v·ªõi c√°c c·ªù `git log` kh√°c, "
"gi·ªëng nh∆∞ [ph·∫°m vi s·ª≠a ƒë·ªïi](https://git-scm.com/docs/gitrevisions) v√† [h·∫°n "
"m·ª©c commit](https://git-scm.com/docs/git-log/#_commit_limiting)."

#. type: Plain text
#: README.md:1619
msgid "### Find a tag where a commit is referenced"
msgstr "### T√¨m m·ªôt tag m√† m·ªôt commit ƒë√£ tham chi·∫øu"

#. type: Plain text
#: README.md:1621
msgid "To find all tags containing a specific commit:"
msgstr "ƒê·ªÉ t√¨m t·∫•t c·∫£ c√°c tag c√≥ ch·ª©a m·ªôt commit c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1625
msgid "```sh $ git tag --contains <commitid> ```"
msgstr "```sh $ git tag --contains <commitid> ```"

#. type: Plain text
#: README.md:1627
msgid "## Submodules"
msgstr "## Submodules"

#. type: Plain text
#: README.md:1630
msgid "<a name=\"clone-submodules\"></a> ### Clone all submodules"
msgstr "<a name=\"clone-submodules\"></a> ### Clone t·∫•t c·∫£ submodules"

#. type: Plain text
#: README.md:1634
msgid "```sh $ git clone --recursive git://github.com/foo/bar.git ```"
msgstr "```sh $ git clone --recursive git://github.com/foo/bar.git ```"

#. type: Plain text
#: README.md:1636
msgid "If already cloned:"
msgstr "N·∫øu ƒë√£ clone:"

#. type: Plain text
#: README.md:1640
msgid "```sh $ git submodule update --init --recursive ```"
msgstr "```sh $ git submodule update --init --recursive ```"

#. type: Plain text
#: README.md:1643
msgid "<a name=\"delete-submodule\"></a> ### Remove a submodule"
msgstr "<a name=\"delete-submodule\"></a> ### Xo√° m·ªôt submodule"

#. type: Plain text
#: README.md:1645
msgid ""
"Creating a submodule is pretty straight-forward, but deleting them less "
"so. The commands you need are:"
msgstr ""
"T·∫°o m·ªôt submodule l√† kh√° r√µ r√†nh, nh∆∞ng x√≥a ch√∫ng √≠t kh√¥ng nh∆∞ v·∫≠y. C√°c l·ªánh "
"b·∫°n c·∫ßn l√†:"

#. type: Plain text
#: README.md:1652
msgid ""
"```sh $ git submodule deinit submodulename $ git rm submodulename $ git rm "
"--cached submodulename $ rm -rf .git/modules/submodulename ```"
msgstr ""
"```sh $ git submodule deinit submodulename $ git rm submodulename $ git rm "
"--cached submodulename $ rm -rf .git/modules/submodulename ```"

#. type: Plain text
#: README.md:1654
msgid "## Miscellaneous Objects"
msgstr "## Miscellaneous Objects (Nh·ªØng th·ª© kh√°c)"

#. type: Plain text
#: README.md:1656
msgid "### Copy a folder or file from one branch to another"
msgstr "### Copy th∆∞ m·ª•c ho·∫∑c t·ªáp file t·ª´ m·ªôt nh√°nh sang nh√°nh kh√°c"

#. type: Plain text
#: README.md:1660
msgid ""
"```sh $ git checkout <branch-you-want-the-directory-from> -- <folder-name or "
"file-name> ```"
msgstr "```sh $ git checkout <nh√°nh-c√≥-t·ªáp-b·∫°n-mu·ªën> -- <th∆∞ m·ª•c ho·∫∑c t√™n file> ```"

#. type: Plain text
#: README.md:1662
msgid "### Restore a deleted file"
msgstr "### Kh√¥i ph·ª•c m·ªôt file ƒë√£ b·ªã xo√°"

#. type: Plain text
#: README.md:1664
msgid "First find the commit when the file last existed:"
msgstr "ƒê·∫ßu ti√™n t√¨m commit cu·ªëi c√πng ma file v·∫´n t·ªìn t·∫°i:"

#. type: Plain text
#: README.md:1668
msgid "```sh $ git rev-list -n 1 HEAD -- filename ```"
msgstr "```sh $ git rev-list -n 1 HEAD -- filename ```"

#. type: Plain text
#: README.md:1670
msgid "Then checkout that file:"
msgstr "Sau ƒë√≥ checkout file:"

#. type: Plain text
#: README.md:1674
msgid "``` git checkout deletingcommitid^ -- filename ```"
msgstr "``` git checkout id-c·ªßa-commit-delete-tr√™n^ -- filename ```"

#. type: Plain text
#: README.md:1676
msgid "### Delete tag"
msgstr "### Xo√° tag"

#. type: Plain text
#: README.md:1681
msgid "```sh $ git tag -d <tag_name> $ git push <remote> :refs/tags/<tag_name> ```"
msgstr "```sh $ git tag -d <tag_name> $ git push <remote> :refs/tags/<tag_name> ```"

#. type: Plain text
#: README.md:1684
msgid "<a name=\"recover-tag\"></a> ### Recover a deleted tag"
msgstr "<a name=\"recover-tag\"></a> ### Kh√¥i ph·ª•c m·ªôt tag ƒë√£ b·ªã xo√°"

#. type: Plain text
#: README.md:1686
msgid ""
"If you want to recover a tag that was already deleted, you can do so by "
"following these steps: First, you need to find the unreachable tag:"
msgstr ""
"N·∫øu b·∫°n mu·ªën kh√¥i ph·ª•c tag ƒë√£ b·ªã x√≥a, b·∫°n c√≥ th·ªÉ l√†m ƒë∆∞·ª£c v·∫≠y v·ªõi c√°c b∆∞·ªõc "
"sau: Tr∆∞·ªõc ti√™n, b·∫°n c·∫ßn ph·∫£i t√¨m tag kh√¥ng th·ªÉ truy c·∫≠p"

#. type: Plain text
#: README.md:1690
msgid "```sh $ git fsck --unreachable | grep tag ```"
msgstr "```sh $ git fsck --unreachable | grep tag ```"

#. type: Plain text
#: README.md:1692
msgid ""
"Make a note of the tag's hash. Then, restore the deleted tag with following, "
"making use of [`git update-ref`](https://git-scm.com/docs/git-update-ref):"
msgstr ""
"Ghi l·∫°i m√£ hash c·ªßa tag. Sau ƒë√≥, kh√¥i ph·ª•c tag ƒë√£ x√≥a theo c√°ch s·ª≠ d·ª•ng "
"[`git update-ref`](https://git-scm.com/docs/git-update-ref):"

#. type: Plain text
#: README.md:1696
msgid "```sh $ git update-ref refs/tags/<tag_name> <hash> ```"
msgstr "```sh $ git update-ref refs/tags/<tag_name> <hash> ```"

#. type: Plain text
#: README.md:1698
msgid "Your tag should now have been restored."
msgstr "Tag c·ªßa b·∫°n b√¢y gi·ªù ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c."

#. type: Plain text
#: README.md:1700
msgid "### Deleted Patch"
msgstr "### Patch (V√°) b·ªã x√≥a"

#. type: Plain text
#: README.md:1702
msgid ""
"If someone has sent you a pull request on GitHub, but then deleted their "
"original fork, you will be unable to clone their repository or to use `git "
"am` as the [.diff, .patch](https://github.com/blog/967-github-secrets) URLs "
"become unavailable. But you can checkout the PR itself using [GitHub's "
"special refs](https://gist.github.com/piscisaureus/3342247). To fetch the "
"content of PR#1 into a new branch called pr_1:"
msgstr ""
"N·∫øu ai ƒë√≥ ƒë√£ g·ª≠i cho b·∫°n m·ªôt pull request tr√™n GitHub, nh∆∞ng sau ƒë√≥ ƒë√£ xo√° "
"ch√∫ng tr√™n fork g·ªëc, b·∫°n s·∫Ω kh√¥ng th·ªÉ clone repository c·ªßa h·ªç ho·∫∑c s·ª≠ d·ª•ng "
"`git am` v√¨ url c·ªßa [.diff, "
".patch](https://github.com/blog/967-github-secrets) kh√¥ng d√πng ƒë∆∞·ª£c. Nh∆∞ng "
"b·∫°n c√≥ th·ªÉ checkout ch√≠nh PR b·∫±ng c√°ch s·ª≠ d·ª•ng [GitHub's special "
"refs](https://gist.github.com/piscisaureus/3342247). ƒê·ªÉ fetch n·ªôi dung c·ªßa "
"PR#1 v√†o m·ªôt nh√°nh ƒë∆∞·ª£c g·ªçi l√† pr_1, ch·∫°y:"

#. type: Plain text
#: README.md:1708, no-wrap
msgid ""
"```sh\n"
"$ git fetch origin refs/pull/1/head:pr_1\n"
"From github.com:foo/bar\n"
" * [new ref]         refs/pull/1/head -> pr_1\n"
"```\n"
msgstr ""
"```sh\n"
"$ git fetch origin refs/pull/1/head:pr_1\n"
"From github.com:foo/bar\n"
" * [new ref]         refs/pull/1/head -> pr_1\n"
"```\n"

#. type: Plain text
#: README.md:1710
msgid "### Exporting a repository as a Zip file"
msgstr "### Xu·∫•t m·ªôt repository ra m·ªôt file Zip"

#. type: Plain text
#: README.md:1715
msgid ""
"```sh $ git archive --format zip --output /full/path/to/zipfile.zip main ``` "
"### Push a branch and a tag that have the same name"
msgstr ""
"```sh $ git archive --format zip --output /full/path/to/zipfile.zip main ``` "
"### Push m·ªôt nh√°nh v√† m·ªôt tag c√≥ t√™n gi·ªëng nhau"

#. type: Plain text
#: README.md:1717
msgid ""
"If there is a tag on a remote repository that has the same name as a branch "
"you will get the following error when trying to push that branch with a "
"standard `$ git push <remote> <branch>` command."
msgstr ""
"N·∫øu c√≥ m·ªôt tag tr√™n m·ªôt remote repository m√† c√≥ t√™n gi·ªëng v·ªõi m·ªôt nh√°nh b·∫°n "
"s·∫Ω g·∫∑p ph·∫£i l·ªói khi c·ªë push nhanh v·ªõi m·ªôt l·ªánh `$ git push <remote> "
"<branch>` b√¨nh th∆∞·ªùng."

#. type: Plain text
#: README.md:1723
msgid ""
"```sh $ git push origin <branch> error: dst refspec same matches more than "
"one.  error: failed to push some refs to '<git server>' ```"
msgstr ""
"```sh $ git push origin <branch> error: dst refspec same matches more than "
"one.  error: failed to push some refs to '<git server>' ```"

#. type: Plain text
#: README.md:1725
msgid "Fix this by specifying you want to push the head reference."
msgstr "S·ª≠a l·ªói n√†y b·∫±ng c√°ch ch·ªâ ƒë·ªãnh b·∫°n mu·ªën ƒë·∫©y tham chi·∫øu c·ªßa head."

#. type: Plain text
#: README.md:1729
msgid "```sh $ git push origin refs/heads/<branch-name> ```"
msgstr "```sh $ git push origin refs/heads/<branch-name> ```"

#. type: Plain text
#: README.md:1731
msgid ""
"If you want to push a tag to a remote repository that has the same name as a "
"branch, you can use a similar command."
msgstr ""
"N·∫øu b·∫°n mu·ªën ƒë·∫©y m·ªôt tag v√†o m·ªôt repository t·∫°i remote c√≥ c√πng t√™n v·ªõi m·ªôt "
"nh√°nh, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng m·ªôt l·ªánh t∆∞∆°ng t·ª±."

#. type: Plain text
#: README.md:1735
msgid "```sh $ git push origin refs/tags/<tag-name> ```"
msgstr "```sh $ git push origin refs/tags/<tag-name> ```"

#. type: Plain text
#: README.md:1737
msgid "## Tracking Files"
msgstr "## Tracking (Theo d√µi) c√°c file"

#. type: Plain text
#: README.md:1740
msgid ""
"<a "
"href=\"i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file\"></a> "
"### I want to change a file name's capitalization, without changing the "
"contents of the file"
msgstr ""
"<a "
"href=\"i-want-to-change-a-file-names-capitalization-without-changing-the-contents-of-the-file\"></a> "
"### T√¥i mu·ªën thay ƒë·ªïi c√°ch vi·∫øt hoa c·ªßa t√™n t·ªáp m√† kh√¥ng thay ƒë·ªïi n·ªôi dung "
"c·ªßa t·ªáp"

#. type: Plain text
#: README.md:1744
msgid "```sh (main)$ git mv --force myfile MyFile ```"
msgstr "```sh (main)$ git mv --force myfile MyFile ```"

#. type: Plain text
#: README.md:1746
msgid "### I want to overwrite local files when doing a git pull"
msgstr "### T√¥i mu·ªën ghi ƒë√® l√™n c√°c t·ªáp local khi th·ª±c hi·ªán l·ªánh git pull"

#. type: Plain text
#: README.md:1751
msgid "```sh (main)$ git fetch --all (main)$ git reset --hard origin/main ```"
msgstr "```sh (main)$ git fetch --all (main)$ git reset --hard origin/main ```"

#. type: Plain text
#: README.md:1754
msgid ""
"<a href=\"remove-from-git\"></a> ### I want to remove a file from Git but "
"keep the file"
msgstr ""
"<a href=\"remove-from-git\"></a> ### T√¥i mu·ªën x√≥a m·ªôt t·ªáp kh·ªèi Git nh∆∞ng v·∫´n "
"gi·ªØ t·ªáp"

#. type: Plain text
#: README.md:1758
msgid "```sh (main)$ git rm --cached log.txt ```"
msgstr "```sh (main)$ git rm --cached log.txt ```"

#. type: Plain text
#: README.md:1760
msgid "### I want to revert a file to a specific revision"
msgstr "### T√¥i mu·ªën ƒë·∫£o ng∆∞·ª£c t·ªáp v·ªÅ b·∫£n s·ª≠a ƒë·ªïi c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1762
msgid "Assuming the hash of the commit you want is c5f567:"
msgstr "Gi·∫£ s·ª≠ m√£ hash c·ªßa commit b·∫°n mu·ªën l√† c5f567:"

#. type: Plain text
#: README.md:1766
msgid "```sh (main)$ git checkout c5f567 -- file1/to/restore file2/to/restore ```"
msgstr ""
"```sh (main)$ git checkout c5f567 -- fileS·ªë1/ƒê·ªÉ/Ph·ª•cH·ªìi fileS·ªë2/ƒê·ªÉ/Ph·ª•cH·ªìi "
"```"

#. type: Plain text
#: README.md:1768
msgid ""
"If you want to revert to changes made just 1 commit before c5f567, pass the "
"commit hash as c5f567~1:"
msgstr ""
"N·∫øu b·∫°n mu·ªën ƒë·∫£o ng∆∞·ª£c c√°c thay ƒë·ªïi ƒë∆∞·ª£c th·ª±c hi·ªán ch·ªâ 1 commit tr∆∞·ªõc "
"c5f567, ƒë∆∞a s·ªë hash commit nh∆∞ c5f567~1:"

#. type: Plain text
#: README.md:1772
msgid "```sh (main)$ git checkout c5f567~1 -- file1/to/restore file2/to/restore ```"
msgstr "```sh (main)$ git checkout c5f567~1 -- file1/to/restore file2/to/restore ```"

#. type: Plain text
#: README.md:1774
msgid "### I want to list changes of a specific file between commits or branches"
msgstr ""
"### T√¥i mu·ªën li·ªát k√™ c√°c thay ƒë·ªïi c·ªßa m·ªôt t·ªáp c·ª• th·ªÉ gi·ªØa c√°c commit ho·∫∑c "
"c√°c nh√°nh"

#. type: Plain text
#: README.md:1776
msgid "Assuming you want to compare last commit with file from commit c5f567:"
msgstr "Gi·∫£ s·ª≠ b·∫°n mu·ªën so s√°nh commit cu·ªëi c√πng v·ªõi t·ªáp t·ª´ commit c5f567:"

#. type: Plain text
#: README.md:1780
msgid "```sh $ git diff HEAD:path_to_file/file c5f567:path_to_file/file ```"
msgstr "```sh $ git diff HEAD:path_to_file/file c5f567:path_to_file/file ```"

#. type: Plain text
#: README.md:1782
msgid "Same goes for branches:"
msgstr "C≈©ng gi·ªëng khi so s√°nh nh√°nh nh√°nh:"

#. type: Plain text
#: README.md:1786
msgid "```sh $ git diff main:path_to_file/file staging:path_to_file/file ```"
msgstr "```sh $ git diff main:path_to_file/file staging:path_to_file/file ```"

#. type: Plain text
#: README.md:1788
msgid "### I want Git to ignore changes to a specific file"
msgstr "### T√¥i mu·ªën Git b·ªè qua nh·ªØng thay ƒë·ªïi ƒë·ªëi v·ªõi m·ªôt t·ªáp c·ª• th·ªÉ"

#. type: Plain text
#: README.md:1790
msgid ""
"This works great for config templates or other files that require locally "
"adding credentials that shouldn't be committed."
msgstr ""
"C√°c b∆∞·ªõc sau kh√° h·ª£p cho c√°c m·∫´u c·∫•u h√¨nh ho·∫∑c c√°c t·ªáp y√™u c·∫ßu th√™m th√¥ng "
"tin ƒëƒÉng nh·∫≠p t·∫°i local m√† kh√¥ng n√™n commit"

#. type: Plain text
#: README.md:1794
msgid "```sh $ git update-index --assume-unchanged file-to-ignore ```"
msgstr "```sh $ git update-index --assume-unchanged file-to-ignore ```"

#. type: Plain text
#: README.md:1796
msgid ""
"Note that this does *not* remove the file from source control - it is only "
"ignored locally. To undo this and tell Git to notice changes again, this "
"clears the ignore flag:"
msgstr ""
"L∆∞u √Ω r·∫±ng ƒëi·ªÅu n√†y kh√¥ng x√≥a t·ªáp kh·ªèi ki·ªÉm so√°t source - n√≥ ch·ªâ b·ªã b·ªè qua "
"t·∫°i local. ƒê·ªÉ ho√°n ƒë·ªïi thao t√°c n√†y v√† y√™u c·∫ßu Git l·∫°i ch√∫ √Ω c√°c thay ƒë·ªïi, "
"l·ªánh sau s·∫Ω x√≥a c·ªù b·ªè qua (ignore flag):"

#. type: Plain text
#: README.md:1800
msgid "```sh $ git update-index --no-assume-unchanged file-to-stop-ignoring ```"
msgstr "```sh $ git update-index --no-assume-unchanged file-to-stop-ignoring ```"

#. type: Plain text
#: README.md:1802
msgid "## Debugging with Git"
msgstr "## Debugging (G·ª° l·ªói) with Git"

#. type: Plain text
#: README.md:1804
msgid ""
"The [git-bisect](https://git-scm.com/docs/git-bisect) command uses a binary "
"search to find which commit in your Git history introduced a bug."
msgstr ""
"L·ªánh [git-bisect](https://git-scm.com/docs/git-bisect) s·ª≠ d·ª•ng t√¨m nh·ªã ph√¢n "
"ƒë·ªÉ t√¨m commit ƒë√£ gi·ªõ thi·ªáu l·ªói."

#. type: Plain text
#: README.md:1806
msgid ""
"Suppose you're on the `main` branch, and you want to find the commit that "
"broke some feature. You start bisect:"
msgstr ""
"Gi·∫£ s·ª≠ b·∫°n ƒëang ·ªü nh√°nh `main` v√† b·∫°n mu·ªën t√¨m commit ƒë√£ l√†m h·ªèng c√°i g√¨ "
"ƒë√≥. B·∫°n b·∫Øt ƒë·∫ßu bisect v·ªõi:"

#. type: Plain text
#: README.md:1810
msgid "```sh $ git bisect start ```"
msgstr "```sh $ git bisect start ```"

#. type: Plain text
#: README.md:1812
msgid ""
"Then you should specify which commit is bad, and which one is known to be "
"good. Assuming that your *current* version is bad, and `v1.1.1` is good:"
msgstr ""
"Sau ƒë√≥ b·∫°n ƒë·ªÅ r√µ commit n√†o t·ªìi v√† commit n√†o bi·∫øt l√† t·ªët. Gi·∫£ s·ª≠ b·∫°n bi·∫øt "
"phi√™n b·∫£n *hi·ªán t·∫°i* l√† t·ªìi, v√† `v1.1.1` l√† t·ªët:"

#. type: Plain text
#: README.md:1817
msgid "```sh $ git bisect bad $ git bisect good v1.1.1 ```"
msgstr "```sh $ git bisect bad $ git bisect good v1.1.1 ```"

#. type: Plain text
#: README.md:1819
msgid ""
"Now `git-bisect` selects a commit in the middle of the range that you "
"specified, checks it out, and asks you whether it's good or bad. You should "
"see something like:"
msgstr ""
"B√¢y gi·ªù `git-bisect` ch·ªçn commit ·ªü gi·ªØa kho·∫£ng c√°ch b·∫°n l·ª±a ch·ªçn, checkout "
"c√°i commit ƒë·∫•y, v√† h·ªèi b·∫°n l√† commit n√†y t·ªìi hay t·ªët. B·∫°n s·∫Ω th·∫•y gi·ªëng nh∆∞ "
"th·∫ø n√†y:"

#. type: Plain text
#: README.md:1825
msgid ""
"```sh $ Bisecting: 5 revision left to test after this (roughly 5 step)  $ "
"[c44abbbee29cb93d8499283101fe7c8d9d97f0fe] Commit message $ (c44abbb)$ ```"
msgstr ""
"```sh $ Bisecting: 5 revision left to test after this (roughly 5 step)  $ "
"[c44abbbee29cb93d8499283101fe7c8d9d97f0fe] Commit message $ (c44abbb)$ ```"

#. type: Plain text
#: README.md:1827
msgid "You will now check if this commit is good or bad. If it's good:"
msgstr "B·∫°n ki·ªÉm tra commit xem t·ªët hay t·ªìi. N·∫øu t·ªët:"

#. type: Plain text
#: README.md:1831
msgid "```sh $ (c44abbb)$ git bisect good ```"
msgstr "```sh $ (c44abbb)$ git bisect good ```"

#. type: Plain text
#: README.md:1833
msgid ""
"and `git-bisect` will select another commit from the range for you. This "
"process (selecting `good` or `bad`) will repeat until there are no more "
"revisions left to inspect, and the command will finally print a description "
"of the **first** bad commit."
msgstr ""
"v√† `git-bisect` s·∫Ω ch·ªçn m·ªôt commit kh√°c trong ph·∫°m vi c·ªßa b·∫°n. Qu√° tr√¨nh n√†y "
"s·∫Ω ti·∫øp t·ª•c l·∫∑p l·∫°i cho ƒë·∫øn khi kh√¥ng c√≤n s·ª≠a ƒë·ªïi c·∫ßn ki·ªÉm tra, v√† l·ªánh s·∫Ω "
"cu·ªëi c√πng in ra m√¥ t·∫£ c·ªßa commit t·ªìi **ƒë·∫ßu ti√™n**"

#. type: Plain text
#: README.md:1835
msgid "## Configuration"
msgstr "## C·∫•u h√¨nh (Configuration)"

#. type: Plain text
#: README.md:1837
msgid "### I want to add aliases for some Git commands"
msgstr "### T√¥i mu·ªën th√™m b√≠ danh (alias) cho m·ªôt s·ªë l·ªánh Git"

#. type: Plain text
#: README.md:1839
msgid ""
"On OS X and Linux, your git configuration file is stored in "
"```~/.gitconfig```.  I've added some example aliases I use as shortcuts (and "
"some of my common typos) in the ```[alias]``` section as shown below:"
msgstr ""
"Tr√™n OS X v√† Linux, file c·∫•u h√¨nh git ƒë∆∞·ª£c l∆∞u trong ```~/.gitconfig```.  "
"T√¥i ƒë√£ th√™m m·ªôt s·ªë b√≠ danh m·∫´u m√† t√¥i s·ª≠ d·ª•ng l√†m shortcut (v√† m·ªôt s·ªë l·ªói "
"ch√≠nh t·∫£ ph·ªï bi·∫øn c·ªßa t√¥i) trong ph·∫ßn ```[alias]``` ƒë∆∞·ª£c hi·ªÉn th·ªã nh∆∞ d∆∞·ªõi "
"ƒë√¢y:"

#. type: Plain text
#: README.md:1866, no-wrap
msgid ""
"```vim\n"
"[alias]\n"
"    a = add\n"
"    amend = commit --amend\n"
"    c = commit\n"
"    ca = commit --amend\n"
"    ci = commit -a\n"
"    co = checkout\n"
"    d = diff\n"
"    dc = diff --changed\n"
"    ds = diff --staged\n"
"    extend = commit --amend -C HEAD\n"
"    f = fetch\n"
"    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n"
"    m = merge\n"
"    one = log --pretty=oneline\n"
"    outstanding = rebase -i @{u}\n"
"    reword = commit --amend --only\n"
"    s = status\n"
"    unpushed = log @{u}\n"
"    wc = whatchanged\n"
"    wip = rebase -i @{u}\n"
"    zap = fetch -p\n"
"    day = log --reverse --no-merges --branches=* --date=local "
"--since=midnight --author=\\\"$(git config --get user.name)\\\"\n"
"    delete-merged-branches = \"!f() { git checkout --quiet main && git "
"branch --merged | grep --invert-match '\\\\*' | xargs -n 1 git branch "
"--delete; git checkout --quiet @{-1}; }; f\"\n"
"```\n"
msgstr ""
"```vim\n"
"[alias]\n"
"    a = add\n"
"    amend = commit --amend\n"
"    c = commit\n"
"    ca = commit --amend\n"
"    ci = commit -a\n"
"    co = checkout\n"
"    d = diff\n"
"    dc = diff --changed\n"
"    ds = diff --staged\n"
"    extend = commit --amend -C HEAD\n"
"    f = fetch\n"
"    loll = log --graph --decorate --pretty=oneline --abbrev-commit\n"
"    m = merge\n"
"    one = log --pretty=oneline\n"
"    outstanding = rebase -i @{u}\n"
"    reword = commit --amend --only\n"
"    s = status\n"
"    unpushed = log @{u}\n"
"    wc = whatchanged\n"
"    wip = rebase -i @{u}\n"
"    zap = fetch -p\n"
"        day = log --reverse --no-merges --branches=* --date=local "
"--since=midnight --author=\\\"$(git config --get user.name)\\\"\n"
"    delete-merged-branches = \"!f() { git checkout --quiet main && git "
"branch --merged | grep --invert-match '\\\\*' | xargs -n 1 git branch "
"--delete; git checkout --quiet @{-1}; }; f\"\n"
"```\n"

#. type: Plain text
#: README.md:1868
msgid "### I want to add an empty directory to my repository"
msgstr "### T√¥i mu·ªën th√™m m·ªôt th∆∞ m·ª•c tr·ªëng v√†o repository c·ªßa t√¥i"

#. type: Plain text
#: README.md:1870
msgid ""
"You can‚Äôt! Git doesn‚Äôt support this, but there‚Äôs a hack. You can create a "
".gitignore file in the directory with the following contents:"
msgstr ""
"B·∫°n kh√¥ng th·ªÉ! Git kh√¥ng h·ªó tr·ª£ ƒëi·ªÅu n√†y, nh∆∞ng c√≥ m·ªôt hack. B·∫°n c√≥ th·ªÉ t·∫°o "
"t·ªáp .gitignore trong th∆∞ m·ª•c v·ªõi c√°c n·ªôi dung sau:"

#. type: Plain text
#: README.md:1877, no-wrap
msgid ""
"```\n"
" # Ignore everything in this directory\n"
" *\n"
" # Except this file\n"
" !.gitignore\n"
"```\n"
msgstr ""
"```\n"
" # B·ªè qua t·∫•t c·∫£ m·ªçi th·ª© trong repository\n"
" *\n"
" # Ngo·∫°i tr·ª´ file n√†y\n"
" !.gitignore\n"
"```\n"

#. type: Plain text
#: README.md:1879
msgid ""
"Another common convention is to make an empty file in the folder, titled "
".gitkeep."
msgstr "M·ªôt quy ∆∞·ªõc chung kh√°c l√† t·∫°o m·ªôt t·ªáp tr·ªëng trong th∆∞ m·ª•c c√≥ t√™n .gitkeep."

#. type: Plain text
#: README.md:1884
msgid "```sh $ mkdir mydir $ touch mydir/.gitkeep ```"
msgstr "```sh $ mkdir mydir $ touch mydir/.gitkeep ```"

#. type: Plain text
#: README.md:1886
msgid ""
"You can also name the file as just .keep , in which case the second line "
"above would be ```touch mydir/.keep```"
msgstr ""
"B·∫°n c≈©ng c√≥ th·ªÉ ƒë·∫∑t t√™n t·ªáp l√† .keep, trong tr∆∞·ªùng h·ª£p ƒë√≥ d√≤ng th·ª© hai ·ªü "
"tr√™n s·∫Ω ```touch mydir/.keep```"

#. type: Plain text
#: README.md:1888
msgid "### I want to cache a username and password for a repository"
msgstr ""
"### T√¥i mu·ªën cache (cho v√†o b·ªô nh·ªõ ƒë·ªám) m·ªôt username v√† password cho m·ªôt "
"repository"

#. type: Plain text
#: README.md:1890
msgid ""
"You might have a repository that requires authentication.  In which case you "
"can cache a username and password so you don't have to enter it on every "
"push and pull. Credential helper can do this for you."
msgstr ""
"B·∫°n c√≥ th·ªÉ c√≥ m·ªôt repository y√™u c·∫ßu x√°c th·ª±c (authentication).  Trong "
"tr∆∞·ªùng h·ª£p n√†y b·∫°n c√≥ th·ªÉ cache m·ªôt username v√† password v√¨ v·∫≠y b·∫°n kh√¥ng "
"ph·∫£i nh·∫≠p n√≥ v√†o m·ªói l·∫ßn push / pull. Ph·ª• t√° ch·ª©ng ch·ªâ(credential.helper) c√≥ "
"th·ªÉ l√†m ƒëi·ªÅu n√†y cho b·∫°n."

#. type: Plain text
#: README.md:1895
msgid ""
"```sh $ git config --global credential.helper cache # Set git to use the "
"credential memory cache ```"
msgstr ""
"```sh $ git config --global credential.helper cache # ƒê·∫∑t git d√πng b·ªô nh·ªõ "
"ƒë·ªám ch·ª©ng ch·ªâ ```"

#. type: Plain text
#: README.md:1900
msgid ""
"```sh $ git config --global credential.helper 'cache --timeout=3600' # Set "
"the cache to timeout after 1 hour (setting is in seconds)  ```"
msgstr ""
"```sh $ git config --global credential.helper 'cache --timeout=3600' # ƒê·∫∑t "
"b·ªô nh·ªõ ƒë·ªám k·∫øt th√∫c sau 1h (c·∫•u h√¨nh d√πng gi√¢y/s)  ```"

#. type: Plain text
#: README.md:1902
msgid "To find a credential helper:"
msgstr "ƒê·ªÉ t√¨m ph·ª• t√° ch·ª©ng ch·ªâ:"

#. type: Plain text
#: README.md:1907
msgid ""
"```sh $ git help -a | grep credential # Shows you possible credential "
"helpers ```"
msgstr "```sh $ git help -a | grep credential # Ph√¥ b√†y c√°c ph·ª• t√° ch·ª©ng ch·ªâ ```"

#. type: Plain text
#: README.md:1909
msgid "For OS specific credential caching:"
msgstr "B·ªô nh·ªõ ƒë·ªám ch·ª©ng ch·ªâ cho c√°c h·ªá ƒëi·ªÅu h√†nh (operating system/OS) c·ª• th·ªÉ :"

#. type: Plain text
#: README.md:1914
msgid "```sh $ git config --global credential.helper osxkeychain # For OSX ```"
msgstr "```sh $ git config --global credential.helper osxkeychain # cho OSX ```"

#. type: Plain text
#: README.md:1919
msgid ""
"```sh $ git config --global credential.helper manager # Git for Windows "
"2.7.3+ ```"
msgstr ""
"```sh $ git config --global credential.helper manager # Git for Windows "
"2.7.3+ ```"

#. type: Plain text
#: README.md:1924
msgid ""
"```sh $ git config --global credential.helper gnome-keyring # Ubuntu and "
"other GNOME-based distros ```"
msgstr ""
"```sh $ git config --global credential.helper gnome-keyring # Ubuntu v√† c√°c "
"b·∫£n ph√¢n ph·ªëi d·ª±a tr√™n GNOME ```"

#. type: Plain text
#: README.md:1926
msgid ""
"More credential helpers can likely be found for different distributions and "
"operating systems."
msgstr ""
"C√°c ph·ª• t√° ch·ª©ng ch·ªâ kh√°c c√≥ kh·∫£ nƒÉng cao t√¨m ƒë∆∞·ª£c cho c√°c b·∫£n ph√¢n ph·ªëi v√† "
"h·ªá ƒëi·ªÅu h√†nh kh√°c."

#. type: Plain text
#: README.md:1928
msgid "### I want to make Git ignore permissions and filemode changes"
msgstr "### T√¥i mu·ªën Git b·ªè qua c√°c quy·ªÅn v√† thay ƒë·ªïi v·ªÅ filemode (ch·∫ø ƒë·ªô file)"

#. type: Plain text
#: README.md:1932
msgid "```sh $ git config core.fileMode false ```"
msgstr "```sh $ git config core.fileMode false ```"

#. type: Plain text
#: README.md:1934
msgid ""
"If you want to make this the default behaviour for logged-in users, then "
"use:"
msgstr ""
"N·∫øu b·∫°n mu·ªën ƒë·∫∑t h√†nh vi n√†y l√† h√†nh vi m·∫∑c ƒë·ªãnh cho ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng "
"nh·∫≠p, th√¨ h√£y s·ª≠ d·ª•ng:"

#. type: Plain text
#: README.md:1938
msgid "```sh $ git config --global core.fileMode false ```"
msgstr "```sh $ git config --global core.fileMode false ```"

#. type: Plain text
#: README.md:1940
msgid "### I want to set a global user"
msgstr "### T√¥i mu·ªën ƒë·∫∑t ng∆∞·ªùi d√πng to√†n c·ª•c (global user)"

#. type: Plain text
#: README.md:1942
msgid ""
"To configure user information used across all local repositories, and to set "
"a name that is identifiable for credit when review version history:"
msgstr ""
"ƒê·ªÉ c·∫•u h√¨nh th√¥ng tin ng∆∞·ªùi d√πng ƒë∆∞·ª£c s·ª≠ d·ª•ng tr√™n t·∫•t c·∫£ c√°c repository t·∫°i "
"local v√† ƒë·ªÉ ƒë·∫∑t t√™n c√≥ th·ªÉ nh·∫≠n d·∫°ng khi xem l·ªãch s·ª≠ phi√™n b·∫£n:"

#. type: Plain text
#: README.md:1946
msgid "```sh $ git config --global user.name ‚Äú[firstname lastname]‚Äù ```"
msgstr "```sh $ git config --global user.name \"[t√™n-ri√™ng t√™n-h·ªç]\" ```"

#. type: Plain text
#: README.md:1948
msgid "To set an email address that will be associated with each history marker:"
msgstr "ƒê·ªÉ ƒë·∫∑t ƒë·ªãa ch·ªâ email g·∫Øn v·ªõi m·ªói m·ªëc l·ªãch s·ª≠:"

#. type: Plain text
#: README.md:1952
msgid "```sh git config --global user.email ‚Äú[valid-email]‚Äù ```"
msgstr "```sh git config --global user.email \"[email-c√≥-hi·ªáu-l·ª±c]\" ```"

#. type: Plain text
#: README.md:1954
msgid "## I've no idea what I did wrong"
msgstr "## T√¥i kh√¥ng bi·∫øt m√¨nh ƒë√£ l√†m g√¨ sai"

#. type: Plain text
#: README.md:1956
msgid ""
"So, you're screwed - you `reset` something, or you merged the wrong branch, "
"or you force pushed and now you can't find your commits. You know, at some "
"point, you were doing alright, and you want to go back to some state you "
"were at."
msgstr ""
"Ok, b·∫°n g·∫∑p r·∫Øc r·ªëi l·ªõn - b·∫°n `reset` v√†i th·ª©, ho·∫∑c b·∫°n merge sai nh√°nh, "
"ho·∫∑c b·∫°n push √©p (force push) v√† b√¢y gi·ªù b·∫°n kh√¥ng th·ªÉ t√¨m th·∫•y c√°c commit "
"c·ªßa b·∫°n. B·∫°n bi·∫øt, t·∫°i m·ªôt s·ªë th·ªùi ƒëi·ªÉm, b·∫°n kh√¥ng c√≥ v·∫•n ƒë·ªÅ v√† b·∫°n mu·ªën "
"quay tr·ªü l·∫°i tr·∫°ng th√°i b·∫°n ƒëang ·ªü ƒë√≥."

#. type: Plain text
#: README.md:1958
msgid ""
"This is what `git reflog` is for. `reflog` keeps track of any changes to the "
"tip of a branch, even if that tip isn't referenced by a branch or a "
"tag. Basically, every time HEAD changes, a new entry is added to the "
"reflog. This only works for local repositories, sadly, and it only tracks "
"movements (not changes to a file that weren't recorded anywhere, for "
"instance)."
msgstr ""
"ƒê√¢y l√† t√¨nh hu·ªëng cho `git reflog`. `reflog` theo d√µi b·∫•t k·ª≥ thay ƒë·ªïi n√†o "
"ƒë·ªëi v·ªõi ƒë·∫ßu nh√°nh, ngay c·∫£ khi ƒë·∫ßu nh√°nh ƒë√≥ kh√¥ng ƒë∆∞·ª£c tham chi·∫øu b·ªüi nh√°nh "
"ho·∫∑c tag. V·ªÅ c∆° b·∫£n, m·ªói l·∫ßn HEAD thay ƒë·ªïi, m·ªôt m·ª•c m·ªõi ƒë∆∞·ª£c th√™m v√†o "
"reflog. Th·∫≠t ƒë√°ng bu·ªìn l√† c√°ch n√†y ch·ªâ ho·∫°t ƒë·ªông t·ªët ƒë·ªëi v·ªõi c√°c repository "
"·ªü local, v√† n√≥ ch·ªâ theo d√µi c√°c chuy·ªÉn ƒë·ªông (v√≠ d·ª•: kh√¥ng thay ƒë·ªïi m·ªôt t·ªáp "
"kh√¥ng ƒë∆∞·ª£c ghi ·ªü b·∫•t k·ª≥ ƒë√¢u)."

#. type: Plain text
#: README.md:1965
msgid ""
"```sh (main)$ git reflog 0a2e358 HEAD@{0}: reset: moving to HEAD~2 0254ea7 "
"HEAD@{1}: checkout: moving from 2.2 to main c10f740 HEAD@{2}: checkout: "
"moving from main to 2.2 ```"
msgstr ""
"```sh (main)$ git reflog 0a2e358 HEAD@{0}: reset: moving to HEAD~2 0254ea7 "
"HEAD@{1}: checkout: moving from 2.2 to main c10f740 HEAD@{2}: checkout: "
"moving from main to 2.2 ```"

#. type: Plain text
#: README.md:1967
msgid ""
"The reflog above shows a checkout from main to the 2.2 branch and back. From "
"there, there's a hard reset to an older commit. The latest activity is "
"represented at the top labeled `HEAD@{0}`."
msgstr ""
"C√°c reflog ·ªü tr√™n cho th·∫•y m·ªôt checkout t·ª´ main ƒë·∫øn nh√°nh 2.2 r·ªìi quay tr·ªü "
"l·∫°i. T·ª´ ƒë√≥, c√≥ m·ªôt reset c·ª©ng v·ªÅ m·ªôt commit c≈© h∆°n. Ho·∫°t ƒë·ªông m·ªõi nh·∫•t ƒë∆∞·ª£c "
"th·ªÉ hi·ªán ·ªü ƒë·∫ßu ƒë∆∞·ª£c g·∫Øn nh√£n `HEAD@{0}`."

#. type: Plain text
#: README.md:1969
msgid ""
"If it turns out that you accidentally moved back, the reflog will contain "
"the commit main pointed to (0254ea7) before you accidentally dropped 2 "
"commits."
msgstr ""
"N·∫øu n√≥ ch·ªâ ra r·∫±ng b·∫°n v√¥ t√¨nh di chuy·ªÉn tr·ªü l·∫°i, c√°c reflog s·∫Ω ch·ª©a commit "
"m√† main ch·ªâ ƒë·∫øn (0254ea7) tr∆∞·ªõc khi b·∫°n v√¥ t√¨nh gi·∫£m 2 commit"

#. type: Plain text
#: README.md:1973
msgid "```sh $ git reset --hard 0254ea7 ```"
msgstr "```sh $ git reset --hard 0254ea7 ```"

#. type: Plain text
#: README.md:1975
msgid ""
"Using `git reset` it is then possible to change main back to the commit it "
"was before. This provides a safety net in case history was accidentally "
"changed."
msgstr ""
"S·ª≠ d·ª•ng `git reset` ƒë·ªÉ c√≥ th·ªÉ thay ƒë·ªïi main tr·ªü v·ªÅ commit tr∆∞·ªõc ƒë√≥. C√°ch n√†y "
"cung c·∫•p m·∫°ng l∆∞·ªõi an to√†n trong tr∆∞·ªùng h·ª£p l·ªãch s·ª≠ v√¥ t√¨nh b·ªã thay ƒë·ªïi."

#. type: Plain text
#: README.md:1977
msgid ""
"(copied and edited from "
"[Source](https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog))."
msgstr ""
"(ƒë√£ sao ch√©p v√† ch·ªânh s·ª≠a t·ª´ "
"[Source](https://www.atlassian.com/git/tutorials/rewriting-history/git-reflog))."

#. type: Plain text
#: README.md:1980
msgid "<a name=\"git-shortcuts\"></a> ## Git Shortcuts"
msgstr "<a name=\"git-shortcuts\"></a> ## Git Shortcuts (ph√≠m t·∫Øt)"

#. type: Plain text
#: README.md:1982
msgid "### Git Bash"
msgstr "### Git Bash"

#. type: Plain text
#: README.md:1984
msgid ""
"Once you're comfortable with what the above commands are doing, you might "
"want to create some shortcuts for Git Bash. This allows you to work a lot "
"faster by doing complex tasks in really short commands."
msgstr ""
"M·ªôt khi b·∫°n th·∫•y tho·∫£i m√°i v·ªõi c√°c l·ªánh tr√™n, b·∫°n c√≥ th·ªÉ mu·ªën t·∫°o c√°c ph√≠m "
"t·∫Øt cho Git Bash. C√°ch n√†y gi√∫p b·∫°n l√†m vi·ªác nhanh h∆°n v√¨ ch·∫°y c√°c h√†nh vi "
"ph·ª©c t·∫°p v·ªõi c√°c l·ªánh ng·∫Øn h∆°n."

#. type: Plain text
#: README.md:1987
msgid "```sh alias sq=squash"
msgstr "```sh alias sq=squash"

#. type: Plain text
#: README.md:1992, no-wrap
msgid ""
"function squash() {\n"
"    git rebase -i HEAD~$1\n"
"}\n"
"```\n"
msgstr ""
"function squash() {\n"
"    git rebase -i HEAD~$1\n"
"}\n"
"```\n"

#. type: Plain text
#: README.md:1994
msgid "Copy those commands to your .bashrc or .bash_profile."
msgstr "Copy c√°c l·ªánh n√†y v√†o .bashrc ho·∫∑c .bash_profile c·ªßa b·∫°n."

#. type: Plain text
#: README.md:1996
msgid "### PowerShell on Windows"
msgstr "### PowerShell tr√™n Windows"

#. type: Plain text
#: README.md:1998
msgid ""
"If you are using PowerShell on Windows, you can also set up aliases and "
"functions. Add these commands to your profile, whose path is defined in the "
"`$profile` variable. Learn more at the [About "
"Profiles](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles) "
"page on the Microsoft documentation site."
msgstr ""
"N·∫øu b·∫°n d√πng Powershell tr√™n Windows, b·∫°n c≈©ng c√≥ th·ªÉ ƒë·∫∑t c√°c b√≠ danh v√† "
"ch·ª©c nƒÉng t·∫Øt. Cho th√™m c√°c l·ªánh n√†y v√†o prolfe c·ªßa b·∫°n, ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c ƒë·ªãnh "
"nghƒ©a ·ªü bi·∫øn `$profile`. H·ªçc th√™m v·ªõi trang [About "
"Profiles](https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_profiles) "
"t·∫°i trang t√†i li·ªáu tham kh·∫£o c·ªßa Microsoft ."

#. type: Plain text
#: README.md:2001
msgid "```powershell Set-Alias sq Squash-Commits"
msgstr "```powershell Set-Alias sq Squash-Commits"

#. type: Plain text
#: README.md:2006, no-wrap
msgid ""
"function Squash-Commits {\n"
"  git rebase -i HEAD~$1\n"
"}\n"
"```\n"
msgstr ""
"function Squash-Commits {\n"
"  git rebase -i HEAD~$1\n"
"}\n"
"```\n"

#. type: Plain text
#: README.md:2008
msgid "# Other Resources"
msgstr "# T√†i nguy√™n kh√°c"

#. type: Plain text
#: README.md:2010
msgid "## Books"
msgstr "## S√°ch"

#. type: Bullet: '* '
#: README.md:2015
msgid ""
"[Learn Enough Git to Be Dangerous](https://www.learnenough.com/git-tutorial) "
"- A book by Michael Hartl covering Git from basics"
msgstr ""
"[Learn Enough Git to Be Dangerous](https://www.learnenough.com/git-tutorial) "
"- S√°ch c·ªßa Michael Hartl cho Git t·ª´ nh·ªØng ƒëi·ªÅu c∆° b·∫£n"

#. type: Bullet: '* '
#: README.md:2015
msgid ""
"[Pro Git](https://git-scm.com/book/en/v2) - Scott Chacon and Ben Straub's "
"excellent book about Git"
msgstr ""
"[Pro Git](https://git-scm.com/book/en/v2) - M·ªôt cu·ªën s√°ch xu·∫•t ch√∫ng c·ªßa "
"Scott Chacon v√† Ben Straub"

#. type: Bullet: '* '
#: README.md:2015
msgid ""
"[Git Internals](https://github.com/pluralsight/git-internals-pdf) - Scott "
"Chacon's other excellent book about Git"
msgstr ""
"[Git Internals](https://github.com/pluralsight/git-internals-pdf) - Cu·ªën "
"s√°ch xu·∫•t ch√∫ng kh√°c v·ªÅ Git c·ªßa Scott Chacon"

#. type: Bullet: '* '
#: README.md:2015
msgid ""
"[Nasa "
"handbook](https://www.nasa.gov/sites/default/files/atoms/files/nasa_systems_engineering_handbook.pdf)"
msgstr ""
"[S·ªï tay "
"NASA](https://www.nasa.gov/sites/default/files/atoms/files/nasa_systems_engineering_handbook.pdf)"

#. type: Plain text
#: README.md:2017
msgid "## Tutorials"
msgstr "## H∆∞·ªõng d·∫´n"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[19 Git Tips For Everyday "
"Use](https://www.alexkras.com/19-git-tips-for-everyday-use) - A list of "
"useful Git one liners"
msgstr ""
"[19 m·∫πo s·ª≠ d·ª•ng GIT h√†ng "
"ng√†y](https://www.alexkras.com/19-git-tips-for-everyday-use) - M·ªôt danh s√°ch "
"c√°c m·∫πo d√πng GIT h·ªØu √≠ch."

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Atlassian's Git tutorial](https://www.atlassian.com/git/tutorials) Get Git "
"right with tutorials from beginner to advanced."
msgstr ""
"[H∆∞·ªõng d·∫´n Git c·ªßa Atlassian](https://www.atlassian.com/git/tutorials) - S·ª≠ "
"d·ª•ng Git ƒë√∫ng v·ªõi c√°c h∆∞·ªõng d·∫´n t·ª´ c∆° b·∫£n ƒë·∫øn n√¢ng cao."

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Learn Git branching](https://learngitbranching.js.org/) An interactive web "
"based branching/merging/rebasing tutorial"
msgstr ""
"[H·ªçc v·ªÅ nh√°nh Git](https://learngitbranching.js.org/) - H∆∞·ªõng d·∫´n ph√¢n nh√°nh "
"/ merging / rebasing d·ª±a tr√™n web interactive"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Getting solid at Git rebase "
"vs. "
"merge](https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa)"
msgstr ""
"[Ch·ªü n√™n v·ªØng ch·∫Øc v·ªÅ Git rebase "
"vs. "
"merge](https://medium.com/@porteneuve/getting-solid-at-git-rebase-vs-merge-4fa1a48c53aa)"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Git Commands and Best Practices Cheat "
"Sheet](https://zeroturnaround.com/rebellabs/git-commands-and-best-practices-cheat-sheet) "
"- A Git cheat sheet in a blog post with more explanations"
msgstr ""
"[T·ªù gian l·∫≠n l·ªánh v√† th·ª±c h√†nh t·ªët Git "
"](https://zeroturnaround.com/rebellabs/git-commands-and-best-practices-cheat-sheet) "
"- M·ªôt Git cheat sheet trong m·ªôt b√†i ƒëƒÉng tr√™n blog v·ªõi nhi·ªÅu gi·∫£i th√≠ch h∆°n"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Git from the inside "
"out](https://codewords.recurse.com/issues/two/git-from-the-inside-out) - A "
"tutorial that dives into Git's internals"
msgstr ""
"[Git t·ª´ trong ra "
"ngo√†i](https://codewords.recurse.com/issues/two/git-from-the-inside-out) - "
"H∆∞·ªõng d·∫´n ƒëi s√¢u v√†o Git"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[git-workflow](https://github.com/asmeurer/git-workflow) - [Aaron "
"Meurer](https://github.com/asmeurer)'s howto on using Git to contribute to "
"open source repositories"
msgstr ""
"[git-workflow](https://github.com/asmeurer/git-workflow) - [Aaron "
"Meurer](https://github.com/asmeurer) vi·∫øt c√°ch s·ª≠ d·ª•ng Git ƒë·ªÉ ƒë√≥ng g√≥p v√†o "
"repository m√£ ngu·ªìn m·ªü (open source)"

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[GitHub as a "
"workflow](https://hugogiraudel.com/2015/08/13/github-as-a-workflow/) - An "
"interesting take on using GitHub as a workflow, particularly with empty PRs"
msgstr ""
"[GitHub as a "
"workflow](https://hugogiraudel.com/2015/08/13/github-as-a-workflow/) - M·ªôt √Ω "
"ki·∫øn th√∫ v·ªã v·ªÅ s·ª≠ d·ª•ng GitHub nh∆∞ m·ªôt quy tr√¨nh l√†m vi·ªác, ƒë·∫∑c bi·ªát v·ªõi c√°c "
"PR tr·ªëng."

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[Githug](https://github.com/Gazler/githug) - A game to learn more common Git "
"workflows"
msgstr ""
"[Githug](https://github.com/Gazler/githug) - M·ªôt tr√≤ ch∆°i ƒë·ªÉ h·ªçc th√™m v·ªÅ "
"lu·ªìng l√†m vi·ªác th∆∞·ªùng th·∫•y c·ªßa Git."

#. type: Bullet: '* '
#: README.md:2028
msgid ""
"[learnGitBranching](https://github.com/pcottle/learnGitBranching) - An "
"interactive git visualization to challenge and educate!"
msgstr ""
"[learnGitBranching](https://github.com/pcottle/learnGitBranching) - H√¨nh "
"dung git c√≥ t∆∞∆°ng t√°c ƒë·ªÉ th·ª≠ th√°ch v√† gi√°o d·ª•c!"

#. type: Plain text
#: README.md:2030
msgid "## Scripts and Tools"
msgstr "## Scripts (t·∫≠p l·ªánh) v√† c√°c c√¥ng c·ª•"

#. type: Bullet: '* '
#: README.md:2037
msgid ""
"[firstaidgit.io](http://firstaidgit.io/) A searchable selection of the most "
"frequently asked Git questions"
msgstr ""
"[firstaidgit.io](http://firstaidgit.io/) - Danh s√°ch ƒë∆∞·ª£c l·ª±a ch·ªçn c√≥ th·ªÉ "
"t√¨m ki·∫øm c√°c c√¢u h·ªèi th∆∞·ªùng g·∫∑p v·ªÅ Git"

#. type: Bullet: '* '
#: README.md:2037
msgid ""
"[git-extra-commands](https://github.com/unixorn/git-extra-commands) - a "
"collection of useful extra Git scripts"
msgstr ""
"[git-extra-commands](https://github.com/unixorn/git-extra-commands) - T·∫≠p "
"h·ª£p c√°c script Git m·ªü r·ªông h·ªØu √≠ch"

#. type: Bullet: '* '
#: README.md:2037
msgid ""
"[git-extras](https://github.com/tj/git-extras) - GIT utilities -- repo "
"summary, repl, changelog population, author commit percentages and more"
msgstr ""
"[git-extras](https://github.com/tj/git-extras) - C√°c ti·ªán √≠ch GIT -- Repo "
"t√≥m t·∫Øt, thay th·∫ø, s·ªë l∆∞·ª£ng thay ƒë·ªïi, t·ª∑ l·ªá ph·∫ßn trƒÉm c·ªßa t√°c gi·∫£ v√† nhi·ªÅu "
"n·ªØa"

#. type: Bullet: '* '
#: README.md:2037
msgid ""
"[git-fire](https://github.com/qw3rtman/git-fire) - git-fire is a Git plugin "
"that helps in the event of an emergency by adding all current files, "
"committing, and pushing to a new branch (to prevent merge conflicts)."
msgstr ""
"[git-fire](https://github.com/qw3rtman/git-fire) - git-fire l√† m·ªôt plugin "
"cho Git ƒë·ªÉ gi√∫p trong tr∆∞·ªùng h·ª£p kh·∫©n c·∫•p b·∫±ng c√°ch th√™m t·∫•t c·∫£ c√°c t·ªáp hi·ªán "
"t·∫°i, commit v√† push v√†o m·ªôt nh√°nh m·ªõi (ƒë·ªÉ ngƒÉn xung ƒë·ªôt khi merge)."

#. type: Bullet: '* '
#: README.md:2037
msgid "[git-tips](https://github.com/git-tips/tips) - Small Git tips"
msgstr "[git-tips](https://github.com/git-tips/tips) - C√°c m·∫πo Git nh·ªè"

#. type: Bullet: '* '
#: README.md:2037
msgid ""
"[git-town](https://github.com/Originate/git-town) - Generic, high-level Git "
"workflow support! http://www.git-town.com"
msgstr ""
"[git-town](https://github.com/Originate/git-town) - H·ªó tr·ª£ lu·ªìng l√†m vi·ªác "
"Git chung, t·∫ßm n√¢ng cao! http://www.git-town.com"

#. type: Plain text
#: README.md:2051
msgid ""
"## GUI Clients * [GitKraken](https://www.gitkraken.com/) - The downright "
"luxurious Git client,for Windows, Mac & Linux * "
"[git-cola](https://git-cola.github.io/) - another Git client for Windows and "
"OS X * [GitUp](https://github.com/git-up/GitUp) - A newish GUI that has some "
"very opinionated ways of dealing with Git's complications * "
"[gitx-dev](https://rowanj.github.io/gitx/) - another graphical Git client "
"for OS X * [Sourcetree](https://www.sourcetreeapp.com/) - Simplicity meets "
"power in a beautiful and free Git GUI. For Windows and Mac.  * "
"[Tower](https://www.git-tower.com/) - graphical Git client for OS X (paid)  "
"* [tig](https://jonas.github.io/tig/) - terminal text-mode interface for Git "
"* [Magit](https://magit.vc/) - Interface to Git implemented as an Emacs "
"package.  * [GitExtensions](https://github.com/gitextensions/gitextensions) "
"- a shell extension, a Visual Studio 2010-2015 plugin and a standalone Git "
"repository tool.  * [Fork](https://git-fork.com/) - a fast and friendly Git "
"client for Mac (beta)  * [gmaster](https://gmaster.io/) - a Git client for "
"Windows that has 3-way merge, analyze refactors, semantic diff and merge "
"(beta)  * [gitk](https://git-scm.com/docs/gitk) - a Git client for linux to "
"allow simple view of repo state.  * "
"[SublimeMerge](https://www.sublimemerge.com/) - Blazing fast, extensible "
"client that provides 3-way merges, powerful search and syntax highlighting, "
"in active development."
msgstr ""
"## GUI Clients * [GitKraken](https://www.gitkraken.com/) - Client sang tr·ªçng "
"cho Windows, Mac & Linux * [git-cola](https://git-cola.github.io/) - Git "
"client kh√°c cho Windows v√† OS X * [GitUp](https://github.com/git-up/GitUp) - "
"M·ªôt GUI m·ªõi m·∫ª m√† c√≥ m·ªôt s·ªë c√°ch r·∫•t quan t√¢m ƒë·ªÉ gi·∫£i quy·∫øt c√°c vi·ªác kh√≥ "
"ch·ªãu c·ªßa Git * [gitx-dev](https://rowanj.github.io/gitx/) - M·ªôt Git client "
"ƒë·ªì ho·∫° kh√°c cho OS X * [Sourcetree](https://www.sourcetreeapp.com/) - S·ª± ƒë∆°n "
"gi·∫£n nh∆∞ng m·∫°nh m·∫Ω cho giao di·ªán Git ƒë·∫πp v√† mi·ªÖn ph√≠ cho Windows v√† Mac.  * "
"[Tower](https://www.git-tower.com/) - Git client ƒë·ªì ho·∫° cho OS X (tr·∫£ ph√≠)  "
"* [tig](https://jonas.github.io/tig/) - Terminal text-mode interface cho Git "
"* [Magit](https://magit.vc/) - Interface cho Git th·ª±c hi·ªán nh∆∞ m·ªôt g√≥i Emacs "
".  * [GitExtensions](https://github.com/gitextensions/gitextensions) - M·ªôt "
"shell extension, m·ªôt Visual Studio 2010-2015 plugin v√† m·ªôt c√¥ng c·ª• Git "
"repository ƒë·ªôc l·∫≠p.  * [Fork](https://git-fork.com/) - M·ªôt Git client nhanh "
"v√† th√¢n thi·ªán cho Mac (beta)  * [gmaster](https://gmaster.io/) - M·ªôt Git "
"client cho Windows v·ªõi 3 c√°ch merge, analyze refactors, semantic diff v√† "
"merge (beta)  * [gitk](https://git-scm.com/docs/gitk) - M·ªôt Git client cho "
"Linux ƒë·ªÉ cho ph√©p xem ƒë∆°n gi·∫£n cho tr·∫°ng th√°i repo.  * "
"[SublimeMerge](https://www.sublimemerge.com/) - Client nhanh, m·ªü r·ªông, cung "
"c·∫•p 3 c√°ch merge, t√¨m ki·∫øm m·∫°nh m·∫Ω v√† l√†m n·ªïi b·∫≠t c√∫ ph√°p, ƒëang ph√°t tri·ªÉn "
"t√≠ch c·ª±c."
